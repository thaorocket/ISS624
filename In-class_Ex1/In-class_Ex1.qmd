---
title: "In-class Exercise 1"
editor: visual
---

## Overview

This exercise covers Chapter 3 on Spatial Weights and their applications using R.

## Data Set

Two datasets will be used in this exercise:

1.  Hunan County Boundary Layer: A geospatial set in ESRI shapefile format.
2.  Hunan_2012.csv: This file contains selected Hunan's local development indicators in 2012.

## Getting Started

The code chunk below will install and load tidyverse and sf packages.

```{r}
pacman::p_load(tidyverse,sf,spdep,tmap)
```

## Importing Geospatial Data

### Importing polygon features

This code chunks will import ESRI shapefile into R.

```{r}
hunan<-st_read(dsn="data/geospatial",layer="Hunan")
```

### Importing attribute data in csv to R environment

```{r}
hunan2012<-read_csv("data/aspatial/Hunan_2012.csv")
```

### Performing relational join

Next we will join the attribute data of hunan's Spatial Polygon Data Frame with the attribute data of hunan2012's dataframe by performing the below code chunk.

```{r}
hunan<-left_join(hunan,hunan2012)
hunan
```

Note that R can find out the "by" argument for the left join as County without us needing to explicitly state the argument.

```{r}
glimpse(hunan)
```

## Visualizing Regional Development Indicator

Next, we are going to create a base map and choropleth map showing the distribution of GDPPC in 2012 using qtm() function of tmap package.

```{r}
basemap<-tm_shape(hunan)+
  tm_polygons()+
  tm_text("NAME_3",size=0.2)
gdppc<-qtm(hunan,"GDPPC")
tmap_arrange(basemap,gdppc,asp=1,ncol=2)
```

## Computing contiguity spatial weights

In this section, I learn how to use poly2nb() of spdep package to calculate the contiguity weight matrices for the studied areas. This function builds a list of neighbours based on regions with contiguous boundaries. There is an argument called "queen" to specify whether I would like to return a list of first order neighbors using the Queen criteria.

### Computing Queen contiguity based neighbors

```{r}
wm_q<-poly2nb(hunan,queen=TRUE)
summary(wm_q)
```

The summary report shows there are 88 regions. The most connected region has 11 neighbors while the two least connected regions have 1 neighbor only.

We can also view the list of neighbors using wm_q\[\[x\]\] with x as the polygon ID as stored in hunan Spatial Polygon Data Frame. For example, I want to view the list of the neighbors of polygon ID 85 (The most connected region).

```{r}
wm_q[[85]]
```

How about the least connected regions stated above?

```{r}
wm_q[[30]]
wm_q[[65]]
```

We can also retrieve the name of the county linked to the Polygon ID by using the below code chunk.

```{r}
hunan$County[85]
```

So Taoyuan is the most well-connected county in this example.

Now, how about finding out the names of the neighboring counties to Taoyuan?

```{r}
hunan$NAME_3[c(1,2,3,5,6,32,56,57,69,75,78)]
```

We can retrieve the GDPPC of the above 11 neighboring counties using the code chunks below:

```{r}
nb1<-wm_q[[85]]
nb1<-hunan$GDPPC[nb1]
nb1
```

We can display the complete weight matrix by using str() below:

```{r}
str(wm_q)
```

### Creating Rook Contiguity based neighbors

We can compute the weight matrix using Rook criteria by setting the queen argument of poly2nb to FALSE as below:

```{r}
wm_r<-poly2nb(hunan,queen=FALSE)
summary(wm_r)
```

From the above summary report, we can see that the most connected region has the Polygon ID of 85 with 10 links. The 2 least connected regions have 1 link. There are 88 counties in Hunan.

### Visualizing contiguity weights

```{r}
longitude<-map_dbl(hunan$geometry,~st_centroid(.x)[[1]])
```

```{r}
latitude<-map_dbl(hunan$geometry,~st_centroid(.x)[[2]])
```

```{r}
coords<-cbind(longitude,latitude)
```

```{r}
head(coords)
```

#### Plotting Queen Contiguity based neighbor map

```{r}
plot(hunan$geometry,border="lightgrey")
plot(wm_q,coords,pch=18,cex=0.5,add=TRUE,col="Green")
```

#### Plotting Rook contiguity based neighbor map

```{r}
plot(hunan$geometry,border="lightgrey")
plot(wm_r,coords,pch=18,cex=0.5,add=TRUE,col="Green")
```

#### Plotting both Queen and Rook contiguity based neighbor maps

```{r}
par(mfrow=c(1,2))
plot(hunan$geometry,border="lightgrey")
plot(wm_q,coords,pch=18,cex=0.5,add=TRUE,col="Green")
plot(hunan$geometry,border="lightgrey")
plot(wm_r,coords,pch=18,cex=0.5,add=TRUE,col="Green")
```

## Computing Distance based neighbours

In this section, I learn how to derive distance-based weight matrices by using the dnearneigh() of spdep package.

The function identifies neighbor of regions by Euclidean distance with a distance band bounded by lower d1 and upper d2 controlled by the bounds argument.

### Determine the cut-off distance

First, I need to determine the upper limit for distance band by following the below steps:

-   Return a matrix with the indices of points belonging to the set of the k nearest neighbors each other by using knearneigh() of spdep. By default, k=1 so it means I am find the the indices of points belonging to the set of the first nearest neighbor.

-   Convert the knn object returned after knearneigh() into a list of neigbours with class nb of integer vectors containing neighbor region number ID by using knn2nb().

-   Return the length of neighbor edges by using nbdist() of spdep package. The function returns in coordinates if coordinates are projected, in km otherwise.

-   Remove the list structure of the returned object by using unlist().

    ```{r}
    knearneigh(coords)
    ```

    ```{r}
    k1<-knn2nb(knearneigh(coords))
    k1
    summary(k1)
    ```

```{r}
nbdists(k1,coords,longlat=TRUE)
```

```{r}
k1 <- knn2nb(knearneigh(coords))
k1dists <- unlist(nbdists(k1, coords, longlat = TRUE))
summary(k1dists)
```

The summary report shows the largest distance of the first nearest neighbor is 61.79 km. Therefore, we will be using this as upper bound to ensure that all units will have at least one neighbor.

### Computing fixed distance weight matrix

Now we will come up with the distance weight matrix by using dnearneigh() shown in code chunk below:

```{r}
wm_d62<-dnearneigh(coords,0,62,longlat=TRUE)
summary(wm_d62)
```

Based on upper bound of 62km, the average number of neighbors for each area unit is 3.681818.

Next, we will use str() to display the content of the wm_d62 matrix

```{r}
str(wm_d62)
```

We can also display the structure of the weight matrix by combining table() and card() of spdep

```{r}
table(hunan$County,card(wm_d62))
```

n.comp.nb(nb.obj) finds the number of disjoint connected subgraphs in the graph depicted by nb.obj -a spatial neighbors list object. (Reference from https://r-spatial.github.io/spdep/reference/compon.html)

nc: Number of disjoint connected subgraphs

comp.id: vector with the indices of the disjoint connected subgraphs that the nodes in nb.obj belong to.

```{r}
n_comp<-n.comp.nb(wm_d62)
n_comp
n_comp$nc
```

```{r}
table(n_comp$comp.id)
```

#### Plotting fixed distance weight matrix

Next, we will plot the distance weight matrix by using the below code chunks:

```{r}
plot(hunan$geometry,border="lightgrey")
plot(wm_d62,coords,add=TRUE)
plot(k1,coords,add=TRUE,col="red",length=0.08)
```

The red lines show the links of the 1st nearest neighbors while the black line show the links of neighbors within the cut-off distance of 62 km.

Alternatively, we can plot these 2 maps side by side by using the code chunks below:

```{r}
par(mfrow=c(1,2))
plot(hunan$geometry,border="lightgrey")
plot(k1,coords,add=TRUE,col="red",length=0.08,main="1st nearest neighbors")
plot(hunan$geometry,border="lightgrey")
plot(wm_d62,coords,add=TRUE,col="black",pch=18,cex=0.6,main="Distance link within 62km")
```

### Computing adaptive distance weight matrix

In this section, I learn how to control the number of neighbors directly using k-nearest neighbors.

```{r}
knn6<-knn2nb(knearneigh(coords,k=6))
knn6
```

We can display the content of the above knn6 by using str()

```{r}
str(knn6)
```

Now each county has exactly six neighbors.

#### Plotting distance based neighbors

```{r}
plot(hunan$geometry,border="lightgrey")
plot(knn6,coords,pch=18,cex=0.6,add=TRUE,col="red")
```

## Weight based on IDW

In this section, I learn how to compute a spatial weight matrix based on Inverse Distance Method

First, I will need to compute the distance between counties by using nbdists() of spdep package.

Note that in the below example we are using Queen's method.

```{r}
dist<-nbdists(wm_q,coords,longlat=TRUE)
ids<-lapply(dist,function(x) 1/(x))
ids
```

### Row-standardized weights matrix

We use nb2listw() function to supplement a neighbor list with spatial weights for the chosen coding scheme.

Style argument in this nb2listw() can be B (basic binary coding), W (row standardized-sum over all links to n), C (globally standardized)-sum over all links to n).

```{r}
rswm_q<-nb2listw(wm_q,style="W",zero.policy=TRUE)
rswm_q
```

zero.policy=TRUE option allows for lists of non-neighbors. However, this has to be used with caution since users may not be aware of missing data in their data set. However, zero.policy=FALSE would return error.

To see the weight of the first polygon's four neighbor type:

```{r}
rswm_q$weights[10]
```

Each neighbor is assigned 0.2 of the total weight. When R computes the average neighboring income values, each neighbor's income values will be multiplied by 0.2 before being tallied.

We can also derive a row standardized inverse distance weight matrix

```{r}
rswm_ids<-nb2listw(wm_q,glist=ids,style="B",zero.policy = TRUE)
rswm_ids
```

```{r}
rswm_ids$weights[1]
```

```{r}
summary(unlist(rswm_ids$weights))
```

## Application of Spatial Weight Matrix

In this section, I learn four different spatial lagged variables, namely:

1.  spatial lag with row standardized weights
2.  spatial lag as a sum of neighboring values
3.  spatial window average
4.  spatial window sum

### Spatial lag with row-standardized weights

```{r}
GDPPC.lag<-lag.listw(rswm_q,hunan$GDPPC)
GDPPC.lag
```

```{r}
nb85 <- wm_q[[85]]
nb85 <- hunan$GDPPC[nb85]
nb85
```

We then append the spatial lag GDPPC values onto hunan sf data frame by using the code chunk below:

```{r}
lag.list<-list(hunan$NAME_3,lag.listw(rswm_q,hunan$GDPPC))
lag.res<-as.data.frame(lag.list)
colnames(lag.res)<-c("NAME_3","lag GDPPC")
hunan<-left_join(hunan,lag.res)
```

```{r}
head(hunan)
```

Next, we will plot both the GDPPC and lag GDPPC using qtm() for comparison

```{r}
gdppc<-qtm(hunan,"GDPPC")
lag_gdppc<-qtm(hunan,"lag GDPPC")
tmap_arrange(gdppc,lag_gdppc,asp=1,ncol=2)
```

### Spatial lag as a sum of neighboring values

```{r}
b_weights<-lapply(wm_q,function(x) 0*x+1)
b_weights2<-nb2listw(wm_q,glist=b_weights,style="B")
b_weights2
```

```{r}
lag_sum<-list(hunan$NAME_3,lag.listw(b_weights2,hunan$GDPPC))
lag.res<-as.data.frame(lag_sum)
colnames(lag.res)<-c("NAME_3","lag sum GDPPC")
```

```{r}
lag_sum
```

Next we append the lag_sum GDPPC field into hunan sf data frame by using left_join() function.

```{r}
hunan<-left_join(hunan,lag.res)
```

Last, we will plot both GDPPC and lag sum GDPPC for comparison using the code chunk below:

```{r}
gdppc<-qtm(hunan,"GDPPC")
lag_sum_gdppc<-qtm(hunan,"lag sum GDPPC")
tmap_arrange(gdppc,lag_sum_gdppc,asp=1,ncol=2)
```

### Spatial window average

The spatial window average uses row standardized weights and includes the diagonal element. To do this in R, we need to go back to the neighbor structure and add in the diagonal element before proceeding to assign weights.

```{r}
wm_q1<-wm_q
wm_q1
```

To add the diagonal element to the neighbour list, we use include.self() function.

```{r}
include.self(wm_q1)
```

```{r}
wm_q1
```

We can see the difference between wm_q1 and include.self(wm_q1) in terms of number of non-zero links, percentage of non-zero links and average number of links.

Next, we assign binary weights to the neighbor structure that includes the diagonal element.

```{r}
wm_q1<-nb2listw(wm_q1)
wm_q1
```

Next, we will create the lag variable from our weight structure and GDPPC variable.

```{r}
lag_w_avg_gdppc<-lag.listw(wm_q1,hunan$GDPPC)
lag_w_avg_gdppc
```

Next, we convert the lag variable list into a data frame by using as.data.frame() in the below code chunks:

```{r}
lag.list.wm_q1<-list(hunan$NAME_3,lag.listw(wm_q1,hunan$GDPPC))
lag_wm_q1.res<-as.data.frame(lag.list.wm_q1)
colnames(lag_wm_q1.res)<-c("NAME_3","lag_window_avg GDPPC")
```

Next we will join hunan data frame and lag_wm_q1.res data frame together by using left_join().

```{r}
hunan<-left_join(hunan,lag_wm_q1.res)
```

Last, we will use qtm() of tmap package to plot the GDPPC and lag_window_avg GDPPC for comparison.

```{r}
gdppc<-qtm(hunan,"GDPPC")
w_avg_gdppc<-qtm(hunan,"lag_window_avg GDPPC")
tmap_arrange(gdppc,w_avg_gdppc,asp=1,ncol=2)
```

### Spatial window sum

The spatial window sum is the counter part of the spatial window average but without using the row standardized weights.

We start with assigning binary weights to the neighbor structure that includes the diagonal element.

```{r}
wm_q1<-wm_q
```

```{r}
include.self(wm_q1)
```

```{r}
wm_q1
```

Assign binary weights to the neighbor structures that include the diagonal element.

```{r}
b_weights<-lapply(wm_q1, function(x) 0*x+1)
b_weights[1]
```

Again we will be using nb2listw() and glist() to assign weight values.

```{r}
b_weights2<-nb2listw(wm_q1,glist=b_weights,style="B")
b_weights2
```

We then compute the lag variable with lag.listw()

```{r}
w_sum_gdppc<-list(hunan$NAME_3,lag.listw(b_weights2,hunan$GDPPC))
w_sum_gdppc
```

Next we will convert the lag variable listw object into data frame by using as.data.frame() in the below code chunk.

```{r}
w_sum_gdppc.res<-as.data.frame(w_sum_gdppc)
colnames(w_sum_gdppc.res)<-c("NAME_3","w_sum GDPPC")
```

```{r}
hunan<-left_join(hunan,w_sum_gdppc.res)
```

```{r}
gdppc<-qtm(hunan,"GDPPC")
w_sum_gdppc<-qtm(hunan,"w_sum GDPPC")
tmap_arrange(gdppc,w_sum_gdppc,asp=1,ncol=2)
```
