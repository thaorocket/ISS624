[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "This website contains all Le Thanh Thao’s exercises for the course ISSS624: Geospatial Data Analytics."
  },
  {
    "objectID": "Hands-on_Ex1/Hands-on_Ex1.html",
    "href": "Hands-on_Ex1/Hands-on_Ex1.html",
    "title": "Hands-on Exercise 1: Geospatial Data Wrangling with R and Choropleth Mapping with R",
    "section": "",
    "text": "In this hands-on exercise, I learn how to import and wrangle geospatial data using appropriate R packages."
  },
  {
    "objectID": "Hands-on_Ex1/Hands-on_Ex1.html#getting-started",
    "href": "Hands-on_Ex1/Hands-on_Ex1.html#getting-started",
    "title": "Hands-on Exercise 1: Geospatial Data Wrangling with R and Choropleth Mapping with R",
    "section": "Getting Started",
    "text": "Getting Started\nIn order for me to even create this screen now, I first need to go to File/New File/Quarto Document. I will need to ensure that HTML is ticked as recommended format for authoring. I will then key in the title accordingly. The format is Hands-on_ExX with X is my exercise number.\nAfter I do this, I will start referring to the handout.\nThe code chunk below installs and loads sf and tidyverse packages to R environment. I will need to ensure that pacman package has been installed before running the below code.\nNote to self: type in ```{r} then press Enter to create the below frame. There are two tabs (see above menue on the left): Source and Visual. In order to see this below frame, click on the Visual tab.\n\npacman::p_load(sf,tidyverse, tmap)\n\np_load function of pacman package is used to install and load tidyverse packages into R environment."
  },
  {
    "objectID": "Hands-on_Ex1/Hands-on_Ex1.html#importing-geospatial-data",
    "href": "Hands-on_Ex1/Hands-on_Ex1.html#importing-geospatial-data",
    "title": "Hands-on Exercise 1: Geospatial Data Wrangling with R and Choropleth Mapping with R",
    "section": "Importing Geospatial Data",
    "text": "Importing Geospatial Data\n\nImporting polygon feature data\nAgain, I will need to ensure that sf package has been installed and I call the library sf before running the below code chunk.\n\nmpsz<-st_read(dsn=\"data/geospatial\",layer=\"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `C:\\thaorocket\\ISS624\\Hands-on_Ex1\\data\\geospatial' using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\nNote to self: In order to use relative file path, I will need to save the file as Hands-on_Ex1.qmd under Hands-on_Ex1 folder/data\nst_read() function of sf package is used to import the MP14_SUBZONE_WEB_PL shapefile into R as a polygon feature data frame. 2 arguments will need to be used, namely: dsn to define the file path and layer to provide the shapefile name. Note that no extension such as .dbf, .prj, .sbn is needed (look at the Files on the right corner in RStudio to see the list of the files under the geospatial folder).\nUnder Geometry Type, the geospatial objects are multipolygon features. There are a total of 323 multipolygon features and 15 fields in mpsz simple feature data frame. mpsz is in svy21 projected coordinates systems (see under projected CRS). The bounding box provides the x extend and y extend of the data.\n\n\nImport polyline feature data in shapefile form\nFor this section, use st_read() function of sf package to import CyclingPath shapefile into R as line feature data frame\n\ncyclingpath <- st_read(dsn = \"data/geospatial\", \n                         layer = \"CyclingPath\")\n\nReading layer `CyclingPath' from data source \n  `C:\\thaorocket\\ISS624\\Hands-on_Ex1\\data\\geospatial' using driver `ESRI Shapefile'\nSimple feature collection with 1625 features and 2 fields\nGeometry type: LINESTRING\nDimension:     XY\nBounding box:  xmin: 12711.19 ymin: 28711.33 xmax: 42626.09 ymax: 48948.15\nProjected CRS: SVY21\n\n\nNote to self: I changed the file path from CyclingPathGazette to Cycling Path as there is no CyclingPathGazette file in the geospatial folder.\nFrom the above message, there are in total 1625 features and 2 fields in CyclingPath linestring feature data frame. It is also in svy21 projected coordinates system.\n\n\nImporting GIS data in kml format\nThe pre-schools-location-kml is in kml format. st_read() function is also used in this case (see below code chunk). However, do note that the complete path and the kml file extension is provided. There is no dsn and layer specified.\n\npreschool = st_read(\"data/geospatial/pre-schools-location-kml.kml\")\n\nReading layer `PRESCHOOLS_LOCATION' from data source \n  `C:\\thaorocket\\ISS624\\Hands-on_Ex1\\data\\geospatial\\pre-schools-location-kml.kml' \n  using driver `KML'\nSimple feature collection with 1359 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6824 ymin: 1.248403 xmax: 103.9897 ymax: 1.462134\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n\n\nUnlike other files in the data folder, pre-schools-location-kml.kml is a file by itself. Therefore, we do not need dsn and layer arguments but need to provide the full path.\nFrom the above message, the preschool file is in point feature data frame. There are a total of 1359 features and 2 fields. Unlike the previous 2 examples above, preschool is in wgs84 coordinates system."
  },
  {
    "objectID": "Hands-on_Ex1/Hands-on_Ex1.html#checking-the-content-of-a-simple-feature-data-frame",
    "href": "Hands-on_Ex1/Hands-on_Ex1.html#checking-the-content-of-a-simple-feature-data-frame",
    "title": "Hands-on Exercise 1: Geospatial Data Wrangling with R and Choropleth Mapping with R",
    "section": "Checking the content of a simple feature data frame",
    "text": "Checking the content of a simple feature data frame\n\nWorking with st_geometry()\n\nst_geometry(mpsz)\n\nGeometry set for 323 features \nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\nFirst 5 geometries:\n\n\nMULTIPOLYGON (((31495.56 30140.01, 31980.96 296...\n\n\nMULTIPOLYGON (((29092.28 30021.89, 29119.64 300...\n\n\nMULTIPOLYGON (((29932.33 29879.12, 29947.32 298...\n\n\nMULTIPOLYGON (((27131.28 30059.73, 27088.33 297...\n\n\nMULTIPOLYGON (((26451.03 30396.46, 26440.47 303...\n\n\nst_geometry() provides a general way to display basic information such as type of geometry, the geographic extent of the features and the coordinates systems of the data.\n\n\nWorking with glimpse()\nglimpse () is under dplyr. Make sure dplyr is installed and run before using this function.\n\nglimpse(mpsz)\n\nRows: 323\nColumns: 16\n$ OBJECTID   <int> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, …\n$ SUBZONE_NO <int> 1, 1, 3, 8, 3, 7, 9, 2, 13, 7, 12, 6, 1, 5, 1, 1, 3, 2, 2, …\n$ SUBZONE_N  <chr> \"MARINA SOUTH\", \"PEARL'S HILL\", \"BOAT QUAY\", \"HENDERSON HIL…\n$ SUBZONE_C  <chr> \"MSSZ01\", \"OTSZ01\", \"SRSZ03\", \"BMSZ08\", \"BMSZ03\", \"BMSZ07\",…\n$ CA_IND     <chr> \"Y\", \"Y\", \"Y\", \"N\", \"N\", \"N\", \"N\", \"Y\", \"N\", \"N\", \"N\", \"N\",…\n$ PLN_AREA_N <chr> \"MARINA SOUTH\", \"OUTRAM\", \"SINGAPORE RIVER\", \"BUKIT MERAH\",…\n$ PLN_AREA_C <chr> \"MS\", \"OT\", \"SR\", \"BM\", \"BM\", \"BM\", \"BM\", \"SR\", \"QT\", \"QT\",…\n$ REGION_N   <chr> \"CENTRAL REGION\", \"CENTRAL REGION\", \"CENTRAL REGION\", \"CENT…\n$ REGION_C   <chr> \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\",…\n$ INC_CRC    <chr> \"5ED7EB253F99252E\", \"8C7149B9EB32EEFC\", \"C35FEFF02B13E0E5\",…\n$ FMEL_UPD_D <date> 2014-12-05, 2014-12-05, 2014-12-05, 2014-12-05, 2014-12-05…\n$ X_ADDR     <dbl> 31595.84, 28679.06, 29654.96, 26782.83, 26201.96, 25358.82,…\n$ Y_ADDR     <dbl> 29220.19, 29782.05, 29974.66, 29933.77, 30005.70, 29991.38,…\n$ SHAPE_Leng <dbl> 5267.381, 3506.107, 1740.926, 3313.625, 2825.594, 4428.913,…\n$ SHAPE_Area <dbl> 1630379.27, 559816.25, 160807.50, 595428.89, 387429.44, 103…\n$ geometry   <MULTIPOLYGON [m]> MULTIPOLYGON (((31495.56 30..., MULTIPOLYGON (…\n\n\nglimpse() provides us more info about the associated attributes in the dataframe. It reports the data type of each field. For example, OBJECTID is in int, SUBZONE_N is in chr, X_ADDR is in double precision values (dbl).\n\n\nWorking with head()\n\nhead(mpsz, n=3)  \n\nSimple feature collection with 3 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 28160.23 ymin: 28369.47 xmax: 32362.39 ymax: 30247.18\nProjected CRS: SVY21\n  OBJECTID SUBZONE_NO    SUBZONE_N SUBZONE_C CA_IND      PLN_AREA_N PLN_AREA_C\n1        1          1 MARINA SOUTH    MSSZ01      Y    MARINA SOUTH         MS\n2        2          1 PEARL'S HILL    OTSZ01      Y          OUTRAM         OT\n3        3          3    BOAT QUAY    SRSZ03      Y SINGAPORE RIVER         SR\n        REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR   Y_ADDR\n1 CENTRAL REGION       CR 5ED7EB253F99252E 2014-12-05 31595.84 29220.19\n2 CENTRAL REGION       CR 8C7149B9EB32EEFC 2014-12-05 28679.06 29782.05\n3 CENTRAL REGION       CR C35FEFF02B13E0E5 2014-12-05 29654.96 29974.66\n  SHAPE_Leng SHAPE_Area                       geometry\n1   5267.381  1630379.3 MULTIPOLYGON (((31495.56 30...\n2   3506.107   559816.2 MULTIPOLYGON (((29092.28 30...\n3   1740.926   160807.5 MULTIPOLYGON (((29932.33 29...\n\n\nThe n argument allows users to select the number of records to display. In the above example, since n=3, there are 3 records displayed."
  },
  {
    "objectID": "Hands-on_Ex1/Hands-on_Ex1.html#plotting-the-geospatial-data",
    "href": "Hands-on_Ex1/Hands-on_Ex1.html#plotting-the-geospatial-data",
    "title": "Hands-on Exercise 1: Geospatial Data Wrangling with R and Choropleth Mapping with R",
    "section": "Plotting the Geospatial Data",
    "text": "Plotting the Geospatial Data\nIn order to visualize the geospatial features, we can use plot()\n\nplot(mpsz)\n\nWarning: plotting the first 9 out of 15 attributes; use max.plot = 15 to plot\nall\n\n\n\n\n\nThe default plot is a multi-plot of all attributes, up to a reasonable maximum as shown above.\nBy using the code chunk below, we choose to plot only the geometry:\n\nplot(st_geometry(mpsz))\n\n\n\n\nAlternatively, we can also use plot() to plot the sf object by using a specific attribute. See below example:\n\nplot(mpsz[\"PLN_AREA_N\"])\n\n\n\n\n\nplot(mpsz[\"REGION_N\"])\n\n\n\n\nNote to self: plot() is meant for plotting geospatial object for quick look."
  },
  {
    "objectID": "Hands-on_Ex1/Hands-on_Ex1.html#working-with-projection",
    "href": "Hands-on_Ex1/Hands-on_Ex1.html#working-with-projection",
    "title": "Hands-on Exercise 1: Geospatial Data Wrangling with R and Choropleth Mapping with R",
    "section": "Working with Projection",
    "text": "Working with Projection\nMap projection is an important property of a geospatial data. In order to perform geoprocessing using two geospatial data, we need to ensure that both geospatial data are projected using similar coordinate system.\nIn this section, I learn how to project a simple feature data frame from one coordinate system to another coordinate system. The technical term of this process is called projection transformation.\n\nAssigning EPSG code to a simple feature data frame\nThis section addresses the issue where the coordinate system of the source data was either missing or wrongly assigned during the importing geospatial data into R process.\n\nst_crs(mpsz)\n\nCoordinate Reference System:\n  User input: SVY21 \n  wkt:\nPROJCRS[\"SVY21\",\n    BASEGEOGCRS[\"SVY21[WGS84]\",\n        DATUM[\"World Geodetic System 1984\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]],\n            ID[\"EPSG\",6326]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"Degree\",0.0174532925199433]]],\n    CONVERSION[\"unnamed\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]]]\n\n\nAt the last line of the above window, we can see EPSG 9001. This is a wrong EPSG code because the correct EPSG code for svy21 should be 3414.\nIn order to assign the correct EPSG code to mpsz data frame, we use st_set_crs() of sf package as shown in the code chunk below:\n\nmpsz3414<-st_set_crs(mpsz, 3414)\n\nWarning: st_crs<- : replacing crs does not reproject data; use st_transform for\nthat\n\n\nNow, let us check the CRS again of the mpsz3414\n\nst_crs(mpsz3414)\n\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n\n\nNow the EPSG code is 3414 as shown on the last line of the above window.\n\n\nTransforming the projection of preschool from wgs84 to svy21\nIn this section, I learn about transforming geographic coordinate system to projected coordinate system. This is because geographic coordinate system is not suitable if we need to use distance and/or area measurements. Geographic data is usually in decimal degree format, which is only good to identify explicit location but not for any calculations.\nThe projected coordinate systems flatten the earth in order to calculate the system.\n\nst_crs(preschool)\n\nCoordinate Reference System:\n  User input: WGS 84 \n  wkt:\nGEOGCRS[\"WGS 84\",\n    DATUM[\"World Geodetic System 1984\",\n        ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n            LENGTHUNIT[\"metre\",1]]],\n    PRIMEM[\"Greenwich\",0,\n        ANGLEUNIT[\"degree\",0.0174532925199433]],\n    CS[ellipsoidal,2],\n        AXIS[\"geodetic latitude (Lat)\",north,\n            ORDER[1],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        AXIS[\"geodetic longitude (Lon)\",east,\n            ORDER[2],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n    ID[\"EPSG\",4326]]\n\n\nIn this scenario, we need to use st_transform() of sf package. This is because we need to re-project preschool from one coordinate system to another coordinate system mathematically.\nUse the code chunk below to transform the coordinate system:\n\npreschool3414<-st_transform(preschool,crs=3414)\npreschool3414\n\nSimple feature collection with 1359 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 11203.01 ymin: 25667.6 xmax: 45404.24 ymax: 49300.88\nz_range:       zmin: 0 zmax: 0\nProjected CRS: SVY21 / Singapore TM\nFirst 10 features:\n     Name\n1   kml_1\n2   kml_2\n3   kml_3\n4   kml_4\n5   kml_5\n6   kml_6\n7   kml_7\n8   kml_8\n9   kml_9\n10 kml_10\nescription\n1                                                          <center><table><tr><th colspan='2' align='center'><em>Attributes</em></th></tr><tr bgcolor=\"#E3E3F3\"> <th>CENTRE_NAME</th> <td>BIG FOOT PRE SCHOOL LLP</td> </tr><tr bgcolor=\"\"> <th>CENTRE_CODE</th> <td>PT9281</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESS</th> <td>196, WEST COAST ROAD, SINGAPORE 127375</td> </tr><tr bgcolor=\"\"> <th>POSTAL_CODE</th> <td>127375</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>INC_CRC</th> <td>838CD358794FD031</td> </tr><tr bgcolor=\"\"> <th>FMEL_UPD_D</th> <td>20171208174048</td> </tr></table></center>\n2                      <center><table><tr><th colspan='2' align='center'><em>Attributes</em></th></tr><tr bgcolor=\"#E3E3F3\"> <th>CENTRE_NAME</th> <td>POSSO PRESCHOOL @ WEST COAST RISE PTE LTD</td> </tr><tr bgcolor=\"\"> <th>CENTRE_CODE</th> <td>PT8684</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESS</th> <td>30, WEST COAST RISE, HONG LEONG GARDEN, SINGAPORE 127473</td> </tr><tr bgcolor=\"\"> <th>POSTAL_CODE</th> <td>127473</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>INC_CRC</th> <td>F331CEB175F9C254</td> </tr><tr bgcolor=\"\"> <th>FMEL_UPD_D</th> <td>20171208174048</td> </tr></table></center>\n3                                                         <center><table><tr><th colspan='2' align='center'><em>Attributes</em></th></tr><tr bgcolor=\"#E3E3F3\"> <th>CENTRE_NAME</th> <td>GENESIS CHILD CARE PTE. LTD.</td> </tr><tr bgcolor=\"\"> <th>CENTRE_CODE</th> <td>PT9132</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESS</th> <td>2A, JUBILEE ROAD, SINGAPORE 128524</td> </tr><tr bgcolor=\"\"> <th>POSTAL_CODE</th> <td>128524</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>INC_CRC</th> <td>4C2E7E55019A633F</td> </tr><tr bgcolor=\"\"> <th>FMEL_UPD_D</th> <td>20171208174048</td> </tr></table></center>\n4                                                 <center><table><tr><th colspan='2' align='center'><em>Attributes</em></th></tr><tr bgcolor=\"#E3E3F3\"> <th>CENTRE_NAME</th> <td>LITTLE FOOTPRINTS PRESCHOOL PTE. LTD.</td> </tr><tr bgcolor=\"\"> <th>CENTRE_CODE</th> <td>PT9260</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESS</th> <td>6, JUBILEE ROAD, SINGAPORE 128531</td> </tr><tr bgcolor=\"\"> <th>POSTAL_CODE</th> <td>128531</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>INC_CRC</th> <td>DDF98422A198387B</td> </tr><tr bgcolor=\"\"> <th>FMEL_UPD_D</th> <td>20171208174048</td> </tr></table></center>\n5                                <center><table><tr><th colspan='2' align='center'><em>Attributes</em></th></tr><tr bgcolor=\"#E3E3F3\"> <th>CENTRE_NAME</th> <td>AMAR KIDZ @ WEST COAST LLP</td> </tr><tr bgcolor=\"\"> <th>CENTRE_CODE</th> <td>PT9016</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESS</th> <td>8, JALAN LEMPENG, #02 - 03, PARK WEST CONDO, SINGAPORE 128796</td> </tr><tr bgcolor=\"\"> <th>POSTAL_CODE</th> <td>128796</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>INC_CRC</th> <td>EAB3263D23F126AF</td> </tr><tr bgcolor=\"\"> <th>FMEL_UPD_D</th> <td>20171208174048</td> </tr></table></center>\n6                                            <center><table><tr><th colspan='2' align='center'><em>Attributes</em></th></tr><tr bgcolor=\"#E3E3F3\"> <th>CENTRE_NAME</th> <td>TCC PRESCHOOL FABER PTE LTD</td> </tr><tr bgcolor=\"\"> <th>CENTRE_CODE</th> <td>PT9299</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESS</th> <td>60, FABER TERRACE, FABER HILLS, SINGAPORE 129040</td> </tr><tr bgcolor=\"\"> <th>POSTAL_CODE</th> <td>129040</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>INC_CRC</th> <td>195E3739B77E6A5F</td> </tr><tr bgcolor=\"\"> <th>FMEL_UPD_D</th> <td>20171208174048</td> </tr></table></center>\n7                      <center><table><tr><th colspan='2' align='center'><em>Attributes</em></th></tr><tr bgcolor=\"#E3E3F3\"> <th>CENTRE_NAME</th> <td>ACEKIDZ @ COMMUNITY</td> </tr><tr bgcolor=\"\"> <th>CENTRE_CODE</th> <td>PT5950</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESS</th> <td>2, CLEMENTI WEST ST 2, #03 - 06, WEST COAST COMMUNITY CENTRE, SINGAPORE 129605</td> </tr><tr bgcolor=\"\"> <th>POSTAL_CODE</th> <td>129605</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>INC_CRC</th> <td>9B1070EE1CB4A3E2</td> </tr><tr bgcolor=\"\"> <th>FMEL_UPD_D</th> <td>20171208174048</td> </tr></table></center>\n8                   <center><table><tr><th colspan='2' align='center'><em>Attributes</em></th></tr><tr bgcolor=\"#E3E3F3\"> <th>CENTRE_NAME</th> <td>PCF SPARKLETOTS PRESCHOOL @ QUEENSTOWN BLK 145 (CC)</td> </tr><tr bgcolor=\"\"> <th>CENTRE_CODE</th> <td>ST0092</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESS</th> <td>145, MEI LING STREET, #01 - 137, SINGAPORE 140145</td> </tr><tr bgcolor=\"\"> <th>POSTAL_CODE</th> <td>140145</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>INC_CRC</th> <td>820E90716985CCCA</td> </tr><tr bgcolor=\"\"> <th>FMEL_UPD_D</th> <td>20171208174048</td> </tr></table></center>\n9  <center><table><tr><th colspan='2' align='center'><em>Attributes</em></th></tr><tr bgcolor=\"#E3E3F3\"> <th>CENTRE_NAME</th> <td>PCF SPARKLETOTS PRESCHOOL @ QUEENSTOWN BLK 53A (CC)</td> </tr><tr bgcolor=\"\"> <th>CENTRE_CODE</th> <td>ST0176</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESS</th> <td>53A, STRATHMORE AVENUE, #01 - 01, FORFAR HEIGHTS, SINGAPORE 143053</td> </tr><tr bgcolor=\"\"> <th>POSTAL_CODE</th> <td>143053</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>INC_CRC</th> <td>A7DC7D2C961A8822</td> </tr><tr bgcolor=\"\"> <th>FMEL_UPD_D</th> <td>20171208174048</td> </tr></table></center>\n10                                                     <center><table><tr><th colspan='2' align='center'><em>Attributes</em></th></tr><tr bgcolor=\"#E3E3F3\"> <th>CENTRE_NAME</th> <td>MY FIRST SKOOL</td> </tr><tr bgcolor=\"\"> <th>CENTRE_CODE</th> <td>NT0510</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESS</th> <td>106, HENDERSON CRESCENT, #01 - 37, SINGAPORE 150106</td> </tr><tr bgcolor=\"\"> <th>POSTAL_CODE</th> <td>150106</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>INC_CRC</th> <td>EB3942B460BB5CBC</td> </tr><tr bgcolor=\"\"> <th>FMEL_UPD_D</th> <td>20171208174048</td> </tr></table></center>\n                        geometry\n1  POINT Z (19997.26 32333.17 0)\n2  POINT Z (19126.75 33114.35 0)\n3  POINT Z (20345.12 31934.56 0)\n4  POINT Z (20400.31 31952.36 0)\n5  POINT Z (19810.78 33140.31 0)\n6  POINT Z (19550.92 33770.18 0)\n7  POINT Z (20378.07 31665.55 0)\n8  POINT Z (24835.77 30689.38 0)\n9   POINT Z (25139.3 30636.01 0)\n10 POINT Z (26771.14 30203.71 0)\n\n\npreschool3414 is now in svy21 projected coordinate system. Furthermore, under Bounding Box, the values are greater than 0-360 range of decimal degree commonly used by geographic coordinate systems."
  },
  {
    "objectID": "Hands-on_Ex1/Hands-on_Ex1.html#importing-and-converting-aspatial-data",
    "href": "Hands-on_Ex1/Hands-on_Ex1.html#importing-and-converting-aspatial-data",
    "title": "Hands-on Exercise 1: Geospatial Data Wrangling with R and Choropleth Mapping with R",
    "section": "Importing and Converting Aspatial Data",
    "text": "Importing and Converting Aspatial Data\nIn this section, I learn how to import aspatial data into R environment and save it as tibble data frame. Next, I will need to convert it into a simple feature data frame.\nNote: In Aspatial data, among the data fields, there are two fields that capture the x- and y-coordinates of the data points.\nThe listings.csv data downloaded from airbnb will be used.\n\nImporting aspatial data\nFirst, I need to ensure that readr package is installed and called.\nAfter that, I will run the below code chunk:\n\nlistings <- read_csv(\"data/aspatial/listings.csv\")\n\nRows: 4252 Columns: 16\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr   (5): name, host_name, neighbourhood_group, neighbourhood, room_type\ndbl  (10): id, host_id, latitude, longitude, price, minimum_nights, number_o...\ndate  (1): last_review\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nAfter importing the file into R, we use list() instead of glimpse() to examine if the data has been imported correctly. Refer to the code chunk below:\n\nlist(listings)\n\n[[1]]\n# A tibble: 4,252 × 16\n       id name     host_id host_…¹ neigh…² neigh…³ latit…⁴ longi…⁵ room_…⁶ price\n    <dbl> <chr>      <dbl> <chr>   <chr>   <chr>     <dbl>   <dbl> <chr>   <dbl>\n 1  50646 Pleasan…  227796 Sujatha Centra… Bukit …    1.33    104. Privat…    80\n 2  71609 Ensuite…  367042 Belinda East R… Tampin…    1.35    104. Privat…   178\n 3  71896 B&B  Ro…  367042 Belinda East R… Tampin…    1.35    104. Privat…    81\n 4  71903 Room 2-…  367042 Belinda East R… Tampin…    1.35    104. Privat…    81\n 5 275343 Conveni… 1439258 Joyce   Centra… Bukit …    1.29    104. Privat…    52\n 6 275344 15 mins… 1439258 Joyce   Centra… Bukit …    1.29    104. Privat…    40\n 7 294281 5 mins … 1521514 Elizab… Centra… Newton     1.31    104. Privat…    72\n 8 301247 Nice ro… 1552002 Rahul   Centra… Geylang    1.32    104. Privat…    41\n 9 324945 20 Mins… 1439258 Joyce   Centra… Bukit …    1.29    104. Privat…    49\n10 330089 Accomo@… 1439258 Joyce   Centra… Bukit …    1.29    104. Privat…    49\n# … with 4,242 more rows, 6 more variables: minimum_nights <dbl>,\n#   number_of_reviews <dbl>, last_review <date>, reviews_per_month <dbl>,\n#   calculated_host_listings_count <dbl>, availability_365 <dbl>, and\n#   abbreviated variable names ¹​host_name, ²​neighbourhood_group,\n#   ³​neighbourhood, ⁴​latitude, ⁵​longitude, ⁶​room_type\n\n\nThe output consists of 4252 rows and 16 columns. Two useful fields that we are going to use are latitude and longitude. Note that they are already in decimal degree format.\n\n\nCreating a simple feature data frame from an aspatial data frame\nIn order to convert listings into a simple feature data frame, I will need to use st_as_sf() of sf package.\n\nlistings_sf <- st_as_sf(listings, \n                       coords = c(\"longitude\", \"latitude\"),\n                       crs=4326) %>%\n  st_transform(crs = 3414)\n\nNotes on the above code chunk:\ncoords argument requires me to provide the column name of the x-coordinates first, followed by the column name of the y-coordinates.\ncrs argument requires me to provide the coordinates system in the EPSG format. EPSG: 4326 is wgs84 Geographic Coordinate System while EPSG: 3414 is Singapore svy21 Projected Coordinate System.\n%>% is used to nest the st_transform() to transform the newly created simple feature data frame into svy21 projected coordinate system.\n\nglimpse(listings_sf)\n\nRows: 4,252\nColumns: 15\n$ id                             <dbl> 50646, 71609, 71896, 71903, 275343, 275…\n$ name                           <chr> \"Pleasant Room along Bukit Timah\", \"Ens…\n$ host_id                        <dbl> 227796, 367042, 367042, 367042, 1439258…\n$ host_name                      <chr> \"Sujatha\", \"Belinda\", \"Belinda\", \"Belin…\n$ neighbourhood_group            <chr> \"Central Region\", \"East Region\", \"East …\n$ neighbourhood                  <chr> \"Bukit Timah\", \"Tampines\", \"Tampines\", …\n$ room_type                      <chr> \"Private room\", \"Private room\", \"Privat…\n$ price                          <dbl> 80, 178, 81, 81, 52, 40, 72, 41, 49, 49…\n$ minimum_nights                 <dbl> 90, 90, 90, 90, 14, 14, 90, 8, 14, 14, …\n$ number_of_reviews              <dbl> 18, 20, 24, 48, 20, 13, 133, 105, 14, 1…\n$ last_review                    <date> 2014-07-08, 2019-12-28, 2014-12-10, 20…\n$ reviews_per_month              <dbl> 0.22, 0.28, 0.33, 0.67, 0.20, 0.16, 1.2…\n$ calculated_host_listings_count <dbl> 1, 4, 4, 4, 50, 50, 7, 1, 50, 50, 50, 4…\n$ availability_365               <dbl> 365, 365, 365, 365, 353, 364, 365, 90, …\n$ geometry                       <POINT [m]> POINT (22646.02 35167.9), POINT (…\n\n\nThe table above shows the content of listings_sf. A new column called geometry has been added in the data frame while latitude and longitude columns have been dropped from the data frame."
  },
  {
    "objectID": "Hands-on_Ex1/Hands-on_Ex1.html#geoprocessing-with-sf-package",
    "href": "Hands-on_Ex1/Hands-on_Ex1.html#geoprocessing-with-sf-package",
    "title": "Hands-on Exercise 1: Geospatial Data Wrangling with R and Choropleth Mapping with R",
    "section": "Geoprocessing with sf package",
    "text": "Geoprocessing with sf package\nIn this section, I learn how to perform two commonly used geoprocessing functions of the sf package, namely buffering and point in polygon count.\n\nBuffering\nThe scenario:\nThe authority is planning to upgrade the exiting cycling path. To do so, they need to acquire 5 metres of reserved land on the both sides of the current cycling path. You are tasked to determine the extend of the land need to be acquired and their total area.\nThe solution:\nst_buffer() of sf package is used to compute the 5-meter buffers around cycling paths\n\nbuffer_cycling <- st_buffer(cyclingpath, \n                               dist=5, nQuadSegs = 30)\n\nWe will then calculate the area of each buffer by using the code chunk below:\n\nbuffer_cycling$AREA <- st_area(buffer_cycling)\n\nFinally, we use the sum() function to derive the total land needed:\n\nsum(buffer_cycling$AREA)\n\n773143.9 [m^2]\n\n\n\n\nPoint-in polygon count\nThe scenario:\nA pre-school service group want to find out the numbers of pre-schools in each Planning Subzone.\nThe solution:\n\nmpsz3414$`PreSch Count`<- lengths(st_intersects(mpsz3414, preschool3414))\n\nThe code chunk above performs two operations at one go. st_intersects() helps identify pre-schools located in each Planning Subzone (Notice that the 2 data frame are both in EPSG 3414 code). Next length() of Base R is used to calculate number of preschools per Planning Subzone.\nNext, use summary() to check the statistics of the newly derived PreSch Count:\n\nsummary(mpsz3414$`PreSch Count`)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  0.000   0.000   2.000   4.207   6.000  37.000 \n\n\nTo list the planning subzone with the most number of pre-schools, I can use top_n() of dplyr package as below:\n\ntop_n(mpsz3414, 1, `PreSch Count`)\n\nSimple feature collection with 1 feature and 16 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 23449.05 ymin: 46001.23 xmax: 25594.22 ymax: 47996.47\nProjected CRS: SVY21 / Singapore TM\n  OBJECTID SUBZONE_NO      SUBZONE_N SUBZONE_C CA_IND PLN_AREA_N PLN_AREA_C\n1      290          3 WOODLANDS EAST    WDSZ03      N  WOODLANDS         WD\n      REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR   Y_ADDR\n1 NORTH REGION       NR C90769E43EE6B0F2 2014-12-05 24506.64 46991.63\n  SHAPE_Leng SHAPE_Area                       geometry PreSch Count\n1   6603.608    2553464 MULTIPOLYGON (((24786.75 46...           37\n\n\nThe next problem asks to calculate the density of pre-school by Planning Subzone.\nFirst, use st_area() of sf package to calculate the area per Planning Subzone:\n\nmpsz3414$Area <- mpsz3414 %>%\n  st_area()\n\nNext, use mutate() of dplyr package to compute the density:\n\nmpsz3414 <- mpsz3414 %>%\n  mutate(`PreSch Density` = `PreSch Count`/Area * 1000000)\nmpsz3414\n\nSimple feature collection with 323 features and 18 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21 / Singapore TM\nFirst 10 features:\n   OBJECTID SUBZONE_NO       SUBZONE_N SUBZONE_C CA_IND      PLN_AREA_N\n1         1          1    MARINA SOUTH    MSSZ01      Y    MARINA SOUTH\n2         2          1    PEARL'S HILL    OTSZ01      Y          OUTRAM\n3         3          3       BOAT QUAY    SRSZ03      Y SINGAPORE RIVER\n4         4          8  HENDERSON HILL    BMSZ08      N     BUKIT MERAH\n5         5          3         REDHILL    BMSZ03      N     BUKIT MERAH\n6         6          7  ALEXANDRA HILL    BMSZ07      N     BUKIT MERAH\n7         7          9   BUKIT HO SWEE    BMSZ09      N     BUKIT MERAH\n8         8          2     CLARKE QUAY    SRSZ02      Y SINGAPORE RIVER\n9         9         13 PASIR PANJANG 1    QTSZ13      N      QUEENSTOWN\n10       10          7       QUEENSWAY    QTSZ07      N      QUEENSTOWN\n   PLN_AREA_C       REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR\n1          MS CENTRAL REGION       CR 5ED7EB253F99252E 2014-12-05 31595.84\n2          OT CENTRAL REGION       CR 8C7149B9EB32EEFC 2014-12-05 28679.06\n3          SR CENTRAL REGION       CR C35FEFF02B13E0E5 2014-12-05 29654.96\n4          BM CENTRAL REGION       CR 3775D82C5DDBEFBD 2014-12-05 26782.83\n5          BM CENTRAL REGION       CR 85D9ABEF0A40678F 2014-12-05 26201.96\n6          BM CENTRAL REGION       CR 9D286521EF5E3B59 2014-12-05 25358.82\n7          BM CENTRAL REGION       CR 7839A8577144EFE2 2014-12-05 27680.06\n8          SR CENTRAL REGION       CR 48661DC0FBA09F7A 2014-12-05 29253.21\n9          QT CENTRAL REGION       CR 1F721290C421BFAB 2014-12-05 22077.34\n10         QT CENTRAL REGION       CR 3580D2AFFBEE914C 2014-12-05 24168.31\n     Y_ADDR SHAPE_Leng SHAPE_Area                       geometry PreSch Count\n1  29220.19   5267.381  1630379.3 MULTIPOLYGON (((31495.56 30...            0\n2  29782.05   3506.107   559816.2 MULTIPOLYGON (((29092.28 30...            5\n3  29974.66   1740.926   160807.5 MULTIPOLYGON (((29932.33 29...            0\n4  29933.77   3313.625   595428.9 MULTIPOLYGON (((27131.28 30...            2\n5  30005.70   2825.594   387429.4 MULTIPOLYGON (((26451.03 30...            1\n6  29991.38   4428.913  1030378.8 MULTIPOLYGON (((25899.7 297...           10\n7  30230.86   3275.312   551732.0 MULTIPOLYGON (((27746.95 30...            4\n8  30222.86   2208.619   290184.7 MULTIPOLYGON (((29351.26 29...            4\n9  29893.78   6571.323  1084792.3 MULTIPOLYGON (((20996.49 30...            3\n10 30104.18   3454.239   631644.3 MULTIPOLYGON (((24472.11 29...            1\n              Area    PreSch Density\n1  1630379.3 [m^2]  0.000000 [1/m^2]\n2   559816.2 [m^2]  8.931502 [1/m^2]\n3   160807.5 [m^2]  0.000000 [1/m^2]\n4   595428.9 [m^2]  3.358923 [1/m^2]\n5   387429.4 [m^2]  2.581115 [1/m^2]\n6  1030378.8 [m^2]  9.705169 [1/m^2]\n7   551732.0 [m^2]  7.249896 [1/m^2]\n8   290184.7 [m^2] 13.784327 [1/m^2]\n9  1084792.3 [m^2]  2.765506 [1/m^2]\n10  631644.3 [m^2]  1.583170 [1/m^2]"
  },
  {
    "objectID": "Hands-on_Ex1/Hands-on_Ex1.html#exploratory-data-analysis-eda",
    "href": "Hands-on_Ex1/Hands-on_Ex1.html#exploratory-data-analysis-eda",
    "title": "Hands-on Exercise 1: Geospatial Data Wrangling with R and Choropleth Mapping with R",
    "section": "Exploratory Data Analysis (EDA)",
    "text": "Exploratory Data Analysis (EDA)\nFirst, install ggplot2 package.\nWe will then plot a histogram to reveal the distribution of the PreSch Density by using hist()\n\nhist(mpsz3414$`PreSch Density`)\n\n\n\n\nHowever, the graph has too limited room for customization.\nWe will use ggplot2 function to explore customization.\n\nggplot(data=mpsz3414, \n       aes(x= as.numeric(`PreSch Density`)))+\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"green\") +\n  labs(title = \"Are pre-school even distributed in Singapore?\",\n       subtitle= \"There are many planning sub-zones with a single pre-school, on the other hand, \\nthere are two planning sub-zones with at least 20 pre-schools\",\n      x = \"Pre-school density (per km sq)\",\n      y = \"Frequency\")\n\n\n\n\nLet’s try scatterplot instead\nQuestion:\nUsing ggplot2 method, plot a scatterplot showing the relationship between Pre-school Density and Pre-school Count.\nSolution:\n\nggplot(data=mpsz3414, \n       aes(x= as.numeric(`PreSch Density`),y=as.numeric(`PreSch Count`)))+\n  geom_point( color=\"black\", \n                 ) +\n  labs(title = \"Are pre-school even distributed in Singapore?\",\n       subtitle= \"There are many planning sub-zones with a single pre-school, on the other hand, \\nthere are two planning sub-zones with at least 20 pre-schools\",\n      x = \"Pre-school density (per km sq)\",\n      y = \"Pre-school Count\")"
  },
  {
    "objectID": "Hands-on_Ex1/Hands-on_Ex1.html#importing-attribute-data-into-r",
    "href": "Hands-on_Ex1/Hands-on_Ex1.html#importing-attribute-data-into-r",
    "title": "Hands-on Exercise 1: Geospatial Data Wrangling with R and Choropleth Mapping with R",
    "section": "Importing Attribute Data into R",
    "text": "Importing Attribute Data into R\n\npopdata <- read_csv(\"data/aspatial/respopagesextod2011to2020.csv\")\n\nRows: 984656 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (5): PA, SZ, AG, Sex, TOD\ndbl (2): Pop, Time\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\npopdata\n\n# A tibble: 984,656 × 7\n   PA         SZ                     AG     Sex     TOD                Pop  Time\n   <chr>      <chr>                  <chr>  <chr>   <chr>            <dbl> <dbl>\n 1 Ang Mo Kio Ang Mo Kio Town Centre 0_to_4 Males   HDB 1- and 2-Ro…     0  2011\n 2 Ang Mo Kio Ang Mo Kio Town Centre 0_to_4 Males   HDB 3-Room Flats    10  2011\n 3 Ang Mo Kio Ang Mo Kio Town Centre 0_to_4 Males   HDB 4-Room Flats    30  2011\n 4 Ang Mo Kio Ang Mo Kio Town Centre 0_to_4 Males   HDB 5-Room and …    50  2011\n 5 Ang Mo Kio Ang Mo Kio Town Centre 0_to_4 Males   HUDC Flats (exc…     0  2011\n 6 Ang Mo Kio Ang Mo Kio Town Centre 0_to_4 Males   Landed Properti…     0  2011\n 7 Ang Mo Kio Ang Mo Kio Town Centre 0_to_4 Males   Condominiums an…    40  2011\n 8 Ang Mo Kio Ang Mo Kio Town Centre 0_to_4 Males   Others               0  2011\n 9 Ang Mo Kio Ang Mo Kio Town Centre 0_to_4 Females HDB 1- and 2-Ro…     0  2011\n10 Ang Mo Kio Ang Mo Kio Town Centre 0_to_4 Females HDB 3-Room Flats    10  2011\n# … with 984,646 more rows"
  },
  {
    "objectID": "Hands-on_Ex1/Hands-on_Ex1.html#data-preparation",
    "href": "Hands-on_Ex1/Hands-on_Ex1.html#data-preparation",
    "title": "Hands-on Exercise 1: Geospatial Data Wrangling with R and Choropleth Mapping with R",
    "section": "Data Preparation",
    "text": "Data Preparation\n\nData Wrangling\nInstall and run tidyr package dplyr package\nThe following functions are used in the below code chunk:\npivot_wider() of tidyr package\nmutate(),filter(),group_by() and select() of dplyr package\n\npopdata2020 <- popdata %>%\n  filter(Time == 2020) %>%\n  group_by(PA, SZ, AG) %>%\n  summarise(`POP` = sum(`Pop`)) %>%\n  ungroup()%>%\n  pivot_wider(names_from=AG, \n              values_from=POP) %>%\n  mutate(YOUNG = rowSums(.[3:6])\n         +rowSums(.[12])) %>%\nmutate(`ECONOMY ACTIVE` = rowSums(.[7:11])+\nrowSums(.[13:15]))%>%\nmutate(`AGED`=rowSums(.[16:21])) %>%\nmutate(`TOTAL`=rowSums(.[3:21])) %>%  \nmutate(`DEPENDENCY` = (`YOUNG` + `AGED`)\n/`ECONOMY ACTIVE`) %>%\n  select(`PA`, `SZ`, `YOUNG`, \n       `ECONOMY ACTIVE`, `AGED`, \n       `TOTAL`, `DEPENDENCY`)\n\n`summarise()` has grouped output by 'PA', 'SZ'. You can override using the\n`.groups` argument.\n\n\n\n\nJoining the attribute data and geospatial data\nBefore we can perform the georelational join, we will need to convert values under PA and SZ fields of the popdata2020 to uppercase. The current values are made up of lower and uppercase. On the other hand, the SUBZONE_N and PLN_AREA_N in the mpsz are in uppercase.\n\npopdata2020 <- popdata2020 %>%\n  mutate_at(.vars = vars(PA, SZ), \n          .funs = funs(toupper)) %>%\n  filter(`ECONOMY ACTIVE` > 0)\n\nWarning: `funs()` was deprecated in dplyr 0.8.0.\nPlease use a list of either functions or lambdas: \n\n  # Simple named list: \n  list(mean = mean, median = median)\n\n  # Auto named with `tibble::lst()`: \n  tibble::lst(mean, median)\n\n  # Using lambdas\n  list(~ mean(., trim = .2), ~ median(., na.rm = TRUE))\nThis warning is displayed once every 8 hours.\nCall `lifecycle::last_lifecycle_warnings()` to see where this warning was generated.\n\n\nNext, left_join() of dplyr package is used to join the geographic data and attribute data using planning subzone name e.g. SUBZONE_N and SZ are common identifiers.\n\nmpsz_pop2020 <- left_join(mpsz, popdata2020,\n                          by = c(\"SUBZONE_N\" = \"SZ\"))\n\nNote to self: left_join() is used with mpsz simple feature data frame as the left data table to ensure that the output will also be a simple feature data frame.\n\nwrite_rds(mpsz_pop2020, \"data/rds/mpszpop2020.rds\")\n\nTo read more about write_rds, go to this website:https://readr.tidyverse.org/reference/read_rds.html"
  },
  {
    "objectID": "Hands-on_Ex1/Hands-on_Ex1.html#choropleth-mapping-geospatial-data-using-tmap",
    "href": "Hands-on_Ex1/Hands-on_Ex1.html#choropleth-mapping-geospatial-data-using-tmap",
    "title": "Hands-on Exercise 1: Geospatial Data Wrangling with R and Choropleth Mapping with R",
    "section": "Choropleth Mapping Geospatial Data using tmap",
    "text": "Choropleth Mapping Geospatial Data using tmap\nFirst of all, make sure tmap package is installed and called.\nThere are two approaches to prepare thematic map using tmap:\n-Plotting a thematic map quickly using qtm()\n-Plotting highly customizable thematic map using tmap elements\n\nPlotting a choropleth map quickly by using qtm()\nThe code chunk below offers the easiest and quickest way to draw cartographic standard choropleth map as shown below:\n\nqtm(mpsz_pop2020, \n    fill = \"DEPENDENCY\")\n\n\n\n\nNotes on the above code chunk:\ntmap_mode() with “plot” option is used to produce a static map. For interactive mode, “view” option should be used.\nfill() argument is used to map the attribute (i.e. DEPENDENCY)\n\n\nCreating a choropleth map by using tmap’s elements\nIn order to draw a more aesthetic and higher quality cartographic choropleth map, tmap’s drawing elements shall be used as per below code chunk:\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Blues\",\n          title = \"Dependency ratio\") +\n  tm_layout(main.title = \"Distribution of Dependency Ratio by planning subzone\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar() +\n  tm_grid(alpha =0.2) +\n  tm_credits(\"Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\\n and Population data from Department of Statistics DOS\", \n             position = c(\"left\", \"bottom\"))\n\n\n\n\nSo what do all these functions do? Do follow the below steps.\n\nDrawing a base map\nThe basic building blocks of tmap is tm_shape() followed by one or more layer elements such as tm_fill() and tm_polygons()\nIn the code chunk below, tm_shape() is used to define the input data which is mpsz_pop2020 and tm_polygons() is used to draw the planning subzones polygons.\n\ntm_shape(mpsz_pop2020) +\n  tm_polygons()\n\n\n\n\n\n\nDrawing a choropleth map using tm_polygons()\nIn order to draw a choropleth map showing the geographic distribution based on a selected variable by planning subzone, we just need to assign the target variable such as Dependency to tm_polygons()\n\ntm_shape(mpsz_pop2020)+\n  tm_polygons(\"DEPENDENCY\")\n\n\n\n\nA few things to take note from the above code chunk and map:\n-The default interval binning used to draw the choropleth map is called “pretty”\n-The default color scheme used is YlOrRD of Color Brewer.\n-By default, missing values will be shaded in grey.\n\n\n\nData classification methods of tmap\ntmap provides ten data classification methods, namely: fixed, sd, equal, pretty (default), quantile, kmeans, hclust, bclust, fisher and jenks\nTo define a data classification method, the style argument of tm_fill() or tm_polygons() will be used.\n\nPlotting choropleth maps with built-in classification methods\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"jenks\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"equal\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 6,\n          style = \"kmeans\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 4,\n          style = \"kmeans\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 2,\n          style = \"kmeans\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\nPlotting choropleth map with custom break\nIn this section, I learn how to custom build the category breaks by setting explicitly the break vector. In order to end up with n categories, there should be n+1 elements specified in the breaks option and the values must be in ascending order. We also need to set a minimum and maximum.\nIt is always good to get some descriptive statistics on the variable before setting breakpoints by using summary() function.\n\nsummary(mpsz_pop2020$DEPENDENCY)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's \n 0.0000  0.6519  0.7025  0.7742  0.7645 19.0000      92 \n\n\nWe will now plot the map by using the code chunk below:\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          breaks = c(0, 0.60, 0.70, 0.80, 0.90, 1.00)) +\n  tm_borders(alpha = 0.5)\n\nWarning: Values have found that are higher than the highest break\n\n\n\n\n\n\n\n\nColor Scheme\nUsing ColorBrewer Palette\nWe can assign the preferred color under the palette argument of tm_fill()\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 6,\n          style = \"quantile\",\n          palette = \"Greens\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\nTo reverse the color shading, add a”-” prefix.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 6,\n          style = \"quantile\",\n          palette = \"-Greens\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\nMap Layout\n\nMap Legend\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"jenks\", \n          palette = \"Greens\", \n          legend.hist = TRUE, \n          legend.is.portrait = TRUE,\n          legend.hist.z = 0.1) +\n  tm_layout(main.title = \"Distribution of Dependency Ratio by planning subzone \\n(Jenks classification)\",\n            main.title.position = \"center\",\n            main.title.size = 1,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            legend.outside = FALSE,\n            legend.position = c(\"right\", \"bottom\"),\n            frame = FALSE) +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\nMap Style\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"-Greens\") +\n  tm_borders(alpha = 0.5) +\n  tmap_style(\"classic\")\n\ntmap style set to \"classic\"\n\n\nother available styles are: \"white\", \"gray\", \"natural\", \"cobalt\", \"col_blind\", \"albatross\", \"beaver\", \"bw\", \"watercolor\" \n\n\n\n\n\n\n\nCartographic Furniture\ntm_compass(), tm_scale_bar() and tm_grid() are used to add compass, scale bar and grid lines onto the choropleth map.\nRefer to the below code chunk:\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Blues\",\n          title = \"No. of persons\") +\n  tm_layout(main.title = \"Distribution of Dependency Ratio \\nby planning subzone\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar(width = 0.15) +\n  tm_grid(lwd = 0.1, alpha = 0.2) +\n  tm_credits(\"Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\\n and Population data from Department of Statistics DOS\", \n             position = c(\"left\", \"bottom\"))\n\n\n\n\n\n\n\nDrawing Small Multiple Choropleth Maps\nIn tmap, small multiple maps can be plotted in three ways:\n\nby assigning multiple values to at least one of the asthetic arguments,\nby defining a group-by variable in tm_facets(), and\nby creating multiple stand-alone maps with tmap_arrange().\n\n\nBy assigning multiple values to at least one of the aesthetic arguments\nIn this example, we define ncols in tm_fill()\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(c(\"YOUNG\", \"AGED\"),\n          style = \"equal\", \n          palette = \"Blues\") +\n  tm_layout(legend.position = c(\"right\", \"bottom\")) +\n  tm_borders(alpha = 0.5) +\n  tmap_style(\"white\")\n\ntmap style set to \"white\"\n\n\nother available styles are: \"gray\", \"natural\", \"cobalt\", \"col_blind\", \"albatross\", \"beaver\", \"bw\", \"classic\", \"watercolor\" \n\n\n\n\n\nThe following example assign multiple values to at least one of the aesthetic arguments.\n\ntm_shape(mpsz_pop2020)+ \n  tm_polygons(c(\"DEPENDENCY\",\"AGED\"),\n          style = c(\"equal\", \"quantile\"), \n          palette = list(\"Blues\",\"Greens\")) +\n  tm_layout(legend.position = c(\"right\", \"bottom\"))\n\n\n\n\n\n\nBy defining a group-by variable in tm_facets()\n\ntm_shape(mpsz_pop2020) +\n  tm_fill(\"DEPENDENCY\",\n          style = \"quantile\",\n          palette = \"Blues\",\n          thres.poly = 0) + \n  tm_facets(by=\"REGION_N\", \n            free.coords=TRUE, \n            drop.shapes=TRUE) +\n  tm_layout(legend.show = FALSE,\n            title.position = c(\"center\", \"center\"), \n            title.size = 20) +\n  tm_borders(alpha = 0.5)\n\nWarning: The argument drop.shapes has been renamed to drop.units, and is\ntherefore deprecated\n\n\n\n\n\n\n\nBy creating multiple stand-alone maps with tmap_arrange()\n\nyoungmap <- tm_shape(mpsz_pop2020)+ \n  tm_polygons(\"YOUNG\", \n              style = \"quantile\", \n              palette = \"Blues\")\n\nagedmap <- tm_shape(mpsz_pop2020)+ \n  tm_polygons(\"AGED\", \n              style = \"quantile\", \n              palette = \"Blues\")\n\ntmap_arrange(youngmap, agedmap, asp=1, ncol=2)\n\n\n\n\n\n\n\nMapping Spatial Object Meeting a Selection Criterion\n\ntm_shape(mpsz_pop2020[mpsz_pop2020$REGION_N==\"CENTRAL REGION\", ])+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Blues\", \n          legend.hist = TRUE, \n          legend.is.portrait = TRUE,\n          legend.hist.z = 0.1) +\n  tm_layout(legend.outside = TRUE,\n            legend.height = 0.45, \n            legend.width = 5.0,\n            legend.position = c(\"right\", \"bottom\"),\n            frame = FALSE) +\n  tm_borders(alpha = 0.5)\n\nWarning in pre_process_gt(x, interactive = interactive, orig_crs =\ngm$shape.orig_crs): legend.width controls the width of the legend within a map.\nPlease use legend.outside.size to control the width of the outside legend\n\n\n\n\n\nReferences:"
  },
  {
    "objectID": "Hands-on_Ex2/Hands-on_Ex2.html",
    "href": "Hands-on_Ex2/Hands-on_Ex2.html",
    "title": "Hands-on Exercise 2: Global and Local Measures of Spatial Autocorrelation",
    "section": "",
    "text": "In this Hands-on Exercise, I learn how to compute Global and Local Measure of Spatial Autocorrelation (GLSA) using spdep package."
  },
  {
    "objectID": "Hands-on_Ex2/Hands-on_Ex2.html#getting-started",
    "href": "Hands-on_Ex2/Hands-on_Ex2.html#getting-started",
    "title": "Hands-on Exercise 2: Global and Local Measures of Spatial Autocorrelation",
    "section": "Getting Started",
    "text": "Getting Started\n\nCase Study Question\nExamine the spatial pattern of a selected development indicator, in this case, GDP per capita in 2012 of Hunan Province, PRC to see if the development are evenly distributed geographically. If the answer is No, we will then have to conduct further study to find out about the clusters and outliers.\n\n\nStudy Area and Data set\n\nHunan province administrative boundary layer at county level. This is a geospatial data set in ESRI shapefile format.\nHunan_2012.csv: This csv file contains selected Hunan’s local development indicators in 2012.\n\n\n\nSetting the analytical tools\n\npacman::p_load(tidyverse,spdep,sf,tmap,ggplot2)"
  },
  {
    "objectID": "Hands-on_Ex2/Hands-on_Ex2.html#getting-data-into-r-environment",
    "href": "Hands-on_Ex2/Hands-on_Ex2.html#getting-data-into-r-environment",
    "title": "Hands-on Exercise 2: Global and Local Measures of Spatial Autocorrelation",
    "section": "Getting data into R environment",
    "text": "Getting data into R environment\n\nImporting Shapefile into R environment\n\nhunan<-st_read(dsn=\"data/geospatial\",layer=\"Hunan\")\n\nReading layer `Hunan' from data source \n  `C:\\thaorocket\\ISS624\\Hands-on_Ex2\\data\\geospatial' using driver `ESRI Shapefile'\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n\n\n\n\nImporting CSV file into R environment\n\nhunan2012<-read_csv(\"data/aspatial/Hunan_2012.csv\")\n\nRows: 88 Columns: 29\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (2): County, City\ndbl (27): avg_wage, deposite, FAI, Gov_Rev, Gov_Exp, GDP, GDPPC, GIO, Loan, ...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\n\nPerforming relational join\n\nhunan<-left_join(hunan,hunan2012)\n\nJoining, by = \"County\"\n\n\n\n\nVisualizing Regional Development Indicator\nWe are now preparing a base map and a choropleth map showing the distribution of GDPPC in 2012 by using qtm() of tmap package.\n\nequal<-tm_shape(hunan)+tm_fill(\"GDPPC\",n=5,style=\"equal\")+tm_borders(alpha=0.5)+tm_layout(main.title=\"Equal inteval classification\")\nquantile<-tm_shape(hunan)+tm_fill(\"GDPPC\",n=5,style=\"quantile\")+tm_borders(alpha=0.5)+tm_layout(main.title=\"Equal quantile classification\")\ntmap_arrange(equal,quantile,asp=1,ncol=2)\n\n\n\n\nNote: “equal” style divides input values into bins of equal range and is appropriate for variables with uniform distribution. It is not recommended for variables with skewed distribution as the resulting map will end up having little color diversity.\nThe “quantile” style breaks the input values into bins with an equal number of features (polygons).\nReference: https://geocompr.github.io/post/2019/tmap-color-scales/"
  },
  {
    "objectID": "Hands-on_Ex2/Hands-on_Ex2.html#global-spatial-autocorrelation",
    "href": "Hands-on_Ex2/Hands-on_Ex2.html#global-spatial-autocorrelation",
    "title": "Hands-on Exercise 2: Global and Local Measures of Spatial Autocorrelation",
    "section": "Global Spatial Autocorrelation",
    "text": "Global Spatial Autocorrelation\nIn this section, I learn how to compute global spatial autocorrelation statistics and perform spatial complete randomness test for global spatial autocorrelation.\n\nComputing Contiguity Spatial Weights using Queen criteria\nBefore we can compute the spatial autocorrelation statistics, we first compute the contiguity spatial weights of the studied area. The spatial weights are used to define the neighborhood relationship between geographic units (i.e. county) in the study area.\n\nwm_q<-poly2nb(hunan,queen=TRUE)\nsummary(wm_q)\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 11 \n 2  2 12 16 24 14 11  4  2  1 \n2 least connected regions:\n30 65 with 1 link\n1 most connected region:\n85 with 11 links\n\n\nThe summary report shows there are 88 region units in Hunan. The most connected region has 11 links while the 2 least connected regions have 1 link.\n\n\nRow-standardized weights matrix\nNext we need to assign weights to each neighboring polygon. In this case each neighboring polygon will be assigned equal weight which is 1/number of neighbors.\n\nrswm_q<-nb2listw(wm_q,style=\"W\",zero.policy = TRUE)\nrswm_q\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: W \nWeights constants summary:\n   n   nn S0       S1       S2\nW 88 7744 88 37.86334 365.9147\n\n\nNote: The input of nb2listw() must be an object of class nb.\nStarting from a binary neighbours list, in which regions are either listed as neighbours or are absent (thus not in the set of neighbours for some definition), the function adds a weights list with values given by the coding scheme style chosen. B is the basic binary coding, W is row standardised (sums over all links to n), C is globally standardised (sums over all links to n), U is equal to C divided by the number of neighbours (sums over all links to unity), while S is the variance-stabilizing coding scheme proposed by Tiefelsdorf et al. 1999, p. 167-168 (sums over all links to n).\nIf zero policy is set to TRUE, weights vectors of zero length are inserted for regions without neighbour in the neighbours list. These will in turn generate lag values of zero, equivalent to the sum of products of the zero row t(rep(0, length=length(neighbours))) %*% x, for arbitraty numerical vector x of length length(neighbours). The spatially lagged value of x for the zero-neighbour region will then be zero, which may (or may not) be a sensible choice.\n\n\nGlobal Spatial Autocorrelation: Moran’s I\n\nMoran’s I Test\nIn this section, I learn how to perform Moran’s I statistics testing by using moran.test() of spdep.\nMoran’s test for spatial autocorrelation using a spatial weights matrix in weights list form. The assumption of the test are sensitive to the form of the graph of the neighbor relationships and other factors, and the result may be checked against those of moran.mc permutations.\n\nmoran.test(hunan$GDPPC,listw=rswm_q,zero.policy=TRUE,na.action=na.omit)\n\n\n    Moran I test under randomisation\n\ndata:  hunan$GDPPC  \nweights: rswm_q    \n\nMoran I statistic standard deviate = 4.7351, p-value = 1.095e-06\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n      0.300749970      -0.011494253       0.004348351 \n\n\nSince the p-value is statistically significant and z-score is positive, we reject the null hypothesis. The spatial distribution of high values in the dataset is more spatially clustered than would be expected if underlying spatial processes were truly random. In other words, it seemed that areas with high GDPPC tend to be more spatially clustered in Hunan than would be expected.\n\n\nComputing Monte Carlo Moran’s I\nThe code chunk below performs permutation test for Moran’s I statistic by using moran.mc() of spdep package. A total of 1000 simulation will be performed.\n\nset.seed(1234)\nbperm<-moran.mc(hunan$GDPPC,listw=rswm_q,nsim=999,zero.policy=TRUE,na.action=na.omit)\nbperm\n\n\n    Monte-Carlo simulation of Moran I\n\ndata:  hunan$GDPPC \nweights: rswm_q  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.30075, observed rank = 1000, p-value = 0.001\nalternative hypothesis: greater\n\n\nSince the p-value is statistically significant and z-score is positive, we reject the null hypothesis. The spatial distribution of high values in the dataset is more spatially clustered than would be expected if underlying spatial processes were truly random. In other words, it seemed that areas with high GDPPC tend to be more spatially clustered in Hunan than would be expected.\n\n\nVisualizing Monte Carlo Moran’s I\n\nbperm$res\n\n   [1]  0.0579802047  0.0995374215  0.0694251386 -0.1042239884  0.0038110193\n   [6] -0.0601316902 -0.0898497549  0.0886477537 -0.0495291344  0.0044879277\n  [11] -0.0403080940 -0.1030595506 -0.0274239009  0.1083713535 -0.0188529094\n  [16] -0.0484197610 -0.0253754744 -0.0212514958  0.0469779612  0.0408910440\n  [21] -0.0324240897  0.0244599283 -0.0285621520 -0.0315422476 -0.0648166118\n  [26]  0.0507360621 -0.0196479277 -0.1012356629 -0.0033345890 -0.0451875786\n  [31] -0.0169780147  0.0972702432  0.1049185834 -0.0001699816 -0.0783668376\n  [36] -0.0360203633 -0.0554003109 -0.0262207742  0.0066261362 -0.0584681167\n  [41] -0.0168718257  0.0082456956 -0.0546958795 -0.0373107908 -0.0653454082\n  [46]  0.0462297591 -0.0150531959  0.0282874005  0.0157705925 -0.0836056491\n  [51] -0.1190189000  0.0172090478  0.0255428252 -0.0029558492 -0.0355542593\n  [56] -0.1258924633  0.0435571651  0.1046473070 -0.0859109762  0.0829705234\n  [61] -0.0943879694 -0.0587038328 -0.0135097048 -0.0506202830 -0.0528293680\n  [66] -0.1124883683 -0.0770476050 -0.1152233509 -0.0955935516 -0.0970605978\n  [71]  0.0637698821 -0.1005808607 -0.0349010557 -0.0481678951 -0.0460736682\n  [76] -0.0446534235  0.0496933101  0.0463172140 -0.0224125804 -0.0671087934\n  [81] -0.0187950839 -0.0221283710 -0.0038543168  0.0485712996 -0.0670291358\n  [86] -0.0340662445 -0.0547678023 -0.1115993786 -0.0286081812 -0.0189904775\n  [91] -0.0010492210 -0.0588839587 -0.0013944345  0.0691749580  0.1021861142\n  [96]  0.0186604784  0.0091017099 -0.0265195474  0.0001244783 -0.0757381962\n [101] -0.1508424364 -0.0544727121 -0.0312842270 -0.1577932463 -0.0176278625\n [106] -0.0258093645 -0.0777029969  0.0258600595 -0.0350414616  0.1452466379\n [111]  0.0181751552  0.0582007320  0.0428561969  0.0193825236 -0.0295456056\n [116] -0.0409010335  0.0338155978 -0.0338341827 -0.0478981647 -0.0064166950\n [121] -0.0048151510 -0.0470114684 -0.1027035442  0.0061217832  0.0575954445\n [126]  0.0038126051  0.0084515488 -0.0767795525  0.0960315687 -0.0687973429\n [131] -0.0609362872 -0.0585944170 -0.0945269598 -0.0329432591 -0.0959070750\n [136] -0.0466816178  0.0741937502 -0.0996763619  0.1227118577  0.0190377512\n [141]  0.0668295112 -0.0179660687 -0.0737146571  0.1286281872  0.0566101877\n [146]  0.0534910745 -0.0048844527  0.0767212679 -0.0818122385  0.2759273031\n [151]  0.0424544346 -0.0360329671  0.0561386645 -0.1249792236  0.0001595280\n [156] -0.0298430505 -0.0781445528 -0.0959222264 -0.0049527885 -0.0451954073\n [161]  0.0282275948  0.1505228337  0.1460453585  0.0026590836 -0.0513046222\n [166]  0.2426985176  0.0184028525  0.0185802952 -0.0453068224  0.0277994606\n [171] -0.0267635862  0.0907165939  0.0150934142 -0.0445393822 -0.0383904899\n [176]  0.0371869565 -0.0685709962  0.0194801121 -0.0730552267 -0.0501362488\n [181]  0.0328614198 -0.0333814824  0.0507089951  0.1140016120 -0.0476961231\n [186] -0.0629495957  0.0453619013  0.0124963827  0.0082024001 -0.1233351880\n [191] -0.0381489398 -0.0726374252 -0.0575779281 -0.1160680290 -0.0569802909\n [196] -0.0904115587 -0.0032806703 -0.0451534232  0.0193287552 -0.1045661883\n [201] -0.0247547265 -0.1282843052  0.0005582011 -0.0958258385 -0.0457896273\n [206] -0.0874020473  0.0504955330  0.0785382206  0.0645383103 -0.0333325809\n [211] -0.0234805752 -0.0432571260  0.0115118107  0.0495578440  0.0714127396\n [216] -0.0142215745  0.0261352317 -0.0754732690 -0.1224217836 -0.1044979105\n [221]  0.0328115177 -0.0754063516  0.0066927625 -0.0630590902  0.0498818026\n [226]  0.1458012782  0.0342932419  0.1137604135  0.0672588425  0.0586025556\n [231] -0.0001281090 -0.0154334231 -0.0935873679 -0.0517799706 -0.0140391655\n [236]  0.1271515768 -0.0413921808  0.0035958222  0.0634498979 -0.0859887692\n [241] -0.0716817918  0.0272494996  0.0179240855 -0.1137632552  0.0279331601\n [246] -0.0009336103  0.1050639478 -0.1135426187 -0.1037279571 -0.0244373913\n [251] -0.0051375726  0.0184825666 -0.0551381719  0.0332001653 -0.1518874113\n [256] -0.0850631528 -0.0489205310 -0.0081676109 -0.0289172776 -0.0205833652\n [261]  0.0565805093  0.0433253392  0.1617864863 -0.0338915771 -0.1025568813\n [266]  0.1698379771 -0.0368293139 -0.0974075768 -0.0619021279 -0.0434904517\n [271] -0.0480010343 -0.0333897504  0.0091255407 -0.0126723844 -0.0619987557\n [276] -0.0348458338  0.0091705710 -0.0109075085  0.0646636540 -0.0554091182\n [281]  0.0230244871  0.0086576116 -0.0599466403 -0.0618698272 -0.0341748377\n [286]  0.2167355741 -0.0032348963 -0.0673622525 -0.0795650203 -0.1046195224\n [291] -0.0660841565  0.0460419414 -0.0837378524  0.0401953952 -0.0580043510\n [296] -0.0271341103  0.0006625674 -0.0608678713 -0.0720599064  0.0589665011\n [301] -0.0170562729 -0.0082853038  0.0245865387  0.0463642887 -0.0633321260\n [306] -0.0079867699 -0.0545063472 -0.0095644642 -0.0466413206 -0.0827252851\n [311] -0.1186230170  0.0782055099 -0.0230736029 -0.0232379806  0.0975061847\n [316] -0.0474526752  0.0003420897 -0.0048460772 -0.0882114838 -0.0150940385\n [321] -0.0404747016 -0.0307026501 -0.0735320542  0.0974558987 -0.0740271339\n [326] -0.0720494052 -0.0551011625  0.0470077025 -0.1112525569 -0.0967440117\n [331] -0.0184865605  0.0245414589  0.0831770626 -0.0065883333  0.0262686836\n [336]  0.0171979274  0.0206054567  0.1639640218 -0.0904023420 -0.1381020455\n [341]  0.0075670519 -0.0266583572 -0.0371394928 -0.0443603840 -0.0975949441\n [346]  0.0690548225 -0.0372499501 -0.0669887391  0.0020974760  0.0803700195\n [351] -0.1202019809 -0.1103960424  0.0001484389 -0.0392572388 -0.0181878276\n [356] -0.0956147648 -0.0148792096  0.0093191005  0.0559455604 -0.0850069963\n [361] -0.0666909036 -0.0304927883 -0.0203688672 -0.0595074854  0.1253679705\n [366] -0.0240419731 -0.0775358361 -0.1279516004 -0.0617063221  0.0260904372\n [371]  0.0296047332  0.0449340559 -0.0947307901 -0.0423782289 -0.0014075516\n [376] -0.0551504430 -0.1173736388 -0.0038879277 -0.0642396825 -0.1148113830\n [381] -0.0257784658 -0.0361964935  0.0404104312 -0.1426943714 -0.0867538296\n [386]  0.1664551193 -0.0143001799 -0.1195309611  0.0541361326 -0.0447162398\n [391] -0.1111434196  0.1049668333  0.0468078331 -0.0255994144 -0.0140654216\n [396] -0.0586952384  0.0583564970 -0.0074938870 -0.1579194210 -0.0538186522\n [401]  0.0512582269  0.0336670130  0.0525757930 -0.0119847460  0.0154767243\n [406]  0.0139125219  0.0249664392 -0.0592532601 -0.0886605607 -0.1123279971\n [411] -0.0545453275 -0.0170151927  0.0387016952 -0.0868964466 -0.0359522497\n [416]  0.0341985143  0.0821331158 -0.0881007849 -0.0791185077  0.0143616740\n [421]  0.0339490120 -0.0002316218  0.0862818488 -0.0224290906  0.0049083761\n [426]  0.1046339043 -0.0099762876  0.0312051591  0.1633582078 -0.0320358715\n [431]  0.0091721051 -0.0328137130  0.1679383107  0.0284754186 -0.0477666641\n [436]  0.0023084277 -0.0997233593 -0.1089505162  0.0672924716 -0.0972968305\n [441] -0.0529627851  0.0138350019 -0.1264198431 -0.0718452229  0.0113379668\n [446] -0.0904939923 -0.0742467971 -0.0601130076 -0.0586509275  0.0742704752\n [451]  0.0712173749 -0.1327590930  0.1637862972 -0.0197476009  0.0150219238\n [456] -0.0243783499 -0.0788274086 -0.0152546286 -0.0714671013 -0.0388279003\n [461]  0.0315569795 -0.0851788772 -0.0419454047 -0.0728152305  0.0076759281\n [466] -0.0017311760 -0.1015724812 -0.1228205724  0.0318826734  0.0097163485\n [471] -0.0539805366 -0.0455268742  0.1324069497  0.0404111414 -0.1285082428\n [476] -0.0410854541 -0.0063589034 -0.0125593549 -0.0190168092 -0.0483854169\n [481] -0.0603283010 -0.1833850906  0.0735209348 -0.0019400179 -0.0497608415\n [486]  0.0196756535 -0.0391803286  0.0223636994 -0.0168527104  0.0440551974\n [491] -0.1585441172 -0.0327889065  0.0633247596 -0.0790405334 -0.0219799129\n [496] -0.0790216534 -0.0613646518 -0.1095986381  0.1317135030  0.0365835591\n [501] -0.0932584263 -0.0406381741 -0.0218660586 -0.0301289893  0.0734980584\n [506] -0.0452506167 -0.0661963288 -0.0254691829 -0.0507591416 -0.0702440714\n [511] -0.0413340579 -0.0100672132 -0.0835182078 -0.0451519457  0.0014171479\n [516]  0.0394638176  0.0173067512  0.0060338100 -0.0849957631 -0.0495060076\n [521]  0.1295921467 -0.0348779191 -0.0150348142  0.0913502446  0.0475966256\n [526] -0.0779266921 -0.0799439298 -0.0177304210 -0.0739785576 -0.0228506575\n [531] -0.0959150856 -0.1264953317 -0.1154403295  0.0079189321 -0.0550263080\n [536] -0.1154125941 -0.0133504745 -0.0630837904 -0.0247602717 -0.0476662804\n [541]  0.0231578487 -0.0885420808  0.0115457999 -0.1509746938  0.0037409810\n [546] -0.0836145084 -0.0527766498  0.0759841248 -0.0486041518 -0.0066678212\n [551] -0.1305421848 -0.0671445409 -0.0851311571  0.0342557496 -0.0636155887\n [556] -0.0320455820 -0.0026646080 -0.1084789202 -0.0400903741  0.0343409136\n [561]  0.1228620609 -0.0545371569  0.0246374508  0.0526970005  0.1064018176\n [566] -0.0720287620  0.0635287236  0.0524110677  0.0694662632  0.0417010136\n [571] -0.0145612202 -0.0430572835  0.0057715063 -0.0779425288 -0.0909319735\n [576]  0.0753196987 -0.0649926092  0.0948707220 -0.0614679418  0.0215898657\n [581] -0.0460708187 -0.1475374550  0.0667305188 -0.0002897706 -0.0198483212\n [586] -0.0041069442  0.0437023347 -0.0113571126  0.0564890853 -0.1120254616\n [591] -0.0716844509 -0.1027877662  0.0264005133  0.0796146807  0.0844927344\n [596]  0.0932342676  0.0200720484 -0.0679774977 -0.0653649982  0.0474224179\n [601] -0.0902972475 -0.0572648406 -0.0864116002 -0.0094379377 -0.0725896144\n [606] -0.0012421439 -0.0421493892  0.0262922666 -0.0252242307  0.0114779832\n [611] -0.0219736603  0.0566294753 -0.0393904294 -0.0254066011 -0.1204090707\n [616]  0.0403200718 -0.0288713892 -0.0628847365 -0.0289337723 -0.0526520121\n [621]  0.0355734584 -0.0227896643 -0.0108364072 -0.0258685530 -0.0791047839\n [626]  0.0023097356 -0.0029645501  0.1692308305  0.0225631749 -0.0156650952\n [631] -0.0518948163 -0.0381986643  0.0235829507  0.0570369547 -0.0601093115\n [636]  0.0403603694  0.0117055054 -0.0166803519 -0.0082502662 -0.0545098868\n [641] -0.0009038533  0.0008055483  0.0441001447  0.0568262105  0.0123743439\n [646]  0.0049645450 -0.0170188708  0.1127199611 -0.0886839514  0.0473559229\n [651] -0.0275775345 -0.0098800382  0.0311086687  0.1634946850  0.0645186770\n [656]  0.1969859819  0.0619784800  0.1294559250 -0.0152131128 -0.0952780279\n [661] -0.0391617309 -0.1446851897  0.0273043685  0.0066416627  0.0304904034\n [666] -0.0987390569  0.0419445587 -0.0185777245 -0.0653046393 -0.1035933293\n [671] -0.0805018187  0.0491383264  0.0045925265  0.0058346886  0.0444553184\n [676]  0.0095876642 -0.0153167290 -0.0580924037  0.0468719508  0.0338427704\n [681]  0.0834181619  0.0155515378  0.0253895799  0.0215474237 -0.0103817853\n [686]  0.1182957013  0.1091718894 -0.0502476263 -0.0774435264  0.0902764726\n [691] -0.0536990866 -0.0695425763 -0.0883120757  0.0609195948  0.0796525219\n [696]  0.0461672241 -0.0630610257  0.0290355393 -0.0413338888  0.0939421295\n [701]  0.0748245878 -0.0417996791 -0.0416132108 -0.0512604071  0.0601809810\n [706] -0.0676370722 -0.0935666862  0.0413767382  0.0207465580 -0.0392599787\n [711] -0.0879527026 -0.0870507483 -0.0915944160  0.0235438997 -0.0652434436\n [716] -0.0620098574 -0.0285418216  0.0313777841 -0.0113101145 -0.0779359956\n [721]  0.0784014249  0.0133139304  0.0678656488 -0.0988363251 -0.0747573543\n [726]  0.0881810055  0.0108602847  0.0034750474  0.0562068560 -0.0260338832\n [731] -0.1125166130  0.0527585431 -0.0412785344  0.0162607637  0.0245787932\n [736] -0.0399014699 -0.0349281037  0.0245709825  0.0160574902 -0.0665882312\n [741] -0.1490886266 -0.0295305056 -0.0351632280  0.0051693082  0.0686153937\n [746] -0.0115218870 -0.0197178389 -0.0517284630  0.0119939246  0.0156397617\n [751] -0.0502401761 -0.0671957818 -0.1202261297 -0.1065302162  0.0522274431\n [756] -0.0409823237  0.0689634952  0.1016370506 -0.0834132945 -0.1212041299\n [761] -0.0541706241  0.0733795465 -0.0114912665  0.0744656307 -0.0042898794\n [766]  0.0500022339 -0.0500444180 -0.0735476461 -0.0727823234 -0.0758590987\n [771]  0.0975299320 -0.1012677536 -0.0179847754 -0.0524412211 -0.0690312540\n [776] -0.1082167881  0.0308034878 -0.0437323180 -0.0854106724  0.0088913120\n [781] -0.0065429221 -0.0208839674 -0.0770844168 -0.0810564892 -0.0830045559\n [786]  0.0248667692 -0.0737071985 -0.0392390944 -0.0388103260  0.0540624112\n [791] -0.1430947319  0.0204418268 -0.0647163595  0.0305076452  0.0484414606\n [796] -0.0332518100 -0.0057415639 -0.1019356089 -0.0850361127 -0.0591596157\n [801]  0.0496535085 -0.0256459855 -0.1030542425  0.0308903044 -0.0473999450\n [806] -0.0708545291 -0.0012631679  0.0126767151 -0.0308357058 -0.0243472225\n [811]  0.0120956465  0.0725026058  0.1479311083 -0.1190623585  0.0878188439\n [816] -0.0333191880 -0.0235128332  0.0448870744 -0.0417752202 -0.0317158864\n [821] -0.0951550838  0.0153874606  0.0531208331 -0.0459441596  0.0394116212\n [826] -0.0172881752  0.1008609177  0.0014709754 -0.0444887088 -0.0313346417\n [831]  0.0411085161 -0.0163492972 -0.0649819073  0.0328125715  0.1005099687\n [836]  0.0119235170  0.0541286536 -0.1219566124 -0.0680410792 -0.0458329605\n [841]  0.0406986630  0.0388098769 -0.0209694771  0.0338115464 -0.0987195759\n [846] -0.0117470106  0.1507769945 -0.0441248792  0.0145435010  0.0007731493\n [851] -0.0624255896 -0.0997336596 -0.0277440165 -0.0384570516  0.0719361539\n [856]  0.0001701725 -0.0543834416 -0.1248711518  0.0215798654  0.0162854861\n [861] -0.0005214326 -0.0192155295  0.0297140409  0.1414866571 -0.0270410481\n [866] -0.0534310806 -0.0042927267 -0.0616555478 -0.0852657175 -0.0316153061\n [871] -0.0527067137  0.1598530931 -0.0202314825  0.1826993316 -0.0064236585\n [876] -0.0597817423  0.0485435319 -0.0066592964  0.1002524796 -0.1296922151\n [881] -0.0309278249  0.0673340568 -0.0571122157  0.1135176630  0.0126080423\n [886] -0.0971142831  0.0634934269  0.0297987107 -0.0584608361  0.0866512491\n [891] -0.0264006725  0.0277406319 -0.0416232374 -0.0379373171 -0.0172117694\n [896] -0.0244138302 -0.0603105992  0.0704244962 -0.0223644638 -0.0283851856\n [901] -0.0373144320 -0.0093471263  0.0373366440 -0.1792869006  0.0074536037\n [906]  0.0210348363  0.1088392258 -0.0659854951  0.0120216002 -0.0550941449\n [911]  0.0603457583  0.0048382909 -0.0471139792  0.0063810716 -0.0773409510\n [916] -0.0890427345 -0.0410657587 -0.0681993569  0.0871751635 -0.0859386463\n [921] -0.0860525610 -0.0164130622 -0.1575256946 -0.0346485786  0.1345047836\n [926] -0.1035155488  0.0179360706 -0.0080898277 -0.0799503656  0.1097487886\n [931] -0.0876584975 -0.0614880001 -0.0237003150  0.0367969599  0.0008054889\n [936]  0.0546407340 -0.0407893610  0.0145861394 -0.0454537199 -0.0312679216\n [941] -0.0492993980  0.0175011645 -0.0945687964  0.0864116112 -0.0733700632\n [946] -0.0609992782 -0.0938332686 -0.0566919621  0.0051851815  0.0530159395\n [951] -0.0306286632 -0.0327509583 -0.0128824674  0.0286172294  0.1402412870\n [956] -0.0677233569 -0.0067303199 -0.0821054427 -0.0284288893 -0.0457014374\n [961]  0.0448466073 -0.0096366391 -0.0709993534 -0.0675520332 -0.0812768715\n [966] -0.0894683540 -0.0806573773 -0.0524190939  0.0072090700 -0.0244308775\n [971] -0.0649704084 -0.0978596565 -0.0971077268 -0.0019789823 -0.0992277707\n [976] -0.0582009718 -0.0133388765 -0.0122562764  0.0164564169 -0.0094506181\n [981]  0.0084913212  0.0126258884 -0.1044103440  0.0079395015  0.0389576964\n [986]  0.0557207323  0.1081456976  0.0313510539 -0.1136952853 -0.0560461922\n [991] -0.0150095077  0.0011949263  0.0093982056 -0.1460578737 -0.0535551138\n [996]  0.1008834863 -0.0210160429 -0.0653508408 -0.0362525623  0.3007499695\n\n\n\nmean(bperm$res[1:999])\n\n[1] -0.01504572\n\n\n\nvar(bperm$res[1:999])\n\n[1] 0.004371574\n\n\n\nsummary(bperm$res[1:999])\n\n    Min.  1st Qu.   Median     Mean  3rd Qu.     Max. \n-0.18339 -0.06168 -0.02125 -0.01505  0.02611  0.27593 \n\n\n\nhist(bperm$res,freq=TRUE,breaks=20,xlab=\"Simulated Moran's I\")\nabline(v=0,col=\"red\")\n\n\n\n\nFrom the above graph, the distribution is right skewed with median<mean, more than half of the observations are negative.\n\nlibrary(ggplot2)\ndf<-data.frame(value=bperm$res[1:999])\nggplot(df,aes(x=value))+geom_histogram(bins=19,color=\"black\",fill=\"lightgrey\")\n\n\n\n\n\n\n\nGlobal Spatial Autocorrelation: Geary’s\n\nGeary’s c test\nThe code chunk below performs Geary’s c test for spatial autocorrelation by using geary.test() of spdep package.\n\ngeary.test(hunan$GDPPC,listw=rswm_q)\n\n\n    Geary C test under randomisation\n\ndata:  hunan$GDPPC \nweights: rswm_q \n\nGeary C statistic standard deviate = 3.6108, p-value = 0.0001526\nalternative hypothesis: Expectation greater than statistic\nsample estimates:\nGeary C statistic       Expectation          Variance \n        0.6907223         1.0000000         0.0073364 \n\n\nSince p-value is small, we reject the null hypothesis. There is sufficient evidence that statistics is less than 1. Observations tend to be similar.\n\n\nComputing Monte Carlo Geary’s C\nThe code chunk below performs permutation test for Geary’s C statistics by using geary.mc() of spdep\n\nset.seed(1234)\nbperm<-geary.mc(hunan$GDPPC,listw=rswm_q,nsim=999)\nbperm\n\n\n    Monte-Carlo simulation of Geary C\n\ndata:  hunan$GDPPC \nweights: rswm_q \nnumber of simulations + 1: 1000 \n\nstatistic = 0.69072, observed rank = 1, p-value = 0.001\nalternative hypothesis: greater\n\n\n\n\nVisualizing the Monte Carlo Geary’s C\n\nmean(bperm$res[1:999])\n\n[1] 1.004402\n\n\n\nvar(bperm$res[1:999])\n\n[1] 0.007436493\n\n\n\nsummary(bperm$res[1:999])\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n 0.7142  0.9502  1.0052  1.0044  1.0595  1.2722 \n\n\n\nhist(bperm$res,freq=TRUE,breaks=20,xlab=\"Simulated Geary c\")\nabline(v=1,col=\"red\")"
  },
  {
    "objectID": "Hands-on_Ex2/Hands-on_Ex2.html#spatial-correlogram",
    "href": "Hands-on_Ex2/Hands-on_Ex2.html#spatial-correlogram",
    "title": "Hands-on Exercise 2: Global and Local Measures of Spatial Autocorrelation",
    "section": "Spatial Correlogram",
    "text": "Spatial Correlogram\n\nCompute Moran’s I correlogram\nsp.correlogram() of spdep package is used to compute a 6-lag (order argument) spatial correlogram of GDPPC. The global spatial autocorrelation used in Moran’s I. We then use plot to graph the result.\n\nMI_corr<-sp.correlogram(wm_q,hunan$GDPPC,order=6,method=\"I\",style=\"W\")\nplot(MI_corr)\n\n\n\n\nIn order to examine the full analysis report, we use the below code chunk:\n\nprint(MI_corr)\n\nSpatial correlogram for hunan$GDPPC \nmethod: Moran's I\n         estimate expectation   variance standard deviate Pr(I) two sided    \n1 (88)  0.3007500  -0.0114943  0.0043484           4.7351       2.189e-06 ***\n2 (88)  0.2060084  -0.0114943  0.0020962           4.7505       2.029e-06 ***\n3 (88)  0.0668273  -0.0114943  0.0014602           2.0496        0.040400 *  \n4 (88)  0.0299470  -0.0114943  0.0011717           1.2107        0.226015    \n5 (88) -0.1530471  -0.0114943  0.0012440          -4.0134       5.984e-05 ***\n6 (88) -0.1187070  -0.0114943  0.0016791          -2.6164        0.008886 ** \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n\n\n\nComputing Geary’s C correlogram and plot\n\nGC_corr<-sp.correlogram(wm_q,hunan$GDPPC,order=6,method=\"C\",style=\"W\")\nplot(GC_corr)\n\n\n\n\n\nprint(GC_corr)\n\nSpatial correlogram for hunan$GDPPC \nmethod: Geary's C\n        estimate expectation  variance standard deviate Pr(I) two sided    \n1 (88) 0.6907223   1.0000000 0.0073364          -3.6108       0.0003052 ***\n2 (88) 0.7630197   1.0000000 0.0049126          -3.3811       0.0007220 ***\n3 (88) 0.9397299   1.0000000 0.0049005          -0.8610       0.3892612    \n4 (88) 1.0098462   1.0000000 0.0039631           0.1564       0.8757128    \n5 (88) 1.2008204   1.0000000 0.0035568           3.3673       0.0007592 ***\n6 (88) 1.0773386   1.0000000 0.0058042           1.0151       0.3100407    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1"
  },
  {
    "objectID": "Hands-on_Ex2/Hands-on_Ex2.html#cluster-and-outlier-analysis",
    "href": "Hands-on_Ex2/Hands-on_Ex2.html#cluster-and-outlier-analysis",
    "title": "Hands-on Exercise 2: Global and Local Measures of Spatial Autocorrelation",
    "section": "Cluster and Outlier Analysis",
    "text": "Cluster and Outlier Analysis\nIn this section, I learn how to apply appropriate Local Indicators for Spatial Association (LISA), especially local Moran’s I to detect cluster and/or outlier from GDP per capita in year 2012 of Hunan.\n\nComputing local Moran’s I\nlocalmoran() function of spdep package will be used to compute local Moran’s I. It computes li values, given a set of zi values and a listw object providing neighbor weights for the polygons associated with the zi values.\n\nfips<-order(hunan$County)\nlocalMI<-localmoran(hunan$GDPPC,rswm_q)\nhead(localMI)\n\n            Ii          E.Ii       Var.Ii        Z.Ii Pr(z != E(Ii))\n1 -0.001468468 -2.815006e-05 4.723841e-04 -0.06626904      0.9471636\n2  0.025878173 -6.061953e-04 1.016664e-02  0.26266425      0.7928094\n3 -0.011987646 -5.366648e-03 1.133362e-01 -0.01966705      0.9843090\n4  0.001022468 -2.404783e-07 5.105969e-06  0.45259801      0.6508382\n5  0.014814881 -6.829362e-05 1.449949e-03  0.39085814      0.6959021\n6 -0.038793829 -3.860263e-04 6.475559e-03 -0.47728835      0.6331568\n\n\nlocalmoran() function returns a matrix of values whose columns are:\nIi: the local Moran’s l statistics\nE.Ii: Expected local Moran’s I statistics under randomization hypothesis\nVar.Ii: Variance of local Moran’s L statistics under randomization hypothesis\nZ.Ii: The standard deviate of local Moran’s l statistics\nPr(): The p-value of local Moran’s I statistics\nTo list the content of the local Moran’s I statistics, we use printCoefmat():\n\nprintCoefmat(data.frame(localMI[fips,],row.names = hunan$County[fips]),check.names=FALSE)\n\n                       Ii        E.Ii      Var.Ii        Z.Ii Pr.z....E.Ii..\nAnhua         -2.2493e-02 -5.0048e-03  5.8235e-02 -7.2467e-02         0.9422\nAnren         -3.9932e-01 -7.0111e-03  7.0348e-02 -1.4791e+00         0.1391\nAnxiang       -1.4685e-03 -2.8150e-05  4.7238e-04 -6.6269e-02         0.9472\nBaojing        3.4737e-01 -5.0089e-03  8.3636e-02  1.2185e+00         0.2230\nChaling        2.0559e-02 -9.6812e-04  2.7711e-02  1.2932e-01         0.8971\nChangning     -2.9868e-05 -9.0010e-09  1.5105e-07 -7.6828e-02         0.9388\nChangsha       4.9022e+00 -2.1348e-01  2.3194e+00  3.3590e+00         0.0008\nChengbu        7.3725e-01 -1.0534e-02  2.2132e-01  1.5895e+00         0.1119\nChenxi         1.4544e-01 -2.8156e-03  4.7116e-02  6.8299e-01         0.4946\nCili           7.3176e-02 -1.6747e-03  4.7902e-02  3.4200e-01         0.7324\nDao            2.1420e-01 -2.0824e-03  4.4123e-02  1.0297e+00         0.3032\nDongan         1.5210e-01 -6.3485e-04  1.3471e-02  1.3159e+00         0.1882\nDongkou        5.2918e-01 -6.4461e-03  1.0748e-01  1.6338e+00         0.1023\nFenghuang      1.8013e-01 -6.2832e-03  1.3257e-01  5.1198e-01         0.6087\nGuidong       -5.9160e-01 -1.3086e-02  3.7003e-01 -9.5104e-01         0.3416\nGuiyang        1.8240e-01 -3.6908e-03  3.2610e-02  1.0305e+00         0.3028\nGuzhang        2.8466e-01 -8.5054e-03  1.4152e-01  7.7931e-01         0.4358\nHanshou        2.5878e-02 -6.0620e-04  1.0167e-02  2.6266e-01         0.7928\nHengdong       9.9964e-03 -4.9063e-04  6.7742e-03  1.2742e-01         0.8986\nHengnan        2.8064e-02 -3.2160e-04  3.7597e-03  4.6294e-01         0.6434\nHengshan      -5.8201e-03 -3.0437e-05  5.1076e-04 -2.5618e-01         0.7978\nHengyang       6.2997e-02 -1.3046e-03  2.1865e-02  4.3486e-01         0.6637\nHongjiang      1.8790e-01 -2.3019e-03  3.1725e-02  1.0678e+00         0.2856\nHuarong       -1.5389e-02 -1.8667e-03  8.1030e-02 -4.7503e-02         0.9621\nHuayuan        8.3772e-02 -8.5569e-04  2.4495e-02  5.4072e-01         0.5887\nHuitong        2.5997e-01 -5.2447e-03  1.1077e-01  7.9685e-01         0.4255\nJiahe         -1.2431e-01 -3.0550e-03  5.1111e-02 -5.3633e-01         0.5917\nJianghua       2.8651e-01 -3.8280e-03  8.0968e-02  1.0204e+00         0.3076\nJiangyong      2.4337e-01 -2.7082e-03  1.1746e-01  7.1800e-01         0.4728\nJingzhou       1.8270e-01 -8.5106e-04  2.4363e-02  1.1759e+00         0.2396\nJinshi        -1.1988e-02 -5.3666e-03  1.1334e-01 -1.9667e-02         0.9843\nJishou        -2.8680e-01 -2.6305e-03  4.4028e-02 -1.3543e+00         0.1756\nLanshan        6.3334e-02 -9.6365e-04  2.0441e-02  4.4972e-01         0.6529\nLeiyang        1.1581e-02 -1.4948e-04  2.5082e-03  2.3422e-01         0.8148\nLengshuijiang -1.7903e+00 -8.2129e-02  2.1598e+00 -1.1623e+00         0.2451\nLi             1.0225e-03 -2.4048e-07  5.1060e-06  4.5260e-01         0.6508\nLianyuan      -1.4672e-01 -1.8983e-03  1.9145e-02 -1.0467e+00         0.2952\nLiling         1.3774e+00 -1.5097e-02  4.2601e-01  2.1335e+00         0.0329\nLinli          1.4815e-02 -6.8294e-05  1.4499e-03  3.9086e-01         0.6959\nLinwu         -2.4621e-03 -9.0703e-06  1.9258e-04 -1.7676e-01         0.8597\nLinxiang       6.5904e-02 -2.9028e-03  2.5470e-01  1.3634e-01         0.8916\nLiuyang        3.3688e+00 -7.7502e-02  1.5180e+00  2.7972e+00         0.0052\nLonghui        8.0801e-01 -1.1377e-02  1.5538e-01  2.0787e+00         0.0376\nLongshan       7.5663e-01 -1.1100e-02  3.1449e-01  1.3690e+00         0.1710\nLuxi           1.8177e-01 -2.4855e-03  3.4249e-02  9.9561e-01         0.3194\nMayang         2.1852e-01 -5.8773e-03  9.8049e-02  7.1663e-01         0.4736\nMiluo          1.8704e+00 -1.6927e-02  2.7925e-01  3.5715e+00         0.0004\nNan           -9.5789e-03 -4.9497e-04  6.8341e-03 -1.0988e-01         0.9125\nNingxiang      1.5607e+00 -7.3878e-02  8.0012e-01  1.8274e+00         0.0676\nNingyuan       2.0910e-01 -7.0884e-03  8.2306e-02  7.5356e-01         0.4511\nPingjiang     -9.8964e-01 -2.6457e-03  5.6027e-02 -4.1698e+00         0.0000\nQidong         1.1806e-01 -2.1207e-03  2.4747e-02  7.6396e-01         0.4449\nQiyang         6.1966e-02 -7.3374e-04  8.5743e-03  6.7712e-01         0.4983\nRucheng       -3.6992e-01 -8.8999e-03  2.5272e-01 -7.1814e-01         0.4727\nSangzhi        2.5053e-01 -4.9470e-03  6.8000e-02  9.7972e-01         0.3272\nShaodong      -3.2659e-02 -3.6592e-05  5.0546e-04 -1.4510e+00         0.1468\nShaoshan       2.1223e+00 -5.0227e-02  1.3668e+00  1.8583e+00         0.0631\nShaoyang       5.9499e-01 -1.1253e-02  1.3012e-01  1.6807e+00         0.0928\nShimen        -3.8794e-02 -3.8603e-04  6.4756e-03 -4.7729e-01         0.6332\nShuangfeng     9.2835e-03 -2.2867e-03  3.1516e-02  6.5174e-02         0.9480\nShuangpai      8.0591e-02 -3.1366e-04  8.9838e-03  8.5358e-01         0.3933\nSuining        3.7585e-01 -3.5933e-03  4.1870e-02  1.8544e+00         0.0637\nTaojiang      -2.5394e-01 -1.2395e-03  1.4477e-02 -2.1002e+00         0.0357\nTaoyuan        1.4729e-02 -1.2039e-04  8.5103e-04  5.0903e-01         0.6107\nTongdao        4.6482e-01 -6.9870e-03  1.9879e-01  1.0582e+00         0.2900\nWangcheng      4.4220e+00 -1.1067e-01  1.3596e+00  3.8873e+00         0.0001\nWugang         7.1003e-01 -7.8144e-03  1.0710e-01  2.1935e+00         0.0283\nXiangtan       2.4530e-01 -3.6457e-04  3.2319e-03  4.3213e+00         0.0000\nXiangxiang     2.6271e-01 -1.2703e-03  2.1290e-02  1.8092e+00         0.0704\nXiangyin       5.4525e-01 -4.7442e-03  7.9236e-02  1.9539e+00         0.0507\nXinhua         1.1810e-01 -6.2649e-03  8.6001e-02  4.2409e-01         0.6715\nXinhuang       1.5725e-01 -4.1820e-03  3.6648e-01  2.6667e-01         0.7897\nXinning        6.8928e-01 -9.6674e-03  2.0328e-01  1.5502e+00         0.1211\nXinshao        5.7578e-02 -8.5932e-03  1.1769e-01  1.9289e-01         0.8470\nXintian       -7.4050e-03 -5.1493e-03  1.0877e-01 -6.8395e-03         0.9945\nXupu           3.2406e-01 -5.7468e-03  5.7735e-02  1.3726e+00         0.1699\nYanling       -6.9021e-02 -5.9211e-04  9.9306e-03 -6.8667e-01         0.4923\nYizhang       -2.6844e-01 -2.2463e-03  4.7588e-02 -1.2202e+00         0.2224\nYongshun       6.3064e-01 -1.1350e-02  1.8830e-01  1.4795e+00         0.1390\nYongxing       4.3411e-01 -9.0735e-03  1.5088e-01  1.1409e+00         0.2539\nYou            7.8750e-02 -7.2728e-03  1.2116e-01  2.4714e-01         0.8048\nYuanjiang      2.0004e-04 -1.7760e-04  2.9798e-03  6.9181e-03         0.9945\nYuanling       8.7298e-03 -2.2981e-06  2.3221e-05  1.8121e+00         0.0700\nYueyang        4.1189e-02 -1.9768e-04  2.3113e-03  8.6085e-01         0.3893\nZhijiang       1.0476e-01 -7.8123e-04  1.3100e-02  9.2214e-01         0.3565\nZhongfang     -2.2685e-01 -2.1455e-03  3.5927e-02 -1.1855e+00         0.2358\nZhuzhou        3.2864e-01 -5.2432e-04  7.2391e-03  3.8688e+00         0.0001\nZixing        -7.6849e-01 -8.8210e-02  9.4057e-01 -7.0144e-01         0.4830\n\n\n\nAppending the local Moran’s I dataframe to hunan SpatialPolygonDataFrame\nFirst, we need to append the local Moran’s l dataframe onto the hunan Spatial Polygon dataframe. To do so, we use cbind() function in the below code chunk.\n\nhunan.localMI<-cbind(hunan,localMI)%>%\n  rename(Pr.Ii=Pr.z....E.Ii..)\n\n\n\nMapping local Moran’s I values\nUsing choropleth mapping functions of tmap package, we can plot the local Moran’s I values by using the code chunks below:\n\ntm_shape(hunan.localMI)+\n  tm_fill(col=\"Ii\",style=\"pretty\",palette=\"RdBu\",title=\"local moran statistics\")+\n  tm_borders(alpha=0.5)\n\nVariable(s) \"Ii\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n\n\n\n\n\n\n\nMapping local Moran’s I p-values\n\ntm_shape(hunan.localMI)+\n  tm_fill(col=\"Pr.Ii\",breaks=c(-Inf,0.001,0.01,0.05,0.1,Inf),palette=\"-Blues\",title=\"local Moran's I p-values\")+\n  tm_borders(alpha=0.5)\n\n\n\n\n\n\nMapping both local Moran’s I values and p-values\n\nlocalMI.map<-tm_shape(hunan.localMI)+\n  tm_fill(col=\"Ii\",style=\"pretty\",title=\"Local MI statistics\")+tm_borders(alpha=0.5)\n\npvalue.map<-tm_shape(hunan.localMI)+\n  tm_fill(col=\"Pr.Ii\",breaks=c(-Inf,0.001,0.01,0.05,0.1,Inf),palette=\"-Blues\",title=\"local Moran's I p-values\")+tm_borders(alpha=0.5)\ntmap_arrange(localMI.map,pvalue.map,asp=1,ncol=2)\n\nVariable(s) \"Ii\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n\n\n\n\n\n\n\n\nCreating LISA Cluster Map\nThe LISA Cluster Map shows the significant locations color coded by type of spatial autocorrelation. The first step before we can generate the LISA cluster map is to plot the Moran scatterplot.\n\nPlotting Moran scatterplot\nThe Moran scatterplot is an illustration of the relationship between the values of the chosen attribute at each location and the average value of the same attribute at neighboring locations.\nTo plot the Moran scatterplot of GDPPC 2012, we use moran.plot() of spdep package.\n\nmoran.plot(hunan$GDPPC,rswm_q,labels=as.character(hunan$County),xlab=\"GDPPC 2012\",ylab=\"Spatially Lag GDPPC 2012\")\n\n\n\n\nThe above plot is split into 4 quadrants. The top right corner features those counties with high GDPPC and surrounded by other areas with average level of GDPPC. These are the high-high locations in the lesson slides.\n\n\nPlotting Moran scatterplot with standardized variables\nFirst, we use scale() to center and scale the variables. Centering is done by subtracting the mean (omitting NAs) of the corresponding columns, and scaling is done by dividing the centered variables by their standard deviations.\nIn the below code chunk, the as.vector pipe added to the end to ensure that data type will be converted into a vector which maps neatly into the dataframe.\n\nhunan$Z.GDPPC<-scale(hunan$GDPPC)%>%as.vector\n\nNow, we plot the Moran scatterplot again by using the code chunk below:\n\nnci2<-moran.plot(hunan$Z.GDPPC,rswm_q,labels=as.character(hunan$County),xlab=\"z-GDPPC 2012\",ylab=\"Spatially Lag z-GDPPC 2012\")\n\n\n\n\n\n\nPreparing LISA map classes\n\nquadrant<-vector(mode=\"numeric\",length=nrow(localMI))\n\nNext we center the variable of interest around its mean.\n\nhunan$lag_GDPPC<-lag.listw(rswm_q,hunan$GDPPC)\nDV<-hunan$lag_GDPPC-mean(hunan$lag_GDPPC)\n\nAfter that, we also center the local Moran’s I statistics around its mean.\n\nC_mI<-localMI[,1]-mean(localMI[,1])\n\nThen, we set significance level to 0.5 for the local Moran’s I statistics.\n\nsignif<-0.05\n\nNext, we define the four quadrant (high-high, low-low, low-high, high-low)\n\nquadrant[DV>0&C_mI>0]<-4\nquadrant[DV<0&C_mI<0]<-2\nquadrant[DV<0&C_mI>0]<-1\nquadrant[DV>0&C_mI<0]<-3\n\nLast, we place the non-significant Moran into the quadrant 0:\n\nquadrant[localMI[,5]>signif]<-0\n\nWe combine all the steps into the below code chunks:\n\nquadrant<-vector(mode=\"numeric\",length=nrow(localMI))\nhunan$lag_GDPPC<-lag.listw(rswm_q,hunan$GDPPC)\nDV<-hunan$lag_GDPPC-mean(hunan$lag_GDPPC)\nC_mI<-localMI[,1]-mean(localMI[,1])\nsignif<-0.05\nquadrant[DV>0&C_mI>0]<-4\nquadrant[DV<0&C_mI<0]<-2\nquadrant[DV<0&C_mI>0]<-1\nquadrant[DV>0&C_mI<0]<-3\nquadrant[localMI[,5]>signif]<-0\n\n\n\nPlotting LISA map\n\nhunan.localMI$quadrant<-quadrant\ncolors<-c(\"#ffffff\",\"#2c7bb6\",\"#abd9e9\",\"#fdae61\",\"#d7191c\")\nclusters<-c(\"Insignificant\",\"Low-Low\",\"Low-High\",\"High-Low\",\"High-High\")\ntm_shape(hunan.localMI)+\n  tm_fill(col=\"quadrant\",style=\"cat\",palette=colors[c(sort(unique(quadrant)))+1],labels=clusters[c(sort(unique(quadrant)))+1],popup.vars=c(\"\"))+\n  tm_view(set.zoom.limits = c(11,17))+tm_borders(alpha = 0.5)\n\n\n\n\nFor effective interpretation of the map, we plot both the local Moran’s I values map against its corresponding p-values map. by using the below code chunks:\n\ngdppc<-qtm(hunan,\"GDPPC\")\nhunan.localMI$quadrant<-quadrant\ncolors<-c(\"#ffffff\",\"#2c7bb6\",\"#abd9e9\",\"#fdae61\",\"#d7191c\")\nclusters<-c(\"Insignificant\",\"Low-Low\",\"Low-High\",\"High-Low\",\"High-High\")\nLISAmap<-tm_shape(hunan.localMI)+\n  tm_fill(col=\"quadrant\",style=\"cat\",palette=colors[c(sort(unique(quadrant)))+1],labels=clusters[c(sort(unique(quadrant)))+1],popup.vars=c(\"\"))+\n  tm_view(set.zoom.limits = c(11,17))+tm_borders(alpha = 0.5)\ntmap_arrange(gdppc,LISAmap,asp=1,ncol=2)\n\n\n\n\nFrom the above LISA map, we notice that those counties in the high-high quadrants were clustered together."
  },
  {
    "objectID": "Hands-on_Ex2/Hands-on_Ex2.html#hot-spot-and-cold-spot-area-analysis",
    "href": "Hands-on_Ex2/Hands-on_Ex2.html#hot-spot-and-cold-spot-area-analysis",
    "title": "Hands-on Exercise 2: Global and Local Measures of Spatial Autocorrelation",
    "section": "Hot Spot and Cold Spot Area Analysis",
    "text": "Hot Spot and Cold Spot Area Analysis\nHot Spot is used to describe a region or value that is higher relative to its surroundings (Lepers et al 2005, Aben et al 2012, Isobe et al 2015).\n\nGetis and Ord’s G-Statistics\nPurpose: Detect spatial abnormalities. It looks at neighbors within a defined proximity to identify where either high or low values cluster spatially. Statistically significant hot spots are recognized as areas of high values where other areas within a neighborhood range also share high values too.\nThere are 3 steps in this analysis.\n\nDerive Distance-based weight matrix\nCompute Gi Statistics\nMap Gi Statistics\n\n\n\nDeriving Distance-based weight matrix\nFor Getis-Ord we define neighbors based on distance instead of contiguity.\nThere are two types of distance based proximity matrix, namely:\n\nfixed distance weight matrix\nadaptive distance weight matrix\n\n\nDeriving the centroids\nSimilar concept to chapter 3, we define longitude and latitude by using map_dbl().\n\nlongitude<-map_dbl(hunan$geometry,~st_centroid(.x)[[1]])\nlatitude<-map_dbl(hunan$geometry,~st_centroid(.x)[[2]])\ncoords<-cbind(longitude,latitude)\n\n\n\nDetermine the cut-off distance\nSimilar to chapter 3, we will need to find the largest first nearest neighbor to define the upper bound for the function dnearneigh() in the next step.\n\nk1<-knn2nb(knearneigh(coords))\nk1dist<-unlist(nbdists(k1,coords,longlat=TRUE))\nsummary(k1dist)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  24.79   32.57   38.01   39.07   44.52   61.79 \n\n\nFrom the above summary, we can see that the maximum distance of first nearest neighbor is 61.79km. We will then use this as upper bound to ensure that all units will have at least one neighbor.\n\n\nComputing fixed distance weight matrix\nSimilar to chapter 3, we plug in the upper bound of 62km into the dnearneigh() function to compute the distance weight matrix.\n\nwm_d62<-dnearneigh(coords,0,62,longlat=TRUE)\nwm_d62\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 324 \nPercentage nonzero weights: 4.183884 \nAverage number of links: 3.681818 \n\n\nNext, we use nb2listw() to convert the nb object into spatial weight object.\n\nwm62_lw<-nb2listw(wm_d62,style=\"B\")\nsummary(wm62_lw)\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 324 \nPercentage nonzero weights: 4.183884 \nAverage number of links: 3.681818 \nLink number distribution:\n\n 1  2  3  4  5  6 \n 6 15 14 26 20  7 \n6 least connected regions:\n6 15 30 32 56 65 with 1 link\n7 most connected regions:\n21 28 35 45 50 52 82 with 6 links\n\nWeights style: B \nWeights constants summary:\n   n   nn  S0  S1   S2\nB 88 7744 324 648 5440\n\n\n\n\nComputing adaptive distance weight matrix\nConcept from chapter 3 as well. However, instead of using 6 nearest neighbors, in the below example, we use 8 nearest neighbors instead. We ensure that each county has 8 links, no more no less!\n\nknn<-knn2nb(knearneigh(coords,k=8))\nknn\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 704 \nPercentage nonzero weights: 9.090909 \nAverage number of links: 8 \nNon-symmetric neighbours list\n\n\nThen we use nb2listw() to convert the nb object to spatial weight object.\n\nknn_lw<-nb2listw(knn,style=\"B\")\nsummary(knn_lw)\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 704 \nPercentage nonzero weights: 9.090909 \nAverage number of links: 8 \nNon-symmetric neighbours list\nLink number distribution:\n\n 8 \n88 \n88 least connected regions:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 with 8 links\n88 most connected regions:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 with 8 links\n\nWeights style: B \nWeights constants summary:\n   n   nn  S0   S1    S2\nB 88 7744 704 1300 23014"
  },
  {
    "objectID": "Hands-on_Ex2/Hands-on_Ex2.html#computing-gi-statistics",
    "href": "Hands-on_Ex2/Hands-on_Ex2.html#computing-gi-statistics",
    "title": "Hands-on Exercise 2: Global and Local Measures of Spatial Autocorrelation",
    "section": "Computing Gi Statistics",
    "text": "Computing Gi Statistics\n\nGi Statistics using fixed distance\n\nfips<-order(hunan$County)\ngi.fixed<-localG(hunan$GDPPC,wm62_lw)\ngi.fixed\n\n [1]  0.436075843 -0.265505650 -0.073033665  0.413017033  0.273070579\n [6] -0.377510776  2.863898821  2.794350420  5.216125401  0.228236603\n[11]  0.951035346 -0.536334231  0.176761556  1.195564020 -0.033020610\n[16]  1.378081093 -0.585756761 -0.419680565  0.258805141  0.012056111\n[21] -0.145716531 -0.027158687 -0.318615290 -0.748946051 -0.961700582\n[26] -0.796851342 -1.033949773 -0.460979158 -0.885240161 -0.266671512\n[31] -0.886168613 -0.855476971 -0.922143185 -1.162328599  0.735582222\n[36] -0.003358489 -0.967459309 -1.259299080 -1.452256513 -1.540671121\n[41] -1.395011407 -1.681505286 -1.314110709 -0.767944457 -0.192889342\n[46]  2.720804542  1.809191360 -1.218469473 -0.511984469 -0.834546363\n[51] -0.908179070 -1.541081516 -1.192199867 -1.075080164 -1.631075961\n[56] -0.743472246  0.418842387  0.832943753 -0.710289083 -0.449718820\n[61] -0.493238743 -1.083386776  0.042979051  0.008596093  0.136337469\n[66]  2.203411744  2.690329952  4.453703219 -0.340842743 -0.129318589\n[71]  0.737806634 -1.246912658  0.666667559  1.088613505 -0.985792573\n[76]  1.233609606 -0.487196415  1.626174042 -1.060416797  0.425361422\n[81] -0.837897118 -0.314565243  0.371456331  4.424392623 -0.109566928\n[86]  1.364597995 -1.029658605 -0.718000620\nattr(,\"cluster\")\n [1] Low  Low  High High High High High High High Low  Low  High Low  Low  Low \n[16] High High High High Low  High High Low  Low  High Low  Low  Low  Low  Low \n[31] Low  Low  Low  High Low  Low  Low  Low  Low  Low  High Low  Low  Low  Low \n[46] High High Low  Low  Low  Low  High Low  Low  Low  Low  Low  High Low  Low \n[61] Low  Low  Low  High High High Low  High Low  Low  High Low  High High Low \n[76] High Low  Low  Low  Low  Low  Low  High High Low  High Low  Low \nLevels: Low High\nattr(,\"gstari\")\n[1] FALSE\nattr(,\"call\")\nlocalG(x = hunan$GDPPC, listw = wm62_lw)\nattr(,\"class\")\n[1] \"localG\"\n\n\nThe Gi statistics is represented as a Z-score. Greater values indicate greater intensity of clustering and the direction (positive or negative) represents high or low clusters.\nNext, we will join the Gi values to their corresponding sf dataframe by using cbind().\n\nhunan.gi<-cbind(hunan,as.matrix(gi.fixed))%>%\n  rename(gstat_fixed=as.matrix.gi.fixed.)\n\nThe above code chunks in fact perform 3 tasks:\n\nIt converts the output vector gi.fixed into an r matrix by using as.matrix().\nIt uses cbind to join hunan and gi.fixed to create a new Spatial Polygon Data Frame called hunan.gi.\nIt renames the existing field names of gi values to gstat_fixed by using rename().\n\n\n\nMapping Gi values with fixed distance weights\n\ngdppc <- qtm(hunan, \"GDPPC\")\n\nGimap <-tm_shape(hunan.gi) +\n  tm_fill(col=\"gstat_fixed\",style=\"pretty\",palette=\"-RdBu\",title=\"local Gi\") +\n  tm_borders(alpha = 0.5)\n\ntmap_arrange(gdppc, Gimap, asp=1, ncol=2)\n\nVariable(s) \"gstat_fixed\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n\n\n\n\n\n\n\nGi Statistics using adaptive distance\n\nfips<-order(hunan$County)\ngi.adaptive<-localG(hunan$GDPPC,knn_lw)\nhunan.gi<-cbind(hunan,as.matrix(gi.adaptive))%>%\n  rename(gstat_adaptive=as.matrix.gi.adaptive.)\n\n\n\nMapping Gi values with adaptive distance weights\n\ngdppc<-qtm(hunan,\"GDPPC\")\nGimap<-tm_shape(hunan.gi)+\n  tm_fill(col=\"gstat_adaptive\",style=\"pretty\",palette=\"-RdBu\",title=\"local Gi\")+tm_borders(alpha=0.5)\ntmap_arrange(gdppc,Gimap,asp=1,ncol=2)\n\nVariable(s) \"gstat_adaptive\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette."
  },
  {
    "objectID": "Hands-on_Ex3/Hands-on_Ex3.html",
    "href": "Hands-on_Ex3/Hands-on_Ex3.html",
    "title": "Hands-on Exercise 3: Geographical Segmentation with Spatially Constrained Clustering Techniques",
    "section": "",
    "text": "In this hands-on exercise, we will learn how to delineate homogeneous regions by using geographically referenced multivariate data. There are two major analysis, namely:\n\nhierarchical cluster analysis, and\nspatially constrained cluster analysis"
  },
  {
    "objectID": "Hands-on_Ex3/Hands-on_Ex3.html#getting-started",
    "href": "Hands-on_Ex3/Hands-on_Ex3.html#getting-started",
    "title": "Hands-on Exercise 3: Geographical Segmentation with Spatially Constrained Clustering Techniques",
    "section": "Getting Started",
    "text": "Getting Started\nThe code chunks below install and launch these R packages in R environment:\n\npacman::p_load(rgdal,spdep,tmap,sf,ggpubr,cluster,factoextra,NbClust,heatmaply,corrplot,psych,tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex3/Hands-on_Ex3.html#data-import-and-preparation",
    "href": "Hands-on_Ex3/Hands-on_Ex3.html#data-import-and-preparation",
    "title": "Hands-on Exercise 3: Geographical Segmentation with Spatially Constrained Clustering Techniques",
    "section": "Data Import and Preparation",
    "text": "Data Import and Preparation\n\nImporting geospatial data into R environment\nThe below code chunks use st_read() to import Myanmar Township Boundary GIS data in ESRI shapefile format into R environment:\n\nshan_sf<-st_read(dsn=\"data/geospatial\",layer=\"myanmar_township_boundaries\")%>%\n  filter(ST %in% c(\"Shan (East)\",\"Shan (North)\",\"Shan (South)\"))\n\nReading layer `myanmar_township_boundaries' from data source \n  `C:\\thaorocket\\ISS624\\Hands-on_Ex3\\data\\geospatial' using driver `ESRI Shapefile'\nSimple feature collection with 330 features and 14 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 92.17275 ymin: 9.671252 xmax: 101.1699 ymax: 28.54554\nGeodetic CRS:  WGS 84\n\n\nFrom the above summary table, we can see that there are 330 features with 14 columns. The imported township boundary object is called shan_sf. It is saved in simple feature data frame format.\nWe can view the content of the newly created shan_sf simple feature data frame by using the code chunks below:\n\nshan_sf\n\nSimple feature collection with 55 features and 14 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 96.15107 ymin: 19.29932 xmax: 101.1699 ymax: 24.15907\nGeodetic CRS:  WGS 84\nFirst 10 features:\n   OBJECTID           ST ST_PCODE       DT   DT_PCODE        TS  TS_PCODE\n1       163 Shan (North)   MMR015  Mongmit MMR015D008   Mongmit MMR015017\n2       203 Shan (South)   MMR014 Taunggyi MMR014D001   Pindaya MMR014006\n3       240 Shan (South)   MMR014 Taunggyi MMR014D001   Ywangan MMR014007\n4       106 Shan (South)   MMR014 Taunggyi MMR014D001  Pinlaung MMR014009\n5        72 Shan (North)   MMR015  Mongmit MMR015D008    Mabein MMR015018\n6        40 Shan (South)   MMR014 Taunggyi MMR014D001     Kalaw MMR014005\n7       194 Shan (South)   MMR014 Taunggyi MMR014D001     Pekon MMR014010\n8       159 Shan (South)   MMR014 Taunggyi MMR014D001  Lawksawk MMR014008\n9        61 Shan (North)   MMR015  Kyaukme MMR015D003 Nawnghkio MMR015013\n10      124 Shan (North)   MMR015  Kyaukme MMR015D003   Kyaukme MMR015012\n                 ST_2            LABEL2 SELF_ADMIN ST_RG T_NAME_WIN T_NAME_M3\n1  Shan State (North)    Mongmit\\n61072       <NA> State   rdk;rdwf      မိုးမိတ်\n2  Shan State (South)    Pindaya\\n77769       Danu State     yif;w,     ပင်းတယ\n3  Shan State (South)    Ywangan\\n76933       Danu State      &GmiH       ရွာငံ\n4  Shan State (South)  Pinlaung\\n162537       Pa-O State  yifavmif;   ပင်လောင်း\n5  Shan State (North)     Mabein\\n35718       <NA> State     rbdrf;      မဘိမ်း\n6  Shan State (South)     Kalaw\\n163138       <NA> State       uavm      ကလော\n7  Shan State (South)      Pekon\\n94226       <NA> State     z,fcHk       ဖယ်ခုံ\n8  Shan State (South)          Lawksawk       <NA> State   &yfapmuf    ရပ်စောက်\n9  Shan State (North) Nawnghkio\\n128357       <NA> State  aemifcsdK    နောင်ချို\n10 Shan State (North)   Kyaukme\\n172874       <NA> State   ausmufrJ    ကျောက်မဲ\n       AREA                       geometry\n1  2703.611 MULTIPOLYGON (((96.96001 23...\n2   629.025 MULTIPOLYGON (((96.7731 21....\n3  2984.377 MULTIPOLYGON (((96.78483 21...\n4  3396.963 MULTIPOLYGON (((96.49518 20...\n5  5034.413 MULTIPOLYGON (((96.66306 24...\n6  1456.624 MULTIPOLYGON (((96.49518 20...\n7  2073.513 MULTIPOLYGON (((97.14738 19...\n8  5145.659 MULTIPOLYGON (((96.94981 22...\n9  3271.537 MULTIPOLYGON (((96.75648 22...\n10 3920.869 MULTIPOLYGON (((96.95498 22...\n\n\nSince shan_sf conforms to tidy framework, we also can use glimpse() to reveal the data type of its fields.\n\nglimpse(shan_sf)\n\nRows: 55\nColumns: 15\n$ OBJECTID   <dbl> 163, 203, 240, 106, 72, 40, 194, 159, 61, 124, 71, 155, 101…\n$ ST         <chr> \"Shan (North)\", \"Shan (South)\", \"Shan (South)\", \"Shan (Sout…\n$ ST_PCODE   <chr> \"MMR015\", \"MMR014\", \"MMR014\", \"MMR014\", \"MMR015\", \"MMR014\",…\n$ DT         <chr> \"Mongmit\", \"Taunggyi\", \"Taunggyi\", \"Taunggyi\", \"Mongmit\", \"…\n$ DT_PCODE   <chr> \"MMR015D008\", \"MMR014D001\", \"MMR014D001\", \"MMR014D001\", \"MM…\n$ TS         <chr> \"Mongmit\", \"Pindaya\", \"Ywangan\", \"Pinlaung\", \"Mabein\", \"Kal…\n$ TS_PCODE   <chr> \"MMR015017\", \"MMR014006\", \"MMR014007\", \"MMR014009\", \"MMR015…\n$ ST_2       <chr> \"Shan State (North)\", \"Shan State (South)\", \"Shan State (So…\n$ LABEL2     <chr> \"Mongmit\\n61072\", \"Pindaya\\n77769\", \"Ywangan\\n76933\", \"Pinl…\n$ SELF_ADMIN <chr> NA, \"Danu\", \"Danu\", \"Pa-O\", NA, NA, NA, NA, NA, NA, NA, NA,…\n$ ST_RG      <chr> \"State\", \"State\", \"State\", \"State\", \"State\", \"State\", \"Stat…\n$ T_NAME_WIN <chr> \"rdk;rdwf\", \"yif;w,\", \"&GmiH\", \"yifavmif;\", \"rbdrf;\", \"uavm…\n$ T_NAME_M3  <chr> \"မိုးမိတ်\", \"ပင်းတယ\", \"ရွာငံ\", \"ပင်လောင်း\", \"မဘိမ်း\", \"ကလော\", \"ဖယ်ခုံ\", \"…\n$ AREA       <dbl> 2703.611, 629.025, 2984.377, 3396.963, 5034.413, 1456.624, …\n$ geometry   <MULTIPOLYGON [°]> MULTIPOLYGON (((96.96001 23..., MULTIPOLYGON (…\n\n\n\n\nImporting aspatial data into R environment\nThe code chunks below import csv file format into R environment by using read_csv() function of readr package:\n\nict<-read_csv(\"data/aspatial/Shan-ICT.csv\")\n\nRows: 55 Columns: 11\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): District Pcode, District Name, Township Pcode, Township Name\ndbl (7): Total households, Radio, Television, Land line phone, Mobile phone,...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nThe imported InfoComm variable was extracted from the 2014 Myanmar Population and Housing Census Myanmar. The attribute data set is called ict and saved in R’s tibble data frame format.\nThe code chunk below reveals the summary statistics of ict data frame:\n\nsummary(ict)\n\n District Pcode     District Name      Township Pcode     Township Name     \n Length:55          Length:55          Length:55          Length:55         \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n Total households     Radio         Television    Land line phone \n Min.   : 3318    Min.   :  115   Min.   :  728   Min.   :  20.0  \n 1st Qu.: 8711    1st Qu.: 1260   1st Qu.: 3744   1st Qu.: 266.5  \n Median :13685    Median : 2497   Median : 6117   Median : 695.0  \n Mean   :18369    Mean   : 4487   Mean   :10183   Mean   : 929.9  \n 3rd Qu.:23471    3rd Qu.: 6192   3rd Qu.:13906   3rd Qu.:1082.5  \n Max.   :82604    Max.   :30176   Max.   :62388   Max.   :6736.0  \n  Mobile phone      Computer      Internet at home\n Min.   :  150   Min.   :  20.0   Min.   :   8.0  \n 1st Qu.: 2037   1st Qu.: 121.0   1st Qu.:  88.0  \n Median : 3559   Median : 244.0   Median : 316.0  \n Mean   : 6470   Mean   : 575.5   Mean   : 760.2  \n 3rd Qu.: 7177   3rd Qu.: 507.0   3rd Qu.: 630.5  \n Max.   :48461   Max.   :6705.0   Max.   :9746.0  \n\n\nIn total there are 11 fields with 55 observations in the tibble data frame.\n\n\nDerive new variables using dplyr package\nThe unit of measurements of the values are number of households. However, these values are biased by the underlying total number of households. In general, townships with relatively higher total number of households tend to have higher number of households owning radio, TV, etc.\nIn order to overcome this problem, we derive the penetration rate of each ICT variable by using the below code chunk:\n\nict_derived<-ict %>%\n  mutate(`RADIO_PR`=`Radio`/`Total households`*1000)%>%\n  mutate(`TV_PR`=`Television`/`Total households`*1000)%>%\n  mutate(`LLPHONE_PR`=`Land line phone`/`Total households`*1000)%>%\n  mutate(`MPHONE_PR`=`Mobile phone`/`Total households`*1000)%>%\n  mutate(`COMPUTER_PR`=`Computer`/`Total households`*1000)%>%\n  mutate(`INTERNET_PR`=`Internet at home`/`Total households`*1000)%>%\n  rename(`DT_PCODE` =`District Pcode`,`DT`=`District Name`,`TS_PCODE`=`Township Pcode`, `TS`=`Township Name`,`TT_HOUSEHOLDS`=`Total households`,`RADIO`=`Radio`, `TV`=`Television`, \n`LLPHONE`=`Land line phone`, `MPHONE`=`Mobile phone`,`COMPUTER`=`Computer`, `INTERNET`=`Internet at home`)\n\nWe can review the summary statistics of the newly derived penetration rates by using the summary() function in the below code chunks:\n\nsummary(ict_derived)\n\n   DT_PCODE              DT              TS_PCODE              TS           \n Length:55          Length:55          Length:55          Length:55         \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n TT_HOUSEHOLDS       RADIO             TV           LLPHONE      \n Min.   : 3318   Min.   :  115   Min.   :  728   Min.   :  20.0  \n 1st Qu.: 8711   1st Qu.: 1260   1st Qu.: 3744   1st Qu.: 266.5  \n Median :13685   Median : 2497   Median : 6117   Median : 695.0  \n Mean   :18369   Mean   : 4487   Mean   :10183   Mean   : 929.9  \n 3rd Qu.:23471   3rd Qu.: 6192   3rd Qu.:13906   3rd Qu.:1082.5  \n Max.   :82604   Max.   :30176   Max.   :62388   Max.   :6736.0  \n     MPHONE         COMPUTER         INTERNET         RADIO_PR     \n Min.   :  150   Min.   :  20.0   Min.   :   8.0   Min.   : 21.05  \n 1st Qu.: 2037   1st Qu.: 121.0   1st Qu.:  88.0   1st Qu.:138.95  \n Median : 3559   Median : 244.0   Median : 316.0   Median :210.95  \n Mean   : 6470   Mean   : 575.5   Mean   : 760.2   Mean   :215.68  \n 3rd Qu.: 7177   3rd Qu.: 507.0   3rd Qu.: 630.5   3rd Qu.:268.07  \n Max.   :48461   Max.   :6705.0   Max.   :9746.0   Max.   :484.52  \n     TV_PR         LLPHONE_PR       MPHONE_PR       COMPUTER_PR    \n Min.   :116.0   Min.   :  2.78   Min.   : 36.42   Min.   : 3.278  \n 1st Qu.:450.2   1st Qu.: 22.84   1st Qu.:190.14   1st Qu.:11.832  \n Median :517.2   Median : 37.59   Median :305.27   Median :18.970  \n Mean   :509.5   Mean   : 51.09   Mean   :314.05   Mean   :24.393  \n 3rd Qu.:606.4   3rd Qu.: 69.72   3rd Qu.:428.43   3rd Qu.:29.897  \n Max.   :842.5   Max.   :181.49   Max.   :735.43   Max.   :92.402  \n  INTERNET_PR     \n Min.   :  1.041  \n 1st Qu.:  8.617  \n Median : 22.829  \n Mean   : 30.644  \n 3rd Qu.: 41.281  \n Max.   :117.985  \n\n\nThere are 6 new fields added into the data frame. They are RADIO_PR, TV_PR, LLPHONE_PR, MPHONE_PR, COMPUTER_PR, INTERNET_PR."
  },
  {
    "objectID": "Hands-on_Ex3/Hands-on_Ex3.html#exploratory-data-analysis-eda",
    "href": "Hands-on_Ex3/Hands-on_Ex3.html#exploratory-data-analysis-eda",
    "title": "Hands-on Exercise 3: Geographical Segmentation with Spatially Constrained Clustering Techniques",
    "section": "Exploratory Data Analysis (EDA)",
    "text": "Exploratory Data Analysis (EDA)\n\nEDA using statistics graphics\nWe can plot the distribution of variables (i.e. Number of households with radio) by using appropriate Exploratory Data Analysis (EDA) as shown in the code chunks below:\n\nggplot(data=ict_derived,aes(x=`RADIO`))+\n  geom_histogram(bins=20,color=\"black\",fill=\"light blue\")\n\n\n\n\nIn the above code chunks, histogram helps identify the overall distribution of the data values (i.e. left skew, right skew or normal distribution).\nOn the other hand, boxplot is helpful in detecting if there are outliers.\n\nggplot(data=ict_derived,aes(x=`RADIO`))+\n  geom_boxplot(color=\"black\",fill=\"light blue\")\n\n\n\n\nNext, we will also plot the distribution of the newly derived variables (i.e. Radio Penetration Rate) by using the code chunks below:\nHistogram\n\nggplot(data=ict_derived,aes(x=`RADIO_PR`))+\n  geom_histogram(bins=20,color=\"black\",fill=\"light blue\")\n\n\n\n\nBoxplot\n\nggplot(data=ict_derived,aes(x=`RADIO_PR`))+\n  geom_boxplot(color=\"black\",fill=\"light blue\")\n\n\n\n\nBoth distributions are right skewed.\nWe can also plot multiple histograms to reveal the distribution of selected variables in the ict_derived data frame.\nThe code chunks below are used to create the data visualization. First, we create the individual histograms using the below code chunks:\n\nradio<-ggplot(data=ict_derived,aes(x=`RADIO_PR`))+\n  geom_histogram(bins=20,color=\"black\",fill=\"light blue\")\ntv<-ggplot(data=ict_derived,aes(x=`TV_PR`))+\n  geom_histogram(bins=20,color=\"black\",fill=\"light blue\")\nllphone<-ggplot(data=ict_derived,aes(x=`LLPHONE_PR`))+\n  geom_histogram(bins=20,color=\"black\",fill=\"light blue\")\nmphone<-ggplot(data=ict_derived,aes(x=`MPHONE_PR`))+\n  geom_histogram(bins=20,color=\"black\",fill=\"light blue\")\ncomputer<-ggplot(data=ict_derived,aes(x=`COMPUTER_PR`))+\n  geom_histogram(bins=20,color=\"black\",fill=\"light blue\")\ninternet<-ggplot(data=ict_derived,aes(x=`INTERNET_PR`))+\n  geom_histogram(bins=20,color=\"black\",fill=\"light blue\")\n\nNext, we need to use ggarrange() function of ggpubr package is used to group these histograms together.\n\nggarrange(radio,tv,llphone,mphone,computer,internet,ncol=3,nrow=2)\n\n\n\n\n\n\nEDA using choropleth map\n\nJoining aspatial data with geospatial data\nBefore preparing the choropleth map, we will need to combine both the geospatial data object (i.e. shan_sf) and the aspatial data object (i.e. ict_derived) into one.\nThe below code chunk uses the left_join() function of dplyr package to combine both data frame objects with unique identifier as TS_PCODE.\n\nshan_sf<-left_join(shan_sf,ict_derived,by=c(\"TS_PCODE\"=\"TS_PCODE\"))\n\nIt is important to note that there is no new output data created. Instead, the data field from ict_derived data are now updated in shan_sf data frame.\n\n\nPreparing a choropleth map\nThe code chunks use qtm() function of tmap package to prepare the choropleth map.\n\nqtm(shan_sf,\"RADIO_PR\")\n\n\n\n\nIn order to reveal the distribution shown in the choropleth map are bias to the underlying total number of households, we create two choropleth maps, one for the total number of households (i.e. TT_HOUSEHOLDS.map), the other for the total number of households owning radio (i.e. RADIO.map) by using the below code chunks:\n\nTT_HOUSEHOLDS.map<-tm_shape(shan_sf)+\n  tm_fill(col=\"TT_HOUSEHOLDS\",n=5,style=\"jenks\",title=\"Total households\")+\n  tm_borders(alpha=0.5)\nRADIO.map<-tm_shape(shan_sf)+\n  tm_fill(col=\"RADIO\",n=5,style=\"jenks\",title=\"Number Radio\")+\n  tm_borders(alpha=0.5)\ntmap_arrange(TT_HOUSEHOLDS.map,RADIO.map,asp=NA,ncol=2)\n\n\n\n\nFrom the above choropleth maps, we can clearly see that regions with relatively higher total number of households also show relatively higher number of households with radio.\nNow, we will plot the choropleth maps showing the distribution of total number of households versus the radio penetration rate with the below code chunks.\n\ntm_shape(shan_sf)+\n  tm_polygons(c(\"TT_HOUSEHOLDS\",\"RADIO_PR\"),style=\"jenks\")+\n  tm_facets(sync=TRUE,ncol=2)+\n  tm_legend(legend.position=c(\"right\",\"bottom\"))+\n  tm_layout(outer.margin=0,asp=0)\n\n\n\n\nFrom the above choropleth maps, we can see that regions (especially those in the central region) with relatively lower total number of households can have high radio penetration."
  },
  {
    "objectID": "Hands-on_Ex3/Hands-on_Ex3.html#correlation-analysis",
    "href": "Hands-on_Ex3/Hands-on_Ex3.html#correlation-analysis",
    "title": "Hands-on Exercise 3: Geographical Segmentation with Spatially Constrained Clustering Techniques",
    "section": "Correlation Analysis",
    "text": "Correlation Analysis\nBefore we perform cluster analysis, it is important for us to ensure that the cluster variables are not highly correlated.\nThe below code chunks use corrplot.mixed() function of corrplot package to visualize and analyze the correlation of the input variables:\n\ncluster_vars.cor<-cor(ict_derived[,12:17])\ncorrplot.mixed(cluster_vars.cor,lower=\"ellipse\",upper=\"number\",tl.pos=\"lt\",diag=\"l\",tl.col=\"black\")\n\n\n\n\nThe correlation plot above shows that COMPUTER_PR and INTERNET_PR are highly correlated. This suggests that only one of them should be used in the cluster analysis."
  },
  {
    "objectID": "Hands-on_Ex3/Hands-on_Ex3.html#hierarchy-cluster-analysis",
    "href": "Hands-on_Ex3/Hands-on_Ex3.html#hierarchy-cluster-analysis",
    "title": "Hands-on Exercise 3: Geographical Segmentation with Spatially Constrained Clustering Techniques",
    "section": "Hierarchy Cluster Analysis",
    "text": "Hierarchy Cluster Analysis\n\nExtracting clustering variables\nThe code chunks below extract the clustering variables from the shan_sf sf object into data frame.\n\ncluster_vars<-shan_sf %>%\n  st_set_geometry(NULL) %>%\n  select(\"TS.x\",\"RADIO_PR\",\"TV_PR\",\"LLPHONE_PR\",\"MPHONE_PR\",\"COMPUTER_PR\")\nhead(cluster_vars,10)\n\n        TS.x RADIO_PR    TV_PR LLPHONE_PR MPHONE_PR COMPUTER_PR\n1    Mongmit 286.1852 554.1313   35.30618  260.6944    12.15939\n2    Pindaya 417.4647 505.1300   19.83584  162.3917    12.88190\n3    Ywangan 484.5215 260.5734   11.93591  120.2856     4.41465\n4   Pinlaung 231.6499 541.7189   28.54454  249.4903    13.76255\n5     Mabein 449.4903 708.6423   72.75255  392.6089    16.45042\n6      Kalaw 280.7624 611.6204   42.06478  408.7951    29.63160\n7      Pekon 318.6118 535.8494   39.83270  214.8476    18.97032\n8   Lawksawk 387.1017 630.0035   31.51366  320.5686    21.76677\n9  Nawnghkio 349.3359 547.9456   38.44960  323.0201    15.76465\n10   Kyaukme 210.9548 601.1773   39.58267  372.4930    30.94709\n\n\nNotice that the final clustering variables list exclude variable INTERNET_PR because it is highly correlated to COMPUTER_PR.\nNext, we need to change the rows by township name instead of row numbers by using the below code chunks:\n\nrow.names(cluster_vars)<-cluster_vars$TS.x\nhead(cluster_vars,10)\n\n               TS.x RADIO_PR    TV_PR LLPHONE_PR MPHONE_PR COMPUTER_PR\nMongmit     Mongmit 286.1852 554.1313   35.30618  260.6944    12.15939\nPindaya     Pindaya 417.4647 505.1300   19.83584  162.3917    12.88190\nYwangan     Ywangan 484.5215 260.5734   11.93591  120.2856     4.41465\nPinlaung   Pinlaung 231.6499 541.7189   28.54454  249.4903    13.76255\nMabein       Mabein 449.4903 708.6423   72.75255  392.6089    16.45042\nKalaw         Kalaw 280.7624 611.6204   42.06478  408.7951    29.63160\nPekon         Pekon 318.6118 535.8494   39.83270  214.8476    18.97032\nLawksawk   Lawksawk 387.1017 630.0035   31.51366  320.5686    21.76677\nNawnghkio Nawnghkio 349.3359 547.9456   38.44960  323.0201    15.76465\nKyaukme     Kyaukme 210.9548 601.1773   39.58267  372.4930    30.94709\n\n\nNotice that the row number has been replaced with the township names.\nNow, we will delete TS.x field by using the below code chunks:\n\nshan_ict<-select(cluster_vars,c(2:6))\nhead(shan_ict,10)\n\n          RADIO_PR    TV_PR LLPHONE_PR MPHONE_PR COMPUTER_PR\nMongmit   286.1852 554.1313   35.30618  260.6944    12.15939\nPindaya   417.4647 505.1300   19.83584  162.3917    12.88190\nYwangan   484.5215 260.5734   11.93591  120.2856     4.41465\nPinlaung  231.6499 541.7189   28.54454  249.4903    13.76255\nMabein    449.4903 708.6423   72.75255  392.6089    16.45042\nKalaw     280.7624 611.6204   42.06478  408.7951    29.63160\nPekon     318.6118 535.8494   39.83270  214.8476    18.97032\nLawksawk  387.1017 630.0035   31.51366  320.5686    21.76677\nNawnghkio 349.3359 547.9456   38.44960  323.0201    15.76465\nKyaukme   210.9548 601.1773   39.58267  372.4930    30.94709\n\n\n\n\nData Standardization\nIn general, multiple variables will be used in cluster analysis. These variables can belong to different value ranges. Therefore, in order to avoid the cluster analysis is skewed towards clustering variables with large numbers, we need to standardize the input variables before performing cluster analysis.\n\nMin-Max Standardization\nIn the code chunks below, normalize() of heatmaply package is used to standardize the clustering variables by using Min-Max method. We then use summary() function to display the summary statistics of the standardized clustering variables.\n\nshan_ict.std<-normalize(shan_ict)\nsummary(shan_ict.std)\n\n    RADIO_PR          TV_PR          LLPHONE_PR       MPHONE_PR     \n Min.   :0.0000   Min.   :0.0000   Min.   :0.0000   Min.   :0.0000  \n 1st Qu.:0.2544   1st Qu.:0.4600   1st Qu.:0.1123   1st Qu.:0.2199  \n Median :0.4097   Median :0.5523   Median :0.1948   Median :0.3846  \n Mean   :0.4199   Mean   :0.5416   Mean   :0.2703   Mean   :0.3972  \n 3rd Qu.:0.5330   3rd Qu.:0.6750   3rd Qu.:0.3746   3rd Qu.:0.5608  \n Max.   :1.0000   Max.   :1.0000   Max.   :1.0000   Max.   :1.0000  \n  COMPUTER_PR     \n Min.   :0.00000  \n 1st Qu.:0.09598  \n Median :0.17607  \n Mean   :0.23692  \n 3rd Qu.:0.29868  \n Max.   :1.00000  \n\n\n\n\nZ-score standardization\nZ-score standardization can be done by using scale() function of Base R. We also add in describe() function to show the summary statistics. Take note that describe() is preferred over summary() as the former provides info about standard deviation.\n\nshan_ict.z<-scale(shan_ict)\ndescribe(shan_ict.z)\n\n            vars  n mean sd median trimmed  mad   min  max range  skew kurtosis\nRADIO_PR       1 55    0  1  -0.04   -0.06 0.94 -1.85 2.55  4.40  0.48    -0.27\nTV_PR          2 55    0  1   0.05    0.04 0.78 -2.47 2.09  4.56 -0.38    -0.23\nLLPHONE_PR     3 55    0  1  -0.33   -0.15 0.68 -1.19 3.20  4.39  1.37     1.49\nMPHONE_PR      4 55    0  1  -0.05   -0.06 1.01 -1.58 2.40  3.98  0.48    -0.34\nCOMPUTER_PR    5 55    0  1  -0.26   -0.18 0.64 -1.03 3.31  4.34  1.80     2.96\n              se\nRADIO_PR    0.13\nTV_PR       0.13\nLLPHONE_PR  0.13\nMPHONE_PR   0.13\nCOMPUTER_PR 0.13\n\n\nNotice that the mean and standard deviation of the Z-score standardized clustering variables are 0 and 1 respectively.\nDo take note that Z-score standardization can only be performed based on the assumption that all variables are normally distributed.\n\n\n\nVisualizing the standardized clustering variables\nBesides reviewing the summary statistics of the standardized clustering variables, it is advisable to study their distribution visually.\nWe can use the below code chunks to plot the RADIO_PR field.\n\nr<-ggplot(data=ict_derived,aes(x=`RADIO_PR`))+\n  geom_histogram(bins=20,color=\"black\",fill=\"light blue\")\nshan_ict_s_df<-as.data.frame(shan_ict.std)\ns<-ggplot(data=shan_ict_s_df,aes(x=`RADIO_PR`))+\n  geom_histogram(bins=20,color=\"black\",fill=\"light blue\")+\n  ggtitle(\"Min-Max Standardization\")\nshan_ict_z_df<-as.data.frame(shan_ict.z)\nz<-ggplot(data=shan_ict_z_df,aes(x=`RADIO_PR`))+\n  geom_histogram(bins=20,color=\"black\",fill=\"light blue\")+\n  ggtitle(\"Z-Score Standardization\")\n\nggarrange(r,s,z,ncol=3,nrow=1)\n\n\n\n\nNotice that the overall distribution of clustering variables changed after data standardization. Therefore, it is NOT advisable to perform data standardization if the value range of the clustering variables are not very large.\n\n\nComputing proximity matrix\nThe code chunks below are used to compute the proximity matrix using euclidean method with dist() function.\n\nproxmat<-dist(shan_ict,method=\"euclidean\")\n\nThe code chunks below can be used to list the content of proxmat for visual inspection.\n\nproxmat\n\n             Mongmit   Pindaya   Ywangan  Pinlaung    Mabein     Kalaw\nPindaya    171.86828                                                  \nYwangan    381.88259 257.31610                                        \nPinlaung    57.46286 208.63519 400.05492                              \nMabein     263.37099 313.45776 529.14689 312.66966                    \nKalaw      160.05997 302.51785 499.53297 181.96406 198.14085          \nPekon       59.61977 117.91580 336.50410  94.61225 282.26877 211.91531\nLawksawk   140.11550 204.32952 432.16535 192.57320 130.36525 140.01101\nNawnghkio   89.07103 180.64047 377.87702 139.27495 204.63154 127.74787\nKyaukme    144.02475 311.01487 505.89191 139.67966 264.88283  79.42225\nMuse       563.01629 704.11252 899.44137 571.58335 453.27410 412.46033\nLaihka     141.87227 298.61288 491.83321 101.10150 345.00222 197.34633\nMongnai    115.86190 258.49346 422.71934  64.52387 358.86053 200.34668\nMawkmai    434.92968 437.99577 397.03752 398.11227 693.24602 562.59200\nKutkai      97.61092 212.81775 360.11861  78.07733 340.55064 204.93018\nMongton    192.67961 283.35574 361.23257 163.42143 425.16902 267.87522\nMongyai    256.72744 287.41816 333.12853 220.56339 516.40426 386.74701\nMongkaing  503.61965 481.71125 364.98429 476.29056 747.17454 625.24500\nLashio     251.29457 398.98167 602.17475 262.51735 231.28227 106.69059\nMongpan    193.32063 335.72896 483.68125 192.78316 301.52942 114.69105\nMatman     401.25041 354.39039 255.22031 382.40610 637.53975 537.63884\nTachileik  529.63213 635.51774 807.44220 555.01039 365.32538 373.64459\nNarphan    406.15714 474.50209 452.95769 371.26895 630.34312 463.53759\nMongkhet   349.45980 391.74783 408.97731 305.86058 610.30557 465.52013\nHsipaw     118.18050 245.98884 388.63147  76.55260 366.42787 212.36711\nMonghsat   214.20854 314.71506 432.98028 160.44703 470.48135 317.96188\nMongmao    242.54541 402.21719 542.85957 217.58854 384.91867 195.18913\nNansang    104.91839 275.44246 472.77637  85.49572 287.92364 124.30500\nLaukkaing  568.27732 726.85355 908.82520 563.81750 520.67373 427.77791\nPangsang   272.67383 428.24958 556.82263 244.47146 418.54016 224.03998\nNamtu      179.62251 225.40822 444.66868 170.04533 366.16094 307.27427\nMonghpyak  177.76325 221.30579 367.44835 222.20020 212.69450 167.08436\nKonkyan    403.39082 500.86933 528.12533 365.44693 613.51206 444.75859\nMongping   265.12574 310.64850 337.94020 229.75261 518.16310 375.64739\nHopong     136.93111 223.06050 352.85844  98.14855 398.00917 264.16294\nNyaungshwe  99.38590 216.52463 407.11649 138.12050 210.21337  95.66782\nHsihseng   131.49728 172.00796 342.91035 111.61846 381.20187 287.11074\nMongla     384.30076 549.42389 728.16301 372.59678 406.09124 260.26411\nHseni      189.37188 337.98982 534.44679 204.47572 213.61240  38.52842\nKunlong    224.12169 355.47066 531.63089 194.76257 396.61508 273.01375\nHopang     281.05362 443.26362 596.19312 265.96924 368.55167 185.14704\nNamhkan    386.02794 543.81859 714.43173 382.78835 379.56035 246.39577\nKengtung   246.45691 385.68322 573.23173 263.48638 219.47071  88.29335\nLangkho    164.26299 323.28133 507.78892 168.44228 253.84371  67.19580\nMonghsu    109.15790 198.35391 340.42789  80.86834 367.19820 237.34578\nTaunggyi   399.84278 503.75471 697.98323 429.54386 226.24011 252.26066\nPangwaun   381.51246 512.13162 580.13146 356.37963 523.44632 338.35194\nKyethi     202.92551 175.54012 287.29358 189.47065 442.07679 360.17247\nLoilen     145.48666 293.61143 469.51621  91.56527 375.06406 217.19877\nManton     430.64070 402.42888 306.16379 405.83081 674.01120 560.16577\nMongyang   309.51302 475.93982 630.71590 286.03834 411.88352 233.56349\nKunhing    173.50424 318.23811 449.67218 141.58836 375.82140 197.63683\nMongyawng  214.21738 332.92193 570.56521 235.55497 193.49994 173.43078\nTangyan    195.92520 208.43740 324.77002 169.50567 448.59948 348.06617\nNamhsan    237.78494 228.41073 286.16305 214.33352 488.33873 385.88676\n               Pekon  Lawksawk Nawnghkio   Kyaukme      Muse    Laihka\nPindaya                                                               \nYwangan                                                               \nPinlaung                                                              \nMabein                                                                \nKalaw                                                                 \nPekon                                                                 \nLawksawk   157.51129                                                  \nNawnghkio  113.15370  90.82891                                        \nKyaukme    202.12206 186.29066 157.04230                              \nMuse       614.56144 510.13288 533.68806 434.75768                    \nLaihka     182.23667 246.74469 211.88187 128.24979 526.65211          \nMongnai    151.60031 241.71260 182.21245 142.45669 571.97975 100.53457\nMawkmai    416.00669 567.52693 495.15047 512.02846 926.93007 429.96554\nKutkai     114.98048 224.64646 147.44053 170.93318 592.90743 144.67198\nMongton    208.14888 311.07742 225.81118 229.28509 634.71074 212.07320\nMongyai    242.52301 391.26989 319.57938 339.27780 763.91399 264.13364\nMongkaing  480.23965 625.18712 546.69447 586.05094 995.66496 522.96309\nLashio     303.80011 220.75270 230.55346 129.95255 313.15288 238.64533\nMongpan    243.30037 228.54223 172.84425 110.37831 447.49969 210.76951\nMatman     368.25761 515.39711 444.05061 505.52285 929.11283 443.25453\nTachileik  573.39528 441.82621 470.45533 429.15493 221.19950 549.08985\nNarphan    416.84901 523.69580 435.59661 420.30003 770.40234 392.32592\nMongkhet   342.08722 487.41102 414.10280 409.03553 816.44931 324.97428\nHsipaw     145.37542 249.35081 176.09570 163.95741 591.03355 128.42987\nMonghsat   225.64279 352.31496 289.83220 253.25370 663.76026 158.93517\nMongmao    293.70625 314.64777 257.76465 146.09228 451.82530 185.99082\nNansang    160.37607 188.78869 151.13185  60.32773 489.35308  78.78999\nLaukkaing  624.82399 548.83928 552.65554 428.74978 149.26996 507.39700\nPangsang   321.81214 345.91486 287.10769 175.35273 460.24292 214.19291\nNamtu      165.02707 260.95300 257.52713 270.87277 659.16927 185.86794\nMonghpyak  190.93173 142.31691  93.03711 217.64419 539.43485 293.22640\nKonkyan    421.48797 520.31264 439.34272 393.79911 704.86973 351.75354\nMongping   259.68288 396.47081 316.14719 330.28984 744.44948 272.82761\nHopong     138.86577 274.91604 204.88286 218.84211 648.68011 157.48857\nNyaungshwe 139.31874 104.17830  43.26545 126.50414 505.88581 201.71653\nHsihseng   105.30573 257.11202 209.88026 250.27059 677.66886 175.89761\nMongla     441.20998 393.18472 381.40808 241.58966 256.80556 315.93218\nHseni      243.98001 171.50398 164.05304  81.20593 381.30567 204.49010\nKunlong    249.36301 318.30406 285.04608 215.63037 547.24297 122.68682\nHopang     336.38582 321.16462 279.84188 154.91633 377.44407 230.78652\nNamhkan    442.77120 379.41126 367.33575 247.81990 238.67060 342.43665\nKengtung   297.67761 209.38215 208.29647 136.23356 330.08211 258.23950\nLangkho    219.21623 190.30257 156.51662  51.67279 413.64173 160.94435\nMonghsu    113.84636 242.04063 170.09168 200.77712 633.21624 163.28926\nTaunggyi   440.66133 304.96838 344.79200 312.60547 250.81471 425.36916\nPangwaun   423.81347 453.02765 381.67478 308.31407 541.97887 351.78203\nKyethi     162.43575 317.74604 267.21607 328.14177 757.16745 255.83275\nLoilen     181.94596 265.29318 219.26405 146.92675 560.43400  59.69478\nManton     403.82131 551.13000 475.77296 522.86003 941.49778 458.30232\nMongyang   363.58788 363.37684 323.32123 188.59489 389.59919 229.71502\nKunhing    213.46379 278.68953 206.15773 145.00266 533.00162 142.03682\nMongyawng  248.43910 179.07229 220.61209 181.55295 422.37358 211.99976\nTangyan    167.79937 323.14701 269.07880 306.78359 736.93741 224.29176\nNamhsan    207.16559 362.84062 299.74967 347.85944 778.52971 273.79672\n             Mongnai   Mawkmai    Kutkai   Mongton   Mongyai Mongkaing\nPindaya                                                               \nYwangan                                                               \nPinlaung                                                              \nMabein                                                                \nKalaw                                                                 \nPekon                                                                 \nLawksawk                                                              \nNawnghkio                                                             \nKyaukme                                                               \nMuse                                                                  \nLaihka                                                                \nMongnai                                                               \nMawkmai    374.50873                                                  \nKutkai      91.15307 364.95519                                        \nMongton    131.67061 313.35220 107.06341                              \nMongyai    203.23607 178.70499 188.94166 159.79790                    \nMongkaing  456.00842 133.29995 428.96133 365.50032 262.84016          \nLashio     270.86983 638.60773 289.82513 347.11584 466.36472 708.65819\nMongpan    178.09554 509.99632 185.18173 200.31803 346.39710 563.56780\nMatman     376.33870 147.83545 340.86349 303.04574 186.95158 135.51424\nTachileik  563.95232 919.38755 568.99109 608.76740 750.29555 967.14087\nNarphan    329.31700 273.75350 314.27683 215.97925 248.82845 285.65085\nMongkhet   275.76855 115.58388 273.91673 223.22828 104.98924 222.60577\nHsipaw      52.68195 351.34601  51.46282  90.69766 177.33790 423.77868\nMonghsat   125.25968 275.09705 154.32012 150.98053 127.35225 375.60376\nMongmao    188.29603 485.52853 204.69232 206.57001 335.61300 552.31959\nNansang     92.79567 462.41938 130.04549 199.58124 288.55962 542.16609\nLaukkaing  551.56800 882.51110 580.38112 604.66190 732.68347 954.11795\nPangsang   204.25746 484.14757 228.33583 210.77938 343.30638 548.40662\nNamtu      209.35473 427.95451 225.28268 308.71751 278.02761 525.04057\nMonghpyak  253.26470 536.71695 206.61627 258.04282 370.01575 568.21089\nKonkyan    328.82831 339.01411 310.60810 248.25265 287.87384 380.92091\nMongping   202.99615 194.31049 182.75266 119.86993  65.38727 257.18572\nHopong      91.53795 302.84362  73.45899 106.21031 124.62791 379.37916\nNyaungshwe 169.63695 502.99026 152.15482 219.72196 327.13541 557.32112\nHsihseng   142.36728 329.29477 128.21054 194.64317 162.27126 411.59788\nMongla     354.10985 686.88950 388.40984 411.06668 535.28615 761.48327\nHseni      216.81639 582.53670 229.37894 286.75945 408.23212 648.04408\nKunlong    202.92529 446.53763 204.54010 270.02165 299.36066 539.91284\nHopang     243.00945 561.24281 263.31986 273.50305 408.73288 626.17673\nNamhkan    370.05669 706.47792 392.48568 414.53594 550.62819 771.39688\nKengtung   272.28711 632.54638 279.19573 329.38387 460.39706 692.74693\nLangkho    174.67678 531.08019 180.51419 236.70878 358.95672 597.42714\nMonghsu     84.11238 332.07962  62.60859 107.04894 154.86049 400.71816\nTaunggyi   448.55282 810.74692 450.33382 508.40925 635.94105 866.21117\nPangwaun   312.13429 500.68857 321.80465 257.50434 394.07696 536.95736\nKyethi     210.50453 278.85535 184.23422 222.52947 137.79420 352.06533\nLoilen      58.41263 388.73386 131.56529 176.16001 224.79239 482.18190\nManton     391.54062 109.08779 361.82684 310.20581 195.59882  81.75337\nMongyang   260.39387 558.83162 285.33223 295.60023 414.31237 631.91325\nKunhing    110.55197 398.43973 108.84990 114.03609 238.99570 465.03971\nMongyawng  275.77546 620.04321 281.03383 375.22688 445.78964 700.98284\nTangyan    180.37471 262.66006 166.61820 198.88460 109.08506 348.56123\nNamhsan    218.10003 215.19289 191.32762 196.76188  77.35900 288.66231\n              Lashio   Mongpan    Matman Tachileik   Narphan  Mongkhet\nPindaya                                                               \nYwangan                                                               \nPinlaung                                                              \nMabein                                                                \nKalaw                                                                 \nPekon                                                                 \nLawksawk                                                              \nNawnghkio                                                             \nKyaukme                                                               \nMuse                                                                  \nLaihka                                                                \nMongnai                                                               \nMawkmai                                                               \nKutkai                                                                \nMongton                                                               \nMongyai                                                               \nMongkaing                                                             \nLashio                                                                \nMongpan    172.33279                                                  \nMatman     628.11049 494.81014                                        \nTachileik  311.95286 411.03849 890.12935                              \nNarphan    525.63854 371.13393 312.05193 760.29566                    \nMongkhet   534.44463 412.17123 203.02855 820.50164 217.28718          \nHsipaw     290.86435 179.52054 344.45451 576.18780 295.40170 253.80950\nMonghsat   377.86793 283.30992 313.59911 677.09508 278.21548 167.98445\nMongmao    214.23677 131.59966 501.59903 472.95568 331.42618 375.35820\nNansang    184.47950 144.77393 458.06573 486.77266 398.13308 360.99219\nLaukkaing  334.65738 435.58047 903.72094 325.06329 708.82887 769.06406\nPangsang   236.72516 140.23910 506.29940 481.31907 316.30314 375.58139\nNamtu      365.88437 352.91394 416.65397 659.56458 494.36143 355.99713\nMonghpyak  262.09281 187.85699 470.46845 444.04411 448.40651 462.63265\nKonkyan    485.51312 365.87588 392.40306 730.92980 158.82353 254.24424\nMongping   454.52548 318.47482 201.65224 727.08969 188.64567 113.80917\nHopong     345.31042 239.43845 291.84351 632.45718 294.40441 212.99485\nNyaungshwe 201.58191 137.29734 460.91883 445.81335 427.94086 417.08639\nHsihseng   369.00833 295.87811 304.02806 658.87060 377.52977 256.70338\nMongla     179.95877 253.20001 708.17595 347.33155 531.46949 574.40292\nHseni       79.41836 120.66550 564.64051 354.90063 474.12297 481.88406\nKunlong    295.23103 288.03320 468.27436 595.70536 413.07823 341.68641\nHopang     170.63913 135.62913 573.55355 403.82035 397.85908 451.51070\nNamhkan    173.27153 240.34131 715.42102 295.91660 536.85519 596.19944\nKengtung    59.85893 142.21554 613.01033 295.90429 505.40025 531.35998\nLangkho    115.18145  94.98486 518.86151 402.33622 420.65204 428.08061\nMonghsu    325.71557 216.25326 308.13805 605.02113 311.92379 247.73318\nTaunggyi   195.14541 319.81385 778.45810 150.84117 684.20905 712.80752\nPangwaun   362.45608 232.52209 523.43600 540.60474 264.64997 407.02947\nKyethi     447.10266 358.89620 233.83079 728.87329 374.90376 233.25039\nLoilen     268.92310 207.25000 406.56282 573.75476 354.79137 284.76895\nManton     646.66493 507.96808  59.52318 910.23039 280.26395 181.33894\nMongyang   209.33700 194.93467 585.61776 448.79027 401.39475 445.40621\nKunhing    255.10832 137.85278 403.66587 532.26397 281.62645 292.49814\nMongyawng  172.70139 275.15989 601.80824 432.10118 572.76394 522.91815\nTangyan    429.84475 340.39128 242.78233 719.84066 348.84991 201.49393\nNamhsan    472.04024 364.77086 180.09747 754.03913 316.54695 170.90848\n              Hsipaw  Monghsat   Mongmao   Nansang Laukkaing  Pangsang\nPindaya                                                               \nYwangan                                                               \nPinlaung                                                              \nMabein                                                                \nKalaw                                                                 \nPekon                                                                 \nLawksawk                                                              \nNawnghkio                                                             \nKyaukme                                                               \nMuse                                                                  \nLaihka                                                                \nMongnai                                                               \nMawkmai                                                               \nKutkai                                                                \nMongton                                                               \nMongyai                                                               \nMongkaing                                                             \nLashio                                                                \nMongpan                                                               \nMatman                                                                \nTachileik                                                             \nNarphan                                                               \nMongkhet                                                              \nHsipaw                                                                \nMonghsat   121.78922                                                  \nMongmao    185.99483 247.17708                                        \nNansang    120.24428 201.92690 164.99494                              \nLaukkaing  569.06099 626.44910 404.00848 480.60074                    \nPangsang   205.04337 256.37933  57.60801 193.36162 408.04016          \nNamtu      229.44658 231.78673 365.03882 217.61884 664.06286 392.97391\nMonghpyak  237.67919 356.84917 291.88846 227.52638 565.84279 315.11651\nKonkyan    296.74316 268.25060 281.87425 374.70456 635.92043 274.81900\nMongping   168.92101 140.95392 305.57166 287.36626 708.13447 308.33123\nHopong      62.86179 100.45714 244.16253 167.66291 628.48557 261.51075\nNyaungshwe 169.92664 286.37238 230.45003 131.18943 520.24345 257.77823\nHsihseng   136.54610 153.49551 311.98001 193.53779 670.74564 335.52974\nMongla     373.47509 429.00536 216.24705 289.45119 202.55831 217.88123\nHseni      231.48538 331.22632 184.67099 136.45492 391.74585 214.66375\nKunlong    205.10051 202.31862 224.43391 183.01388 521.88657 258.49342\nHopang     248.72536 317.64824  78.29342 196.47091 331.67199  92.57672\nNamhkan    382.79302 455.10875 223.32205 302.89487 196.46063 231.38484\nKengtung   284.08582 383.72138 207.58055 193.67980 351.48520 229.85484\nLangkho    183.05109 279.52329 134.50170  99.39859 410.41270 167.65920\nMonghsu     58.55724 137.24737 242.43599 153.59962 619.01766 260.52971\nTaunggyi   462.31183 562.88102 387.33906 365.04897 345.98041 405.59730\nPangwaun   298.12447 343.53898 187.40057 326.12960 470.63605 157.48757\nKyethi     195.17677 190.50609 377.89657 273.02385 749.99415 396.89963\nLoilen      98.04789 118.65144 190.26490  94.23028 535.57527 207.94433\nManton     359.60008 317.15603 503.79786 476.55544 907.38406 504.75214\nMongyang   267.10497 312.64797  91.06281 218.49285 326.19219 108.37735\nKunhing     90.77517 165.38834 103.91040 128.20940 500.41640 123.18870\nMongyawng  294.70967 364.40429 296.40789 191.11990 454.80044 336.16703\nTangyan    167.69794 144.59626 347.14183 249.70235 722.40954 364.76893\nNamhsan    194.47928 169.56962 371.71448 294.16284 760.45960 385.65526\n               Namtu Monghpyak   Konkyan  Mongping    Hopong Nyaungshwe\nPindaya                                                                \nYwangan                                                                \nPinlaung                                                               \nMabein                                                                 \nKalaw                                                                  \nPekon                                                                  \nLawksawk                                                               \nNawnghkio                                                              \nKyaukme                                                                \nMuse                                                                   \nLaihka                                                                 \nMongnai                                                                \nMawkmai                                                                \nKutkai                                                                 \nMongton                                                                \nMongyai                                                                \nMongkaing                                                              \nLashio                                                                 \nMongpan                                                                \nMatman                                                                 \nTachileik                                                              \nNarphan                                                                \nMongkhet                                                               \nHsipaw                                                                 \nMonghsat                                                               \nMongmao                                                                \nNansang                                                                \nLaukkaing                                                              \nPangsang                                                               \nNamtu                                                                  \nMonghpyak  346.57799                                                   \nKonkyan    478.37690 463.39594                                         \nMongping   321.66441 354.76537 242.02901                               \nHopong     206.82668 267.95563 304.49287 134.00139                     \nNyaungshwe 271.41464 103.97300 432.35040 319.32583 209.32532           \nHsihseng   131.89940 285.37627 383.49700 199.64389  91.65458  225.80242\nMongla     483.49434 408.03397 468.09747 512.61580 432.31105  347.60273\nHseni      327.41448 200.26876 448.84563 395.58453 286.41193  130.86310\nKunlong    233.60474 357.44661 329.11433 309.05385 219.06817  285.13095\nHopang     408.24516 304.26577 348.18522 379.27212 309.77356  247.19891\nNamhkan    506.32466 379.50202 481.59596 523.74815 444.13246  333.32428\nKengtung   385.33554 221.47613 474.82621 442.80821 340.47382  177.75714\nLangkho    305.03473 200.27496 386.95022 343.96455 239.63685  128.26577\nMonghsu    209.64684 232.17823 331.72187 158.90478  43.40665  173.82799\nTaunggyi   518.72748 334.17439 650.56905 621.53039 513.76415  325.09619\nPangwaun   517.03554 381.95144 263.97576 340.37881 346.00673  352.92324\nKyethi     186.90932 328.16234 400.10989 187.43974 136.49038  288.06872\nLoilen     194.24075 296.99681 334.19820 231.99959 124.74445  206.40432\nManton     448.58230 502.20840 366.66876 200.48082 310.58885  488.79874\nMongyang   413.26052 358.17599 329.39338 387.80686 323.35704  294.29500\nKunhing    296.43996 250.74435 253.74202 212.59619 145.15617  189.97131\nMongyawng  262.24331 285.56475 522.38580 455.59190 326.59925  218.12104\nTangyan    178.69483 335.26416 367.46064 161.67411 106.82328  284.14692\nNamhsan    240.95555 352.70492 352.20115 130.23777 132.70541  315.91750\n            Hsihseng    Mongla     Hseni   Kunlong    Hopang   Namhkan\nPindaya                                                               \nYwangan                                                               \nPinlaung                                                              \nMabein                                                                \nKalaw                                                                 \nPekon                                                                 \nLawksawk                                                              \nNawnghkio                                                             \nKyaukme                                                               \nMuse                                                                  \nLaihka                                                                \nMongnai                                                               \nMawkmai                                                               \nKutkai                                                                \nMongton                                                               \nMongyai                                                               \nMongkaing                                                             \nLashio                                                                \nMongpan                                                               \nMatman                                                                \nTachileik                                                             \nNarphan                                                               \nMongkhet                                                              \nHsipaw                                                                \nMonghsat                                                              \nMongmao                                                               \nNansang                                                               \nLaukkaing                                                             \nPangsang                                                              \nNamtu                                                                 \nMonghpyak                                                             \nKonkyan                                                               \nMongping                                                              \nHopong                                                                \nNyaungshwe                                                            \nHsihseng                                                              \nMongla     478.66210                                                  \nHseni      312.74375 226.82048                                        \nKunlong    231.85967 346.46200 276.19175                              \nHopang     370.01334 147.02444 162.80878 271.34451                    \nNamhkan    492.09476  77.21355 212.11323 375.73885 146.18632          \nKengtung   370.72441 202.45004  66.12817 317.14187 164.29921 175.63015\nLangkho    276.27441 229.01675  66.66133 224.52741 134.24847 224.40029\nMonghsu     97.82470 424.51868 262.28462 239.89665 301.84458 431.32637\nTaunggyi   528.14240 297.09863 238.19389 471.29032 329.95252 257.29147\nPangwaun   433.06326 319.18643 330.70182 392.45403 206.98364 310.44067\nKyethi      84.04049 556.02500 388.33498 298.55859 440.48114 567.86202\nLoilen     158.84853 338.67408 227.10984 166.53599 242.89326 364.90647\nManton     334.87758 712.51416 584.63341 479.76855 577.52046 721.86149\nMongyang   382.59743 146.66661 210.19929 247.22785  69.25859 167.72448\nKunhing    220.15490 306.47566 206.47448 193.77551 172.96164 314.92119\nMongyawng  309.51462 315.57550 173.86004 240.39800 290.51360 321.21112\nTangyan     70.27241 526.80849 373.07575 268.07983 412.22167 542.64078\nNamhsan    125.74240 564.02740 411.96125 310.40560 440.51555 576.42717\n            Kengtung   Langkho   Monghsu  Taunggyi  Pangwaun    Kyethi\nPindaya                                                               \nYwangan                                                               \nPinlaung                                                              \nMabein                                                                \nKalaw                                                                 \nPekon                                                                 \nLawksawk                                                              \nNawnghkio                                                             \nKyaukme                                                               \nMuse                                                                  \nLaihka                                                                \nMongnai                                                               \nMawkmai                                                               \nKutkai                                                                \nMongton                                                               \nMongyai                                                               \nMongkaing                                                             \nLashio                                                                \nMongpan                                                               \nMatman                                                                \nTachileik                                                             \nNarphan                                                               \nMongkhet                                                              \nHsipaw                                                                \nMonghsat                                                              \nMongmao                                                               \nNansang                                                               \nLaukkaing                                                             \nPangsang                                                              \nNamtu                                                                 \nMonghpyak                                                             \nKonkyan                                                               \nMongping                                                              \nHopong                                                                \nNyaungshwe                                                            \nHsihseng                                                              \nMongla                                                                \nHseni                                                                 \nKunlong                                                               \nHopang                                                                \nNamhkan                                                               \nKengtung                                                              \nLangkho    107.16213                                                  \nMonghsu    316.91914 221.84918                                        \nTaunggyi   186.28225 288.27478 486.91951                              \nPangwaun   337.48335 295.38434 343.38498 497.61245                    \nKyethi     444.26274 350.91512 146.61572 599.57407 476.62610          \nLoilen     282.22935 184.10672 131.55208 455.91617 331.69981 232.32965\nManton     631.99123 535.95620 330.76503 803.08034 510.79265 272.03299\nMongyang   217.08047 175.35413 323.95988 374.58247 225.25026 453.86726\nKunhing    245.95083 146.38284 146.78891 429.98509 229.09986 278.95182\nMongyawng  203.87199 186.11584 312.85089 287.73864 475.33116 387.71518\nTangyan    429.95076 332.02048 127.42203 592.65262 447.05580  47.79331\nNamhsan    466.20497 368.20978 153.22576 631.49232 448.58030  68.67929\n              Loilen    Manton  Mongyang   Kunhing Mongyawng   Tangyan\nPindaya                                                               \nYwangan                                                               \nPinlaung                                                              \nMabein                                                                \nKalaw                                                                 \nPekon                                                                 \nLawksawk                                                              \nNawnghkio                                                             \nKyaukme                                                               \nMuse                                                                  \nLaihka                                                                \nMongnai                                                               \nMawkmai                                                               \nKutkai                                                                \nMongton                                                               \nMongyai                                                               \nMongkaing                                                             \nLashio                                                                \nMongpan                                                               \nMatman                                                                \nTachileik                                                             \nNarphan                                                               \nMongkhet                                                              \nHsipaw                                                                \nMonghsat                                                              \nMongmao                                                               \nNansang                                                               \nLaukkaing                                                             \nPangsang                                                              \nNamtu                                                                 \nMonghpyak                                                             \nKonkyan                                                               \nMongping                                                              \nHopong                                                                \nNyaungshwe                                                            \nHsihseng                                                              \nMongla                                                                \nHseni                                                                 \nKunlong                                                               \nHopang                                                                \nNamhkan                                                               \nKengtung                                                              \nLangkho                                                               \nMonghsu                                                               \nTaunggyi                                                              \nPangwaun                                                              \nKyethi                                                                \nLoilen                                                                \nManton     419.06087                                                  \nMongyang   246.76592 585.70558                                        \nKunhing    130.39336 410.49230 188.89405                              \nMongyawng  261.75211 629.43339 304.21734 295.35984                    \nTangyan    196.60826 271.82672 421.06366 249.74161 377.52279          \nNamhsan    242.15271 210.48485 450.97869 270.79121 430.02019  63.67613\n\n\n\n\nComputing hierarchical clustering\nThe code chunks below perform hierarchical cluster analysis using ward.D method. The hierarchical clustering output is stored in an object of class hclust which describes the tree produced by clustering process.\n\nhclust_ward<-hclust(proxmat,method=\"ward.D\")\n\nWe can then plot the tree by using plot() of R Graphics as shown in the code chunks below:\n\nplot(hclust_ward,cex=0.6)\n\n\n\n\n\n\nSelecting the optimal clustering algorithm\nThe function agnes() of cluster package can help identify stronger clustering structures when performing hierarchical clustering analysis. It functions like hclust() but also provides the agglomerative coefficient, which measures the amount of clustering structure found (values closer 1 suggest strong clustering structure).\nThe code chunks below compute the agglomerative coefficients of all hierarchical clustering algorithms.\n\nm<-c(\"average\",\"single\",\"complete\",\"ward\")\nnames(m)<-c(\"average\",\"single\",\"complete\",\"ward\")\nac<-function(x){agnes(shan_ict,method=x)$ac}\nmap_dbl(m,ac)\n\n  average    single  complete      ward \n0.8131144 0.6628705 0.8950702 0.9427730 \n\n\nWith reference to the above table, we can see the Ward’s method provides the strongest clustering structure among the 4 methods. Therefore, in the subsequent analysis, only Ward’s method will be used.\n\n\nDetermining Optimal Clusters\nThere are three commonly used methods to determine the optimal cluster to retain, which are:\n\nElbow Method\nAverage Silhouette Method\nGap Statistic Method\n\n\nGap Statistics Method\nIn the below code chunk, we use clusGap() of cluster package to calculate gap statistics.\n\nset.seed(12345)\ngap_stat<-clusGap(shan_ict,FUN=hcut,nstart=25,K.max=10,B=50)\nprint(gap_stat,method=\"firstmax\")\n\nClustering Gap statistic [\"clusGap\"] from call:\nclusGap(x = shan_ict, FUNcluster = hcut, K.max = 10, B = 50, nstart = 25)\nB=50 simulated reference sets, k = 1..10; spaceH0=\"scaledPCA\"\n --> Number of clusters (method 'firstmax'): 1\n          logW   E.logW       gap     SE.sim\n [1,] 8.407129 8.680794 0.2736651 0.04460994\n [2,] 8.130029 8.350712 0.2206824 0.03880130\n [3,] 7.992265 8.202550 0.2102844 0.03362652\n [4,] 7.862224 8.080655 0.2184311 0.03784781\n [5,] 7.756461 7.978022 0.2215615 0.03897071\n [6,] 7.665594 7.887777 0.2221833 0.03973087\n [7,] 7.590919 7.806333 0.2154145 0.04054939\n [8,] 7.526680 7.731619 0.2049390 0.04198644\n [9,] 7.458024 7.660795 0.2027705 0.04421874\n[10,] 7.377412 7.593858 0.2164465 0.04540947\n\n\nNext, we can visualize the plot by using fviz_gap_stat() of factoextra package:\n\nfviz_gap_stat(gap_stat)\n\n\n\n\nFrom the above graph, we can see that the recommended number of clusters to retain is 1. However, it is not logical to retain just 1 cluster. In examining the gap statistics graph, we found that with k=6 (6-cluster) gives the largest gap statistics and should be the next best number of clusters to pick.\n\n\n\nInterpreting the dendograms\nIn the below code chunks, the dendogram was drawn with a border around the selected clusters by using rect.hclust() or R stats. The border argument is used to specify the border colors for the rectangles.\n\nplot(hclust_ward,cex=0.6)\nrect.hclust(hclust_ward,k=6,border=2:5)\n\n\n\n\n\n\nVisually driven hierarchical clustering analysis\nIn this section, we learn how to perform visually-driven hierarchical clustering analysis (both interactive and static cluster heatmap) with heatmaply package.\n\nTransforming data frame into matrix\nThe below code chunk helps transform shan_ict data frame into a matrix in order to make a heatmap:\n\nshan_ict_mat<-data.matrix(shan_ict)\n\n\n\nPlotting interactive cluster heatmap using heatmaply()\nIn the below code chunks, heatmaply() function is used to build an interactive cluster heatmap.\n\nheatmaply(normalize(shan_ict_mat),Colv=NA,dist_method = \"euclidean\",hclust_method = \"ward.D\",seriate=\"OLO\",colors=Blues,k_row=6,margins=c(NA,200,60,NA),fontsize_row = 4,fontsize_col = 5,main=\"Geographic Segmentation of Shan State by ICT Indicators\",xlab=\"ICT Indicator\",ylab=\"Townships of Shan State\")\n\n\n\n\n\n\n\nMapping the clusters formed\nIn the below code chunks, cutree() of R base will be used to derive a 6-cluster model.\n\ngroups<-as.factor(cutree(hclust_ward,k=6))\n\nThe output is called groups and it is a list object.\nIn order to visualize the clusters, the groups object needs to be appended onto shan_sf object.\nThe below code chunks perform 3 tasks:\n\nthe groups list object will be converted into a matrix;\ncbind() appends groups object onto shan_sf to produce a simple feature object called shan_sf_cluster and;\nrename() of dplyr package is used to rename as.matrix.groups. field to CLUSTER\n\n\nshan_sf_cluster<-cbind(shan_sf,as.matrix(groups))%>%\n  rename(`CLUSTER`=`as.matrix.groups.`)\n\nNext, we use qtm() function to plot the choropleth map showing the cluster formed.\n\nqtm(shan_sf_cluster,\"CLUSTER\")\n\n\n\n\nThe above choropleth map shows that clusters are very fragmented. This is one of the limitation when non-spatial clustering algorithm such as hierarchical cluster analysis method is used."
  },
  {
    "objectID": "Hands-on_Ex3/Hands-on_Ex3.html#spatially-constrained-clustering-skater-approach",
    "href": "Hands-on_Ex3/Hands-on_Ex3.html#spatially-constrained-clustering-skater-approach",
    "title": "Hands-on Exercise 3: Geographical Segmentation with Spatially Constrained Clustering Techniques",
    "section": "Spatially Constrained Clustering-SKATER approach",
    "text": "Spatially Constrained Clustering-SKATER approach\n\nConverting into SpatialPolygonsDataFrame\nThe code chunks below use as_Spatial() of sf package to convert shan_sf into a SpatialPolygonsDataFrame called shan_sp. Note that skater() function only supports sp object.\n\nshan_sp<-as_Spatial(shan_sf)\n\n\n\nComputing Neighbors List\nNext, poly2nb() function of spdep package will be used to compute the neighbors list from polygon list:\n\nshan.nb<-poly2nb(shan_sp)\nsummary(shan.nb)\n\nNeighbour list object:\nNumber of regions: 55 \nNumber of nonzero links: 264 \nPercentage nonzero weights: 8.727273 \nAverage number of links: 4.8 \nLink number distribution:\n\n 2  3  4  5  6  7  8  9 \n 5  9  7 21  4  3  5  1 \n5 least connected regions:\n3 5 7 9 47 with 2 links\n1 most connected region:\n8 with 9 links\n\n\nNext, we will plot both the neighbor list and the community area boundaries as well. The below code chunks performs these operations:\n\nFirst, it plots the boundaries of the community area.\nSecond, it plots the neighbors list object, with coordinates applied to the SpatialPolygonsDataFrame to extract the centroids of the polygons. These are used as nodes for the graph. The color is also set to blue and add=TRUE means plotting the network on top of the boundaries.\n\n\nplot(shan_sp,border=grey(.5))\nplot(shan.nb,coordinates(shan_sp),col=\"blue\",add=TRUE)\n\n\n\n\nNote that if we plot the network first, followed by boundaries, some of the areas will be clipped. This is because the plotting area is determined by the characteristics of the first plot. In this example, because the boundary map extends further than the graph, we plot it first.\n\n\nComputing minimum spanning tree\n\nCalculating edge costs\nnbcosts() of spdep package is used to compute the cost of each edge, which is the distance between its nodes.\n\nlcosts<-nbcosts(shan.nb,shan_ict)\n\nNext, we will convert the neighbors list into a list weights object by specifying the newly derived lcosts as the weights. In order to do so, we will use nb2listw() function of spdep package. We also specify style argument as B to make sure that the cost values are not row-standardized.\n\nshan.w<-nb2listw(shan.nb,lcosts,style=\"B\")\nsummary(shan.w)\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 55 \nNumber of nonzero links: 264 \nPercentage nonzero weights: 8.727273 \nAverage number of links: 4.8 \nLink number distribution:\n\n 2  3  4  5  6  7  8  9 \n 5  9  7 21  4  3  5  1 \n5 least connected regions:\n3 5 7 9 47 with 2 links\n1 most connected region:\n8 with 9 links\n\nWeights style: B \nWeights constants summary:\n   n   nn       S0       S1        S2\nB 55 3025 76267.65 58260785 522016004\n\n\n\n\nComputing the minimum spanning tree\nThe minimum spanning tree is computed by mean of the mstree() of spdep package shown in the below code chunks:\n\nshan.mst<-mstree(shan.w)\n\nAfter computing the MST, we can use class() to check its class and dim() to check its dimensions.\n\nclass(shan.mst)\n\n[1] \"mst\"    \"matrix\"\n\n\n\ndim(shan.mst)\n\n[1] 54  3\n\n\nNote that the dimension is 54, not 55. This is because the minimum spanning tree consists (n-1) edges/links in order to traverse all the nodes.\nWe can also display the content of shan.mst by using head() as shown below.\n\nhead(shan.mst)\n\n     [,1] [,2]      [,3]\n[1,]   31   25 229.44658\n[2,]   25   10 163.95741\n[3,]   10    1 144.02475\n[4,]   10    9 157.04230\n[5,]    9    8  90.82891\n[6,]    8    6 140.01101\n\n\nNext, we plot MST together with the township boundaries. We can see that the initial neighbors list has been simplified to just one edge connecting each of the nodes, while parsing through all the nodes.\n\nplot(shan_sp,border=grey(.5))\nplot.mst(shan.mst,coordinates(shan_sp),col=\"blue\",cex.labels = 0.7,cex.circles = 0.005,add=TRUE)\n\n\n\n\n\n\n\nComputing spatially constrained clusters using SKATER method\nThe code chunks below compute the spatially constrained clusters using skater() of spdep package.\n\nclust6<-skater(edges=shan.mst[,1:2],data=shan_ict,method=\"euclidean\",ncuts=5)\n\nThe skater() function takes 3 mandatory arguments:\n\nFirst 2 columns of the shan.MST matrix (not the cost)\nData matrix (to update the costs as units are being grouped)\nNumber of cuts, which is set to number of clusters-1\n\nWe can examine the contents of clust6, which is an object of class skater.\n\nstr(clust6)\n\nList of 8\n $ groups      : num [1:55] 3 3 6 3 3 3 3 3 3 3 ...\n $ edges.groups:List of 6\n  ..$ :List of 3\n  .. ..$ node: num [1:22] 13 48 54 55 45 37 34 16 25 31 ...\n  .. ..$ edge: num [1:21, 1:3] 48 55 54 37 34 16 45 31 13 13 ...\n  .. ..$ ssw : num 3423\n  ..$ :List of 3\n  .. ..$ node: num [1:18] 47 27 53 38 42 15 41 51 43 32 ...\n  .. ..$ edge: num [1:17, 1:3] 53 15 42 38 41 51 15 27 15 43 ...\n  .. ..$ ssw : num 3759\n  ..$ :List of 3\n  .. ..$ node: num [1:11] 2 6 8 1 36 4 10 9 46 5 ...\n  .. ..$ edge: num [1:10, 1:3] 6 1 8 36 4 6 8 10 10 9 ...\n  .. ..$ ssw : num 1458\n  ..$ :List of 3\n  .. ..$ node: num [1:2] 44 20\n  .. ..$ edge: num [1, 1:3] 44 20 95\n  .. ..$ ssw : num 95\n  ..$ :List of 3\n  .. ..$ node: num 23\n  .. ..$ edge: num[0 , 1:3] \n  .. ..$ ssw : num 0\n  ..$ :List of 3\n  .. ..$ node: num 3\n  .. ..$ edge: num[0 , 1:3] \n  .. ..$ ssw : num 0\n $ not.prune   : NULL\n $ candidates  : int [1:6] 1 2 3 4 5 6\n $ ssto        : num 12613\n $ ssw         : num [1:6] 12613 10977 9962 9540 9123 ...\n $ crit        : num [1:2] 1 Inf\n $ vec.crit    : num [1:55] 1 1 1 1 1 1 1 1 1 1 ...\n - attr(*, \"class\")= chr \"skater\"\n\n\nWe can check the cluster assignment by using the below code chunks:\n\nccs6<-clust6$groups\nccs6\n\n [1] 3 3 6 3 3 3 3 3 3 3 2 1 1 1 2 1 1 1 2 4 1 2 5 1 1 1 2 1 2 2 1 2 2 1 1 3 1 2\n[39] 2 2 2 2 2 4 1 3 2 1 1 1 2 1 2 1 1\n\n\nWe can also find out how many observations in each cluster by means of the table command.\n\ntable(ccs6)\n\nccs6\n 1  2  3  4  5  6 \n22 18 11  2  1  1 \n\n\nLastly, we can plot the pruned tree that shows the five clusters on top of the township boundaries.\n\nplot(shan_sp,border=gray(.5))\nplot(clust6,coordinates(shan_sp),cex.lab=.7,groups.colors=c(\"red\",\"green\",\"blue\",\"brown\",\"pink\"),cex.circles=0.005,add=TRUE)\n\nWarning in segments(coords[id1, 1], coords[id1, 2], coords[id2, 1],\ncoords[id2, : \"add\" is not a graphical parameter\n\nWarning in segments(coords[id1, 1], coords[id1, 2], coords[id2, 1],\ncoords[id2, : \"add\" is not a graphical parameter\n\nWarning in segments(coords[id1, 1], coords[id1, 2], coords[id2, 1],\ncoords[id2, : \"add\" is not a graphical parameter\n\nWarning in segments(coords[id1, 1], coords[id1, 2], coords[id2, 1],\ncoords[id2, : \"add\" is not a graphical parameter\n\n\n\n\n\n\n\nVisualizing the clusters in choropleth map\nThe code chunk below is used to plot the newly derived clusters by using SKATER method.\n\ngroups_mat<-as.matrix(clust6$groups)\nshan_sf_spatialcluster<-cbind(shan_sf_cluster,as.factor(groups_mat))%>%\n  rename(`SP_CLUSTER`=`as.factor.groups_mat.`)\nqtm(shan_sf_spatialcluster,\"SP_CLUSTER\")\n\n\n\n\nFor easy comparison, we can plot the hierarchical clustering and spatially constrained hierachical clustering maps next to each other:\n\nhclust.map<-qtm(shan_sf_cluster,\"CLUSTER\")+\n  tm_borders(alpha=0.5)\nshclust.map<-qtm(shan_sf_spatialcluster,\"SP_CLUSTER\")+\n  tm_borders(alpha=0.5)\ntmap_arrange(hclust.map,shclust.map,asp=NA,ncol=2)\n\nWarning: One tm layer group has duplicated layer types, which are omitted. To\ndraw multiple layers of the same type, use multiple layer groups (i.e. specify\ntm_shape prior to each of them).\n\nWarning: One tm layer group has duplicated layer types, which are omitted. To\ndraw multiple layers of the same type, use multiple layer groups (i.e. specify\ntm_shape prior to each of them).\n\n\n\n\n\nWe notice that the clusters are no longer fragmented."
  },
  {
    "objectID": "Hands-on_Ex4/Hands-on_Ex4.html",
    "href": "Hands-on_Ex4/Hands-on_Ex4.html",
    "title": "Hands-on Exercise 4: Calibrating Hedonic Pricing Model for Private Highrise Property with GWR Method",
    "section": "",
    "text": "In this hands-on exercise, we will learn how to build hedonic pricing models by using Geographically weighted regression (GWR) methods. GWR is\na spatial statistical technique that takes non-stationary variables into consideration (e.g., climate; demographic factors; physical environment characteristics) and models the local relationships between these independent variables and an outcome of interest (also known as dependent variable).\nIn our example, the dependent variable is the resale prices of condominium in 2015. The independent variables are divided into either structural and locational."
  },
  {
    "objectID": "Hands-on_Ex4/Hands-on_Ex4.html#getting-started",
    "href": "Hands-on_Ex4/Hands-on_Ex4.html#getting-started",
    "title": "Hands-on Exercise 4: Calibrating Hedonic Pricing Model for Private Highrise Property with GWR Method",
    "section": "Getting Started",
    "text": "Getting Started\nThe below code chunks install and load the following packages in R environment:\n\npacman::p_load(olsrr, corrplot, ggpubr, sf, spdep, GWmodel, tmap, tidyverse, gtsummary)\n\nR package for building OLS and performing diagnostics tests/test assumption:\n\noslrr\n\nR package for calibrating geographical weighted family of models\n\nGW model\n\nR package for multivariate data visualisation and analysis\n\ncorrplot\n\nSpatial data handling\n\nsf\n\nAttribute data handling\n\ntidyverse, especially readr, ggplot2, and dplyr\n\nChoropleth mapping\n\ntmap"
  },
  {
    "objectID": "Hands-on_Ex4/Hands-on_Ex4.html#geospatial-data-wrangling",
    "href": "Hands-on_Ex4/Hands-on_Ex4.html#geospatial-data-wrangling",
    "title": "Hands-on Exercise 4: Calibrating Hedonic Pricing Model for Private Highrise Property with GWR Method",
    "section": "Geospatial Data Wrangling",
    "text": "Geospatial Data Wrangling\n\nImporting geospatial data\nThe code chunks below import geospatial data into R environment. The data is in ESRI shapefile and consists of URA Master Plan 2014’s planning subzone boundaries. GIS data is in svy21 projected coordinates system.\n\nmpsz<-st_read(dsn=\"data/geospatial\",layer=\"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `C:\\thaorocket\\ISS624\\Hands-on_Ex4\\data\\geospatial' using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\nThe above summary shows that the R object is called mpsz and is in sf format with 323 rows and 15 columns. The geometry type is multipolygon. Projected CRS is svy21 and there is no information on EPSG.\n\n\nUpdating CRS information\nThe code chunk below updates the newly import mpsz object with the correct EPSG code of 3414.\n\nmpsz_svy21<-st_transform(mpsz,crs=3414)\n\nAfter transforming the coordinates system of the data, we can use st_crs() function of sf package to verify the projection system:\n\nst_crs(mpsz_svy21)\n\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n\n\nNotice that the EPSG code is now 3414.\nNow, in order to view the extent of mpsz_svy21, we use st_bbox() of sf package:\n\nst_bbox(mpsz_svy21)\n\n     xmin      ymin      xmax      ymax \n 2667.538 15748.721 56396.440 50256.334"
  },
  {
    "objectID": "Hands-on_Ex4/Hands-on_Ex4.html#aspatial-data-wrangling",
    "href": "Hands-on_Ex4/Hands-on_Ex4.html#aspatial-data-wrangling",
    "title": "Hands-on Exercise 4: Calibrating Hedonic Pricing Model for Private Highrise Property with GWR Method",
    "section": "Aspatial Data Wrangling",
    "text": "Aspatial Data Wrangling\n\nImporting the aspatial data\nThe code chunks below is used to import csv file into R environment as tibble data frame . In this example, the file we use is called the Condo_resale_2015 and the new data frame will be called condo_resale.\n\ncondo_resale<-read_csv(\"data/aspatial/Condo_resale_2015.csv\")\n\nRows: 1436 Columns: 23\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\ndbl (23): LATITUDE, LONGITUDE, POSTCODE, SELLING_PRICE, AREA_SQM, AGE, PROX_...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nAfter importing the data into R, we can use glimpse() to display the data structure.\n\nglimpse(condo_resale)\n\nRows: 1,436\nColumns: 23\n$ LATITUDE             <dbl> 1.287145, 1.328698, 1.313727, 1.308563, 1.321437,…\n$ LONGITUDE            <dbl> 103.7802, 103.8123, 103.7971, 103.8247, 103.9505,…\n$ POSTCODE             <dbl> 118635, 288420, 267833, 258380, 467169, 466472, 3…\n$ SELLING_PRICE        <dbl> 3000000, 3880000, 3325000, 4250000, 1400000, 1320…\n$ AREA_SQM             <dbl> 309, 290, 248, 127, 145, 139, 218, 141, 165, 168,…\n$ AGE                  <dbl> 30, 32, 33, 7, 28, 22, 24, 24, 27, 31, 17, 22, 6,…\n$ PROX_CBD             <dbl> 7.941259, 6.609797, 6.898000, 4.038861, 11.783402…\n$ PROX_CHILDCARE       <dbl> 0.16597932, 0.28027246, 0.42922669, 0.39473543, 0…\n$ PROX_ELDERLYCARE     <dbl> 2.5198118, 1.9333338, 0.5021395, 1.9910316, 1.121…\n$ PROX_URA_GROWTH_AREA <dbl> 6.618741, 7.505109, 6.463887, 4.906512, 6.410632,…\n$ PROX_HAWKER_MARKET   <dbl> 1.76542207, 0.54507614, 0.37789301, 1.68259969, 0…\n$ PROX_KINDERGARTEN    <dbl> 0.05835552, 0.61592412, 0.14120309, 0.38200076, 0…\n$ PROX_MRT             <dbl> 0.5607188, 0.6584461, 0.3053433, 0.6910183, 0.528…\n$ PROX_PARK            <dbl> 1.1710446, 0.1992269, 0.2779886, 0.9832843, 0.116…\n$ PROX_PRIMARY_SCH     <dbl> 1.6340256, 0.9747834, 1.4715016, 1.4546324, 0.709…\n$ PROX_TOP_PRIMARY_SCH <dbl> 3.3273195, 0.9747834, 1.4715016, 2.3006394, 0.709…\n$ PROX_SHOPPING_MALL   <dbl> 2.2102717, 2.9374279, 1.2256850, 0.3525671, 1.307…\n$ PROX_SUPERMARKET     <dbl> 0.9103958, 0.5900617, 0.4135583, 0.4162219, 0.581…\n$ PROX_BUS_STOP        <dbl> 0.10336166, 0.28673408, 0.28504777, 0.29872340, 0…\n$ NO_Of_UNITS          <dbl> 18, 20, 27, 30, 30, 31, 32, 32, 32, 32, 34, 34, 3…\n$ FAMILY_FRIENDLY      <dbl> 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0…\n$ FREEHOLD             <dbl> 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1…\n$ LEASEHOLD_99YR       <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n\n\nWe also can check on the coordinates, longitude and latitude respectively:\n\nhead(condo_resale$LONGITUDE)\n\n[1] 103.7802 103.8123 103.7971 103.8247 103.9505 103.9386\n\n\n\nhead(condo_resale$LATITUDE)\n\n[1] 1.287145 1.328698 1.313727 1.308563 1.321437 1.314198\n\n\nNext, we can use summary() function to display the summary statistics of condo_resale tibble data frame:\n\nsummary(condo_resale)\n\n    LATITUDE       LONGITUDE        POSTCODE      SELLING_PRICE     \n Min.   :1.240   Min.   :103.7   Min.   : 18965   Min.   :  540000  \n 1st Qu.:1.309   1st Qu.:103.8   1st Qu.:259849   1st Qu.: 1100000  \n Median :1.328   Median :103.8   Median :469298   Median : 1383222  \n Mean   :1.334   Mean   :103.8   Mean   :440439   Mean   : 1751211  \n 3rd Qu.:1.357   3rd Qu.:103.9   3rd Qu.:589486   3rd Qu.: 1950000  \n Max.   :1.454   Max.   :104.0   Max.   :828833   Max.   :18000000  \n    AREA_SQM          AGE           PROX_CBD       PROX_CHILDCARE    \n Min.   : 34.0   Min.   : 0.00   Min.   : 0.3869   Min.   :0.004927  \n 1st Qu.:103.0   1st Qu.: 5.00   1st Qu.: 5.5574   1st Qu.:0.174481  \n Median :121.0   Median :11.00   Median : 9.3567   Median :0.258135  \n Mean   :136.5   Mean   :12.14   Mean   : 9.3254   Mean   :0.326313  \n 3rd Qu.:156.0   3rd Qu.:18.00   3rd Qu.:12.6661   3rd Qu.:0.368293  \n Max.   :619.0   Max.   :37.00   Max.   :19.1804   Max.   :3.465726  \n PROX_ELDERLYCARE  PROX_URA_GROWTH_AREA PROX_HAWKER_MARKET PROX_KINDERGARTEN \n Min.   :0.05451   Min.   :0.2145       Min.   :0.05182    Min.   :0.004927  \n 1st Qu.:0.61254   1st Qu.:3.1643       1st Qu.:0.55245    1st Qu.:0.276345  \n Median :0.94179   Median :4.6186       Median :0.90842    Median :0.413385  \n Mean   :1.05351   Mean   :4.5981       Mean   :1.27987    Mean   :0.458903  \n 3rd Qu.:1.35122   3rd Qu.:5.7550       3rd Qu.:1.68578    3rd Qu.:0.578474  \n Max.   :3.94916   Max.   :9.1554       Max.   :5.37435    Max.   :2.229045  \n    PROX_MRT         PROX_PARK       PROX_PRIMARY_SCH  PROX_TOP_PRIMARY_SCH\n Min.   :0.05278   Min.   :0.02906   Min.   :0.07711   Min.   :0.07711     \n 1st Qu.:0.34646   1st Qu.:0.26211   1st Qu.:0.44024   1st Qu.:1.34451     \n Median :0.57430   Median :0.39926   Median :0.63505   Median :1.88213     \n Mean   :0.67316   Mean   :0.49802   Mean   :0.75471   Mean   :2.27347     \n 3rd Qu.:0.84844   3rd Qu.:0.65592   3rd Qu.:0.95104   3rd Qu.:2.90954     \n Max.   :3.48037   Max.   :2.16105   Max.   :3.92899   Max.   :6.74819     \n PROX_SHOPPING_MALL PROX_SUPERMARKET PROX_BUS_STOP       NO_Of_UNITS    \n Min.   :0.0000     Min.   :0.0000   Min.   :0.001595   Min.   :  18.0  \n 1st Qu.:0.5258     1st Qu.:0.3695   1st Qu.:0.098356   1st Qu.: 188.8  \n Median :0.9357     Median :0.5687   Median :0.151710   Median : 360.0  \n Mean   :1.0455     Mean   :0.6141   Mean   :0.193974   Mean   : 409.2  \n 3rd Qu.:1.3994     3rd Qu.:0.7862   3rd Qu.:0.220466   3rd Qu.: 590.0  \n Max.   :3.4774     Max.   :2.2441   Max.   :2.476639   Max.   :1703.0  \n FAMILY_FRIENDLY     FREEHOLD      LEASEHOLD_99YR  \n Min.   :0.0000   Min.   :0.0000   Min.   :0.0000  \n 1st Qu.:0.0000   1st Qu.:0.0000   1st Qu.:0.0000  \n Median :0.0000   Median :0.0000   Median :0.0000  \n Mean   :0.4868   Mean   :0.4227   Mean   :0.4882  \n 3rd Qu.:1.0000   3rd Qu.:1.0000   3rd Qu.:1.0000  \n Max.   :1.0000   Max.   :1.0000   Max.   :1.0000  \n\n\nConverting aspatial data frame into an sf object\nCurrently the condo_resale object is in tibble data frame object and we would like to convert it into sf data frame. We can do so by using st_as_sf() of sf package.\n\ncondo_resale.sf<-st_as_sf(condo_resale,coords = c(\"LONGITUDE\",\"LATITUDE\"),crs=4326)%>%\n  st_transform(crs=3414)\n\nNotice that st_transform() in the above code chunks is used to transform from wgs84 (crs is 4326) to svy21 (crs is 3414).\nNext, we can list the content of condo_resale.sf object.\n\nhead(condo_resale.sf)\n\nSimple feature collection with 6 features and 21 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 22085.12 ymin: 29951.54 xmax: 41042.56 ymax: 34546.2\nProjected CRS: SVY21 / Singapore TM\n# A tibble: 6 × 22\n  POSTCODE SELLI…¹ AREA_…²   AGE PROX_…³ PROX_…⁴ PROX_…⁵ PROX_…⁶ PROX_…⁷ PROX_…⁸\n     <dbl>   <dbl>   <dbl> <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>\n1   118635 3000000     309    30    7.94   0.166   2.52     6.62   1.77   0.0584\n2   288420 3880000     290    32    6.61   0.280   1.93     7.51   0.545  0.616 \n3   267833 3325000     248    33    6.90   0.429   0.502    6.46   0.378  0.141 \n4   258380 4250000     127     7    4.04   0.395   1.99     4.91   1.68   0.382 \n5   467169 1400000     145    28   11.8    0.119   1.12     6.41   0.565  0.461 \n6   466472 1320000     139    22   10.3    0.125   0.789    5.09   0.781  0.0994\n# … with 12 more variables: PROX_MRT <dbl>, PROX_PARK <dbl>,\n#   PROX_PRIMARY_SCH <dbl>, PROX_TOP_PRIMARY_SCH <dbl>,\n#   PROX_SHOPPING_MALL <dbl>, PROX_SUPERMARKET <dbl>, PROX_BUS_STOP <dbl>,\n#   NO_Of_UNITS <dbl>, FAMILY_FRIENDLY <dbl>, FREEHOLD <dbl>,\n#   LEASEHOLD_99YR <dbl>, geometry <POINT [m]>, and abbreviated variable names\n#   ¹​SELLING_PRICE, ²​AREA_SQM, ³​PROX_CBD, ⁴​PROX_CHILDCARE, ⁵​PROX_ELDERLYCARE,\n#   ⁶​PROX_URA_GROWTH_AREA, ⁷​PROX_HAWKER_MARKET, ⁸​PROX_KINDERGARTEN"
  },
  {
    "objectID": "Hands-on_Ex4/Hands-on_Ex4.html#exploratory-data-analysis-eda",
    "href": "Hands-on_Ex4/Hands-on_Ex4.html#exploratory-data-analysis-eda",
    "title": "Hands-on Exercise 4: Calibrating Hedonic Pricing Model for Private Highrise Property with GWR Method",
    "section": "Exploratory Data Analysis (EDA)",
    "text": "Exploratory Data Analysis (EDA)\n\nEDA using statistical graphics\nWe can plot the distribution of SELLING_PRICE by using appropriate EDA tool shown below. In this case we will use histogram.\n\nggplot(data=condo_resale.sf,aes(x=`SELLING_PRICE`))+\n  geom_histogram(bins=20,color=\"black\",fill=\"light blue\")\n\n\n\n\nThe above figure shows a right skewed distribution, which means that more condo units were transacted at lower prices.\nStatistically, the skewed distribution can be normalized by using log transformation. The below code chunks derive a new variable called LOG_SELLING_PRICE by using log transformation on the SELLING_PRICE variable.\n\ncondo_resale.sf<-condo_resale.sf%>%\n  mutate(`LOG_SELLING_PRICE`=log(`SELLING_PRICE`))\n\nNow, we can plot the new variable LOG_SELLING_PRICE using the code chunks below:\n\nggplot(data=condo_resale.sf,aes(x=`LOG_SELLING_PRICE`))+\n  geom_histogram(bins=20,color=\"black\",fill=\"light blue\")\n\n\n\n\nNotice that the distribution has become less skewed after the transformation.\n\n\nMultiple Histogram Plots distribution of variables\nIn this section, we will plot multiple histograms (known as trellis plot) by using ggarrange() of ggpubr package.\nThe below code chunks create 12 histograms based on various attributes of condo_resale.sf data frame. Then ggarrange() is used to organize these histograms into a 3 columns x 4 rows small multiple plot.\n\nAREA_SQM <- ggplot(data=condo_resale.sf, aes(x= `AREA_SQM`)) + \n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nAGE <- ggplot(data=condo_resale.sf, aes(x= `AGE`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_CBD <- ggplot(data=condo_resale.sf, aes(x= `PROX_CBD`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_CHILDCARE <- ggplot(data=condo_resale.sf, aes(x= `PROX_CHILDCARE`)) + \n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_ELDERLYCARE <- ggplot(data=condo_resale.sf, aes(x= `PROX_ELDERLYCARE`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_URA_GROWTH_AREA <- ggplot(data=condo_resale.sf, \n                               aes(x= `PROX_URA_GROWTH_AREA`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_HAWKER_MARKET <- ggplot(data=condo_resale.sf, aes(x= `PROX_HAWKER_MARKET`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_KINDERGARTEN <- ggplot(data=condo_resale.sf, aes(x= `PROX_KINDERGARTEN`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_MRT <- ggplot(data=condo_resale.sf, aes(x= `PROX_MRT`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_PARK <- ggplot(data=condo_resale.sf, aes(x= `PROX_PARK`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_PRIMARY_SCH <- ggplot(data=condo_resale.sf, aes(x= `PROX_PRIMARY_SCH`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_TOP_PRIMARY_SCH <- ggplot(data=condo_resale.sf, \n                               aes(x= `PROX_TOP_PRIMARY_SCH`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nggarrange(AREA_SQM, AGE, PROX_CBD, PROX_CHILDCARE, PROX_ELDERLYCARE, \n          PROX_URA_GROWTH_AREA, PROX_HAWKER_MARKET, PROX_KINDERGARTEN, PROX_MRT,\n          PROX_PARK, PROX_PRIMARY_SCH, PROX_TOP_PRIMARY_SCH,  \n          ncol = 3, nrow = 4)\n\n\n\n\n\n\nDrawing Statistical Point Map\nLastly, we use tmap package to reveal the geospatial distribution of condo resale prices in Singapore.\nFirst, we will turn on the interactive mode of tmap by using the below code chunks.\n\ntmap_mode(\"view\")\n\ntmap mode set to interactive viewing\n\n\nNext, the code chunks below create an interactive point symbol map.\n\ntmap_options(check.and.fix = TRUE)\ntm_shape(mpsz_svy21)+\n  tm_polygons() +\ntm_shape(condo_resale.sf)+\n  tm_dots(col=\"SELLING_PRICE\",alpha=0.6,style=\"quantile\")+\n  tm_view(set.zoom.limits = c(11,14))\n\nWarning: The shape mpsz_svy21 is invalid (after reprojection). See\nsf::st_is_valid\n\n\n\n\n\n\n\nSome may face the issue of broken polygons (Shape contains invalid polygons). We need to set tmap_options with check.and.fix argument to TRUE.\nThe point data won’t have topology issue. The issue is with polygons or lines. Therefore, we will insert the tmap_options() function after we read the polygons data in.\nCompare tm_dots() with tm_bubbles()\nIn the below code chunks, we use tm_bubbles() to see the difference between tm_dots() and tm_bubbles()\n\n\n\n\ntm_shape(mpsz_svy21)+\n  tm_polygons() +\ntm_shape(condo_resale.sf)+\n  tm_bubbles(col=\"SELLING_PRICE\",alpha=0.6,style=\"quantile\")+\n  tm_view(set.zoom.limits = c(11,14))\n\nWarning: The shape mpsz_svy21 is invalid (after reprojection). See\nsf::st_is_valid"
  },
  {
    "objectID": "Hands-on_Ex4/Hands-on_Ex4.html#hedonic-pricing-modeling-in-r",
    "href": "Hands-on_Ex4/Hands-on_Ex4.html#hedonic-pricing-modeling-in-r",
    "title": "Hands-on Exercise 4: Calibrating Hedonic Pricing Model for Private Highrise Property with GWR Method",
    "section": "Hedonic Pricing Modeling in R",
    "text": "Hedonic Pricing Modeling in R\nIn this section, we learn how to build hedonic pricing models for condo resale units using lm() of R base.\n\nSimple Linear Regression Method\nFirst, we build a simple linear regression model by using SELLING_PRICE as dependent variable and AREA_SQM as independent variable.\n\ncondo.slr<-lm(formula=SELLING_PRICE~AREA_SQM,data=condo_resale.sf)\n\nlm() returns an object of class “lm” for single variable or of class c(“mlm”,“lm”) for multiple variables.\nsummary() and anova() function of baseR can be used to obtain and print a summary and analysis of variance table of results.\n\nsummary(condo.slr)\n\n\nCall:\nlm(formula = SELLING_PRICE ~ AREA_SQM, data = condo_resale.sf)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-3695815  -391764   -87517   258900 13503875 \n\nCoefficients:\n             Estimate Std. Error t value Pr(>|t|)    \n(Intercept) -258121.1    63517.2  -4.064 5.09e-05 ***\nAREA_SQM      14719.0      428.1  34.381  < 2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 942700 on 1434 degrees of freedom\nMultiple R-squared:  0.4518,    Adjusted R-squared:  0.4515 \nF-statistic:  1182 on 1 and 1434 DF,  p-value: < 2.2e-16\n\n\nWith the above output, we can come up with a formula for this simple linear model:\n*y=-258121.1+14719.0x1*\nThe R-squared of 0.4518 explains that 45.18% of variations in SELLING_PRICE can be explained by variations in AREA_SQM.\nAlso, since p-value is smaller than 0.0001, we will reject the null hypothesis and infer that the above simple linear regression model is a good estimator of SELLING_PRICE.\nTo visualize the best fit curve, we can incorporate lm() as a method function in ggplot’s geometry as shown in the code chunks below:\n\nggplot(data=condo_resale.sf,  \n       aes(x=`AREA_SQM`, y=`SELLING_PRICE`)) +\n  geom_point() +\n  geom_smooth(method = lm)\n\n`geom_smooth()` using formula 'y ~ x'\n\n\n\n\n\nFrom the above figure, we notice that there were some outliers with relatively high selling price.\n\n\nMultiple Linear Regression Method\n\nVisualizing the relationships of the independent variables\nBefore building multiple linear regression model, it is necessary for us to check for multicollinearity to ensure that the quality of the model will not be compromised by not having independent variables correlated to each other.\nThe below code chunks use corrplot package to plot a scatterplot matrix of relationship between the independent variables in the condo_resale data frame.\nDo take note that we need to use the condo_resale data frame instead of condo_resale.sf data frame because this function does not need geometry data. Condo_resale.sf has geometry info. Therefore, it will prompt error.\n\ncorrplot(cor(condo_resale[,5:23]),diag=FALSE,order=\"AOE\",tl.pos=\"td\",tl.cex=0.5,method=\"number\",type=\"upper\")\n\n\n\n\nNotice that in the above code chunks, AOE was used under order argument. It orders the variables by using the angular order of eigenvectors method.\nFrom the above scatterplot matrix, we notice that FREEHOLD is highly correlated to LEASEHOLD_99YR. Therefore, we will need to exclude either one of the variables in our subsequent model building. In this case, we remove the LEASEHOLD_99YR.\n\n\n\nBuilding a hedonic pricing model using multiple linear regression method\nThe code chunks below derives a multiple linear regression model. For lm model, it is okay to use sf data frame.\n\ncondo.mlr <- lm(formula = SELLING_PRICE ~ AREA_SQM + AGE    + \n                  PROX_CBD + PROX_CHILDCARE + PROX_ELDERLYCARE +\n                  PROX_URA_GROWTH_AREA + PROX_HAWKER_MARKET + PROX_KINDERGARTEN + \n                  PROX_MRT  + PROX_PARK + PROX_PRIMARY_SCH + \n                  PROX_TOP_PRIMARY_SCH + PROX_SHOPPING_MALL + PROX_SUPERMARKET + \n                  PROX_BUS_STOP + NO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD, \n                data=condo_resale.sf)\nsummary(condo.mlr)\n\n\nCall:\nlm(formula = SELLING_PRICE ~ AREA_SQM + AGE + PROX_CBD + PROX_CHILDCARE + \n    PROX_ELDERLYCARE + PROX_URA_GROWTH_AREA + PROX_HAWKER_MARKET + \n    PROX_KINDERGARTEN + PROX_MRT + PROX_PARK + PROX_PRIMARY_SCH + \n    PROX_TOP_PRIMARY_SCH + PROX_SHOPPING_MALL + PROX_SUPERMARKET + \n    PROX_BUS_STOP + NO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD, \n    data = condo_resale.sf)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-3475964  -293923   -23069   241043 12260381 \n\nCoefficients:\n                       Estimate Std. Error t value Pr(>|t|)    \n(Intercept)           481728.40  121441.01   3.967 7.65e-05 ***\nAREA_SQM               12708.32     369.59  34.385  < 2e-16 ***\nAGE                   -24440.82    2763.16  -8.845  < 2e-16 ***\nPROX_CBD              -78669.78    6768.97 -11.622  < 2e-16 ***\nPROX_CHILDCARE       -351617.91  109467.25  -3.212  0.00135 ** \nPROX_ELDERLYCARE      171029.42   42110.51   4.061 5.14e-05 ***\nPROX_URA_GROWTH_AREA   38474.53   12523.57   3.072  0.00217 ** \nPROX_HAWKER_MARKET     23746.10   29299.76   0.810  0.41782    \nPROX_KINDERGARTEN     147468.99   82668.87   1.784  0.07466 .  \nPROX_MRT             -314599.68   57947.44  -5.429 6.66e-08 ***\nPROX_PARK             563280.50   66551.68   8.464  < 2e-16 ***\nPROX_PRIMARY_SCH      180186.08   65237.95   2.762  0.00582 ** \nPROX_TOP_PRIMARY_SCH    2280.04   20410.43   0.112  0.91107    \nPROX_SHOPPING_MALL   -206604.06   42840.60  -4.823 1.57e-06 ***\nPROX_SUPERMARKET      -44991.80   77082.64  -0.584  0.55953    \nPROX_BUS_STOP         683121.35  138353.28   4.938 8.85e-07 ***\nNO_Of_UNITS             -231.18      89.03  -2.597  0.00951 ** \nFAMILY_FRIENDLY       140340.77   47020.55   2.985  0.00289 ** \nFREEHOLD              359913.01   49220.22   7.312 4.38e-13 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 755800 on 1417 degrees of freedom\nMultiple R-squared:  0.6518,    Adjusted R-squared:  0.6474 \nF-statistic: 147.4 on 18 and 1417 DF,  p-value: < 2.2e-16\n\n\n\n\nPreparing Publication Quality Table: olsrr method\nFrom the above table summary, we can see that not all independent variables are statistically significant such as PROX_HAWKER_MARKET, PROX_KINDERGARTEN, PROX_TOP_PRIMARY_SCH, PROX_SUPERMARKET, etc. We will then need to revise the model by excluding those variables which are not statistically significant.\nThe below code chunks derives a revised multiple linear regression model:\n\ncondo.mlr1 <- lm(formula = SELLING_PRICE ~ AREA_SQM + AGE + \n                   PROX_CBD + PROX_CHILDCARE + PROX_ELDERLYCARE +\n                   PROX_URA_GROWTH_AREA + PROX_MRT  + PROX_PARK + \n                   PROX_PRIMARY_SCH + PROX_SHOPPING_MALL    + PROX_BUS_STOP + \n                   NO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD,\n                 data=condo_resale.sf)\nols_regress(condo.mlr1)\n\n                             Model Summary                               \n------------------------------------------------------------------------\nR                       0.807       RMSE                     755957.289 \nR-Squared               0.651       Coef. Var                    43.168 \nAdj. R-Squared          0.647       MSE                571471422208.591 \nPred R-Squared          0.638       MAE                      414819.628 \n------------------------------------------------------------------------\n RMSE: Root Mean Square Error \n MSE: Mean Square Error \n MAE: Mean Absolute Error \n\n                                     ANOVA                                       \n--------------------------------------------------------------------------------\n                    Sum of                                                      \n                   Squares          DF         Mean Square       F         Sig. \n--------------------------------------------------------------------------------\nRegression    1.512586e+15          14        1.080418e+14    189.059    0.0000 \nResidual      8.120609e+14        1421    571471422208.591                      \nTotal         2.324647e+15        1435                                          \n--------------------------------------------------------------------------------\n\n                                               Parameter Estimates                                                \n-----------------------------------------------------------------------------------------------------------------\n               model           Beta    Std. Error    Std. Beta       t        Sig           lower          upper \n-----------------------------------------------------------------------------------------------------------------\n         (Intercept)     527633.222    108183.223                   4.877    0.000     315417.244     739849.200 \n            AREA_SQM      12777.523       367.479        0.584     34.771    0.000      12056.663      13498.382 \n                 AGE     -24687.739      2754.845       -0.167     -8.962    0.000     -30091.739     -19283.740 \n            PROX_CBD     -77131.323      5763.125       -0.263    -13.384    0.000     -88436.469     -65826.176 \n      PROX_CHILDCARE    -318472.751    107959.512       -0.084     -2.950    0.003    -530249.889    -106695.613 \n    PROX_ELDERLYCARE     185575.623     39901.864        0.090      4.651    0.000     107302.737     263848.510 \nPROX_URA_GROWTH_AREA      39163.254     11754.829        0.060      3.332    0.001      16104.571      62221.936 \n            PROX_MRT    -294745.107     56916.367       -0.112     -5.179    0.000    -406394.234    -183095.980 \n           PROX_PARK     570504.807     65507.029        0.150      8.709    0.000     442003.938     699005.677 \n    PROX_PRIMARY_SCH     159856.136     60234.599        0.062      2.654    0.008      41697.849     278014.424 \n  PROX_SHOPPING_MALL    -220947.251     36561.832       -0.115     -6.043    0.000    -292668.213    -149226.288 \n       PROX_BUS_STOP     682482.221    134513.243        0.134      5.074    0.000     418616.359     946348.082 \n         NO_Of_UNITS       -245.480        87.947       -0.053     -2.791    0.005       -418.000        -72.961 \n     FAMILY_FRIENDLY     146307.576     46893.021        0.057      3.120    0.002      54320.593     238294.560 \n            FREEHOLD     350599.812     48506.485        0.136      7.228    0.000     255447.802     445751.821 \n-----------------------------------------------------------------------------------------------------------------\n\n\nFrom the above summary, with adjusted R-square of 0.647, we are able to account for 64.7% of the variations in the dependent variable.\n\n\nPreparing Publication Quality Table: gtsummary method\nThe gtsummary package provides an elegant and flexible way to create publication quality summary tables in R.\nIn the code chunks below, tbl_regression() is used to create a well-formatted regression report.\n\ntbl_regression(condo.mlr1,intercept=TRUE)\n\n\n\n\n\n  \n  \n    \n      Characteristic\n      Beta\n      95% CI1\n      p-value\n    \n  \n  \n    (Intercept)\n527,633\n315,417, 739,849\n<0.001\n    AREA_SQM\n12,778\n12,057, 13,498\n<0.001\n    AGE\n-24,688\n-30,092, -19,284\n<0.001\n    PROX_CBD\n-77,131\n-88,436, -65,826\n<0.001\n    PROX_CHILDCARE\n-318,473\n-530,250, -106,696\n0.003\n    PROX_ELDERLYCARE\n185,576\n107,303, 263,849\n<0.001\n    PROX_URA_GROWTH_AREA\n39,163\n16,105, 62,222\n<0.001\n    PROX_MRT\n-294,745\n-406,394, -183,096\n<0.001\n    PROX_PARK\n570,505\n442,004, 699,006\n<0.001\n    PROX_PRIMARY_SCH\n159,856\n41,698, 278,014\n0.008\n    PROX_SHOPPING_MALL\n-220,947\n-292,668, -149,226\n<0.001\n    PROX_BUS_STOP\n682,482\n418,616, 946,348\n<0.001\n    NO_Of_UNITS\n-245\n-418, -73\n0.005\n    FAMILY_FRIENDLY\n146,308\n54,321, 238,295\n0.002\n    FREEHOLD\n350,600\n255,448, 445,752\n<0.001\n  \n  \n  \n    \n      1 CI = Confidence Interval\n    \n  \n\n\n\n\nWith the gt summary package, model statistics can be included in the summary table by either appending them to the report table by using add_glance_table() or adding them as a table source note by using add_glance_source_note() as shown in the below code chunks:\n\ntbl_regression(condo.mlr1, \n               intercept = TRUE) %>% \n  add_glance_source_note(\n    label = list(sigma ~ \"\\U03C3\"),\n    include = c(r.squared, adj.r.squared, \n                AIC, statistic,\n                p.value, sigma))\n\n\n\n\n\n  \n  \n    \n      Characteristic\n      Beta\n      95% CI1\n      p-value\n    \n  \n  \n    (Intercept)\n527,633\n315,417, 739,849\n<0.001\n    AREA_SQM\n12,778\n12,057, 13,498\n<0.001\n    AGE\n-24,688\n-30,092, -19,284\n<0.001\n    PROX_CBD\n-77,131\n-88,436, -65,826\n<0.001\n    PROX_CHILDCARE\n-318,473\n-530,250, -106,696\n0.003\n    PROX_ELDERLYCARE\n185,576\n107,303, 263,849\n<0.001\n    PROX_URA_GROWTH_AREA\n39,163\n16,105, 62,222\n<0.001\n    PROX_MRT\n-294,745\n-406,394, -183,096\n<0.001\n    PROX_PARK\n570,505\n442,004, 699,006\n<0.001\n    PROX_PRIMARY_SCH\n159,856\n41,698, 278,014\n0.008\n    PROX_SHOPPING_MALL\n-220,947\n-292,668, -149,226\n<0.001\n    PROX_BUS_STOP\n682,482\n418,616, 946,348\n<0.001\n    NO_Of_UNITS\n-245\n-418, -73\n0.005\n    FAMILY_FRIENDLY\n146,308\n54,321, 238,295\n0.002\n    FREEHOLD\n350,600\n255,448, 445,752\n<0.001\n  \n  \n    \n      R² = 0.651; Adjusted R² = 0.647; AIC = 42,967; Statistic = 189; p-value = <0.001; σ = 755,957\n    \n  \n  \n    \n      1 CI = Confidence Interval\n    \n  \n\n\n\n\nNotice that olsrr provide a very tidy table summary with Adjust R-square, etc.\nFrom the p-value we can look at the independent variables and compare with significance level of 0.05, we will know which variable to be removed.\nThe beta columns give us details such as for 1 unit increase in AREA_SQM, the selling price will increase by 12777.523 or for 1 unit decrease in age, the selling price will decrease by 24687.739.\nAt the same time, we also notice some interesting observations. For one unit increase in distance to MRT, the price will decrease by 2947745.107.\n\nTest for multicollinearity\nIn the code chunks below, the ols_vif_tol() function of olsrr package is used to test for any signs of multicollinearity on the independent variables.\n\nols_vif_tol(condo.mlr1)\n\n              Variables Tolerance      VIF\n1              AREA_SQM 0.8728554 1.145665\n2                   AGE 0.7071275 1.414172\n3              PROX_CBD 0.6356147 1.573280\n4        PROX_CHILDCARE 0.3066019 3.261559\n5      PROX_ELDERLYCARE 0.6598479 1.515501\n6  PROX_URA_GROWTH_AREA 0.7510311 1.331503\n7              PROX_MRT 0.5236090 1.909822\n8             PROX_PARK 0.8279261 1.207837\n9      PROX_PRIMARY_SCH 0.4524628 2.210126\n10   PROX_SHOPPING_MALL 0.6738795 1.483945\n11        PROX_BUS_STOP 0.3514118 2.845664\n12          NO_Of_UNITS 0.6901036 1.449058\n13      FAMILY_FRIENDLY 0.7244157 1.380423\n14             FREEHOLD 0.6931163 1.442759\n\n\n\n\nTest for Non-Linearity\nIn the code chunks below, the ols_plot_resid_fit() of olsrr package is used to perform linearity assumption test.\n\nols_plot_resid_fit(condo.mlr1)\n\n\n\n\nThe above figure shows that most of the data points are scattered around 0 line. Therefore, we can conclude that the relationships between the dependent variable and independent variables are linear.\n\n\nTest for Normality Assumption\nLastly, the code chunks below uses ols_plot_resid_hist() of olsrr package to perform normality assumption test.\n\nols_plot_resid_hist(condo.mlr1)\n\n\n\n\nThe above graph shows that the distribution of residuals of the multiple linear regression model resembles the normal distribution.\nHowever, in order to conclude if the residuals are normally distributed, we need to perform formal statistics tests. In order to do so, we can use this function ols_test_normality() of olsrr package shown in the below code chunks:\n\nols_test_normality(condo.mlr1)\n\nWarning in ks.test.default(y, \"pnorm\", mean(y), sd(y)): ties should not be\npresent for the Kolmogorov-Smirnov test\n\n\n-----------------------------------------------\n       Test             Statistic       pvalue  \n-----------------------------------------------\nShapiro-Wilk              0.6856         0.0000 \nKolmogorov-Smirnov        0.1366         0.0000 \nCramer-von Mises         121.0768        0.0000 \nAnderson-Darling         67.9551         0.0000 \n-----------------------------------------------\n\n\nThe summary table above shows that the p-values across all four tests are smaller than alpha value of 0.05. Hence, we will reject the null hypothesis and infer that there is sufficient evidence to conclude that the residuals are not normally distributed.\n\n\nTest for Spatial Autocorrelation\nFirst, we export the residual of the hedonic pricing model and save it as a data frame.\n\nmlr.output<-as.data.frame(condo.mlr1$residuals)\n\nFor the above code chunks, if we can check the contents of condo.mlr1, we can see that residuals is one of the field. If we add “$”, we can specifically choose this column. Notice that the newly created mlr.output data frame is in tibble data frame.\nNext, we will join the newly created mlr.output data frame with the condo_resale.sf object. Notice that we change the column name from condo.mlr1.residuals to MLR_RES.\n\ncondo_resale.res.sf <- cbind(condo_resale.sf, \n                        condo.mlr1$residuals) %>%\nrename(`MLR_RES` = `condo.mlr1.residuals`)\n\nNext, we will need to convert the condo_resale.res.sf from simple feature data frame into SpatialPointsDataFrame because spdep package can only process sp conformed spatial data objects.\nThe code chunks below will be used to perform the data conversion process.\n\ncondo_resale.sp <- as_Spatial(condo_resale.res.sf)\ncondo_resale.sp\n\nclass       : SpatialPointsDataFrame \nfeatures    : 1436 \nextent      : 14940.85, 43352.45, 24765.67, 48382.81  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \nvariables   : 23\nnames       : POSTCODE, SELLING_PRICE, AREA_SQM, AGE,    PROX_CBD, PROX_CHILDCARE, PROX_ELDERLYCARE, PROX_URA_GROWTH_AREA, PROX_HAWKER_MARKET, PROX_KINDERGARTEN,    PROX_MRT,   PROX_PARK, PROX_PRIMARY_SCH, PROX_TOP_PRIMARY_SCH, PROX_SHOPPING_MALL, ... \nmin values  :    18965,        540000,       34,   0, 0.386916393,    0.004927023,      0.054508623,          0.214539508,        0.051817113,       0.004927023, 0.052779424, 0.029064164,      0.077106132,          0.077106132,                  0, ... \nmax values  :   828833,       1.8e+07,      619,  37, 19.18042832,     3.46572633,      3.949157205,           9.15540001,        5.374348075,       2.229045366,  3.48037319,  2.16104919,      3.928989144,          6.748192062,        3.477433767, ... \n\n\nNext, we will use tmap package to display the distribution of residuals on an interactive map.\n\ntmap_mode(\"view\")\n\ntmap mode set to interactive viewing\n\n\nThe code chunks below creates an interactive point symbol map.\n\ntm_shape(mpsz_svy21)+\n  tmap_options(check.and.fix = TRUE) +\n  tm_polygons(alpha = 0.4) +\ntm_shape(condo_resale.res.sf) +  \n  tm_dots(col = \"MLR_RES\",\n          alpha = 0.6,\n          style=\"quantile\") +\n  tm_view(set.zoom.limits = c(11,14))\n\nWarning: The shape mpsz_svy21 is invalid (after reprojection). See\nsf::st_is_valid\n\n\nVariable(s) \"MLR_RES\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n\n\n\n\n\n\n\nWe then need to switch back to “plot” mode before continuing.\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\n\nThe above map shows there is some sign of spatial autocorrelation.\nWe will then use Moran’s I test to prove if our observation is true.\nFirst, we will compute the distance-based weight matrix by using dnearneigh() function of spdep package.\n\nnb <- dnearneigh(coordinates(condo_resale.sp), 0, 1500, longlat = FALSE)\nsummary(nb)\n\nNeighbour list object:\nNumber of regions: 1436 \nNumber of nonzero links: 66266 \nPercentage nonzero weights: 3.213526 \nAverage number of links: 46.14624 \nLink number distribution:\n\n  1   3   5   7   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24 \n  3   3   9   4   3  15  10  19  17  45  19   5  14  29  19   6  35  45  18  47 \n 25  26  27  28  29  30  31  32  33  34  35  36  37  38  39  40  41  42  43  44 \n 16  43  22  26  21  11   9  23  22  13  16  25  21  37  16  18   8  21   4  12 \n 45  46  47  48  49  50  51  52  53  54  55  56  57  58  59  60  61  62  63  64 \n  8  36  18  14  14  43  11  12   8  13  12  13   4   5   6  12  11  20  29  33 \n 65  66  67  68  69  70  71  72  73  74  75  76  77  78  79  80  81  82  83  84 \n 15  20  10  14  15  15  11  16  12  10   8  19  12  14   9   8   4  13  11   6 \n 85  86  87  88  89  90  91  92  93  94  95  96  97  98  99 100 101 102 103 104 \n  4   9   4   4   4   6   2  16   9   4   5   9   3   9   4   2   1   2   1   1 \n105 106 107 108 109 110 112 116 125 \n  1   5   9   2   1   3   1   1   1 \n3 least connected regions:\n193 194 277 with 1 link\n1 most connected region:\n285 with 125 links\n\n\nNext, nb2listw() of spdep package will be used to convert the output neighbors lists (i.e. nb) into spatial weights.\n\nnb_lw<-nb2listw(nb,style=\"W\")\nsummary(nb_lw)\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 1436 \nNumber of nonzero links: 66266 \nPercentage nonzero weights: 3.213526 \nAverage number of links: 46.14624 \nLink number distribution:\n\n  1   3   5   7   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24 \n  3   3   9   4   3  15  10  19  17  45  19   5  14  29  19   6  35  45  18  47 \n 25  26  27  28  29  30  31  32  33  34  35  36  37  38  39  40  41  42  43  44 \n 16  43  22  26  21  11   9  23  22  13  16  25  21  37  16  18   8  21   4  12 \n 45  46  47  48  49  50  51  52  53  54  55  56  57  58  59  60  61  62  63  64 \n  8  36  18  14  14  43  11  12   8  13  12  13   4   5   6  12  11  20  29  33 \n 65  66  67  68  69  70  71  72  73  74  75  76  77  78  79  80  81  82  83  84 \n 15  20  10  14  15  15  11  16  12  10   8  19  12  14   9   8   4  13  11   6 \n 85  86  87  88  89  90  91  92  93  94  95  96  97  98  99 100 101 102 103 104 \n  4   9   4   4   4   6   2  16   9   4   5   9   3   9   4   2   1   2   1   1 \n105 106 107 108 109 110 112 116 125 \n  1   5   9   2   1   3   1   1   1 \n3 least connected regions:\n193 194 277 with 1 link\n1 most connected region:\n285 with 125 links\n\nWeights style: W \nWeights constants summary:\n     n      nn   S0       S1       S2\nW 1436 2062096 1436 94.81916 5798.341\n\n\nNext, lm.morantest() of spdep package will be used to perform Moran’s I test for residual spatial autocorrelation.\n\nlm.morantest(condo.mlr1,nb_lw)\n\n\n    Global Moran I for regression residuals\n\ndata:  \nmodel: lm(formula = SELLING_PRICE ~ AREA_SQM + AGE + PROX_CBD +\nPROX_CHILDCARE + PROX_ELDERLYCARE + PROX_URA_GROWTH_AREA + PROX_MRT +\nPROX_PARK + PROX_PRIMARY_SCH + PROX_SHOPPING_MALL + PROX_BUS_STOP +\nNO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD, data = condo_resale.sf)\nweights: nb_lw\n\nMoran I statistic standard deviate = 24.366, p-value < 2.2e-16\nalternative hypothesis: greater\nsample estimates:\nObserved Moran I      Expectation         Variance \n    1.438876e-01    -5.487594e-03     3.758259e-05 \n\n\nThe Global Moran’s I test for residual spatial autocorrelation shows that its p-value is much less than the alpha value of 0.05. Therefore, we will reject the null hypothesis that the residuals are randomly distributed.\nSince the Observed Global Moran’s I is 0.1438876 which is greater than 0, we can infer that the residuals resemble cluster distribution."
  },
  {
    "objectID": "Hands-on_Ex4/Hands-on_Ex4.html#building-hedonic-pricing-models-using-gw-model",
    "href": "Hands-on_Ex4/Hands-on_Ex4.html#building-hedonic-pricing-models-using-gw-model",
    "title": "Hands-on Exercise 4: Calibrating Hedonic Pricing Model for Private Highrise Property with GWR Method",
    "section": "Building Hedonic Pricing Models using GW Model",
    "text": "Building Hedonic Pricing Models using GW Model\n\nBuilding Fixed Bandwidth GWR Model\n\nComputing fixed bandwidth\n\nbw.fixed <- bw.gwr(formula = SELLING_PRICE ~ AREA_SQM + AGE + PROX_CBD + \n                     PROX_CHILDCARE + PROX_ELDERLYCARE  + PROX_URA_GROWTH_AREA + \n                     PROX_MRT   + PROX_PARK + PROX_PRIMARY_SCH + \n                     PROX_SHOPPING_MALL + PROX_BUS_STOP + NO_Of_UNITS + \n                     FAMILY_FRIENDLY + FREEHOLD, \n                   data=condo_resale.sp, \n                   approach=\"CV\", \n                   kernel=\"gaussian\", \n                   adaptive=FALSE, \n                   longlat=FALSE)\n\nFixed bandwidth: 17660.96 CV score: 8.259118e+14 \nFixed bandwidth: 10917.26 CV score: 7.970454e+14 \nFixed bandwidth: 6749.419 CV score: 7.273273e+14 \nFixed bandwidth: 4173.553 CV score: 6.300006e+14 \nFixed bandwidth: 2581.58 CV score: 5.404958e+14 \nFixed bandwidth: 1597.687 CV score: 4.857515e+14 \nFixed bandwidth: 989.6077 CV score: 4.722431e+14 \nFixed bandwidth: 613.7939 CV score: 1.378294e+16 \nFixed bandwidth: 1221.873 CV score: 4.778717e+14 \nFixed bandwidth: 846.0596 CV score: 4.791629e+14 \nFixed bandwidth: 1078.325 CV score: 4.751406e+14 \nFixed bandwidth: 934.7772 CV score: 4.72518e+14 \nFixed bandwidth: 1023.495 CV score: 4.730305e+14 \nFixed bandwidth: 968.6643 CV score: 4.721317e+14 \nFixed bandwidth: 955.7206 CV score: 4.722072e+14 \nFixed bandwidth: 976.6639 CV score: 4.721387e+14 \nFixed bandwidth: 963.7202 CV score: 4.721484e+14 \nFixed bandwidth: 971.7199 CV score: 4.721293e+14 \nFixed bandwidth: 973.6083 CV score: 4.721309e+14 \nFixed bandwidth: 970.5527 CV score: 4.721295e+14 \nFixed bandwidth: 972.4412 CV score: 4.721296e+14 \nFixed bandwidth: 971.2741 CV score: 4.721292e+14 \nFixed bandwidth: 970.9985 CV score: 4.721293e+14 \nFixed bandwidth: 971.4443 CV score: 4.721292e+14 \nFixed bandwidth: 971.5496 CV score: 4.721293e+14 \nFixed bandwidth: 971.3793 CV score: 4.721292e+14 \nFixed bandwidth: 971.3391 CV score: 4.721292e+14 \nFixed bandwidth: 971.3143 CV score: 4.721292e+14 \nFixed bandwidth: 971.3545 CV score: 4.721292e+14 \nFixed bandwidth: 971.3296 CV score: 4.721292e+14 \nFixed bandwidth: 971.345 CV score: 4.721292e+14 \nFixed bandwidth: 971.3355 CV score: 4.721292e+14 \nFixed bandwidth: 971.3413 CV score: 4.721292e+14 \nFixed bandwidth: 971.3377 CV score: 4.721292e+14 \nFixed bandwidth: 971.34 CV score: 4.721292e+14 \nFixed bandwidth: 971.3405 CV score: 4.721292e+14 \nFixed bandwidth: 971.3408 CV score: 4.721292e+14 \nFixed bandwidth: 971.3403 CV score: 4.721292e+14 \nFixed bandwidth: 971.3406 CV score: 4.721292e+14 \nFixed bandwidth: 971.3404 CV score: 4.721292e+14 \nFixed bandwidth: 971.3405 CV score: 4.721292e+14 \nFixed bandwidth: 971.3405 CV score: 4.721292e+14 \n\n\nThe function will run multiple times until it stops at a value when there is no change/minimum change. The result shows that the recommended bandwidth is 971.3405 meter. The reason why it was in meter was due to projected coordinates system svy21 (which is in meter) that we use in this exercise.\n\n\nGWModel method-fixed bandwidth\n\ngwr.fixed <- gwr.basic(formula = SELLING_PRICE ~ AREA_SQM + AGE + PROX_CBD + \n                         PROX_CHILDCARE + PROX_ELDERLYCARE  + PROX_URA_GROWTH_AREA + \n                         PROX_MRT   + PROX_PARK + PROX_PRIMARY_SCH + \n                         PROX_SHOPPING_MALL + PROX_BUS_STOP + NO_Of_UNITS + \n                         FAMILY_FRIENDLY + FREEHOLD, \n                       data=condo_resale.sp, \n                       bw=bw.fixed, \n                       kernel = 'gaussian', \n                       longlat = FALSE)\n\nWarning in proj4string(data): CRS object has comment, which is lost in output; in tests, see\nhttps://cran.r-project.org/web/packages/sp/vignettes/CRS_warnings.html\n\n\nThe output is saved under gwrm class. The code below can be used to display the model output.\n\ngwr.fixed\n\n   ***********************************************************************\n   *                       Package   GWmodel                             *\n   ***********************************************************************\n   Program starts at: 2022-12-10 20:20:52 \n   Call:\n   gwr.basic(formula = SELLING_PRICE ~ AREA_SQM + AGE + PROX_CBD + \n    PROX_CHILDCARE + PROX_ELDERLYCARE + PROX_URA_GROWTH_AREA + \n    PROX_MRT + PROX_PARK + PROX_PRIMARY_SCH + PROX_SHOPPING_MALL + \n    PROX_BUS_STOP + NO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD, \n    data = condo_resale.sp, bw = bw.fixed, kernel = \"gaussian\", \n    longlat = FALSE)\n\n   Dependent (y) variable:  SELLING_PRICE\n   Independent variables:  AREA_SQM AGE PROX_CBD PROX_CHILDCARE PROX_ELDERLYCARE PROX_URA_GROWTH_AREA PROX_MRT PROX_PARK PROX_PRIMARY_SCH PROX_SHOPPING_MALL PROX_BUS_STOP NO_Of_UNITS FAMILY_FRIENDLY FREEHOLD\n   Number of data points: 1436\n   ***********************************************************************\n   *                    Results of Global Regression                     *\n   ***********************************************************************\n\n   Call:\n    lm(formula = formula, data = data)\n\n   Residuals:\n     Min       1Q   Median       3Q      Max \n-3470778  -298119   -23481   248917 12234210 \n\n   Coefficients:\n                          Estimate Std. Error t value Pr(>|t|)    \n   (Intercept)           527633.22  108183.22   4.877 1.20e-06 ***\n   AREA_SQM               12777.52     367.48  34.771  < 2e-16 ***\n   AGE                   -24687.74    2754.84  -8.962  < 2e-16 ***\n   PROX_CBD              -77131.32    5763.12 -13.384  < 2e-16 ***\n   PROX_CHILDCARE       -318472.75  107959.51  -2.950 0.003231 ** \n   PROX_ELDERLYCARE      185575.62   39901.86   4.651 3.61e-06 ***\n   PROX_URA_GROWTH_AREA   39163.25   11754.83   3.332 0.000885 ***\n   PROX_MRT             -294745.11   56916.37  -5.179 2.56e-07 ***\n   PROX_PARK             570504.81   65507.03   8.709  < 2e-16 ***\n   PROX_PRIMARY_SCH      159856.14   60234.60   2.654 0.008046 ** \n   PROX_SHOPPING_MALL   -220947.25   36561.83  -6.043 1.93e-09 ***\n   PROX_BUS_STOP         682482.22  134513.24   5.074 4.42e-07 ***\n   NO_Of_UNITS             -245.48      87.95  -2.791 0.005321 ** \n   FAMILY_FRIENDLY       146307.58   46893.02   3.120 0.001845 ** \n   FREEHOLD              350599.81   48506.48   7.228 7.98e-13 ***\n\n   ---Significance stars\n   Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 \n   Residual standard error: 756000 on 1421 degrees of freedom\n   Multiple R-squared: 0.6507\n   Adjusted R-squared: 0.6472 \n   F-statistic: 189.1 on 14 and 1421 DF,  p-value: < 2.2e-16 \n   ***Extra Diagnostic information\n   Residual sum of squares: 8.120609e+14\n   Sigma(hat): 752522.9\n   AIC:  42966.76\n   AICc:  42967.14\n   BIC:  41731.39\n   ***********************************************************************\n   *          Results of Geographically Weighted Regression              *\n   ***********************************************************************\n\n   *********************Model calibration information*********************\n   Kernel function: gaussian \n   Fixed bandwidth: 971.3405 \n   Regression points: the same locations as observations are used.\n   Distance metric: Euclidean distance metric is used.\n\n   ****************Summary of GWR coefficient estimates:******************\n                               Min.     1st Qu.      Median     3rd Qu.\n   Intercept            -3.5988e+07 -5.1998e+05  7.6780e+05  1.7412e+06\n   AREA_SQM              1.0003e+03  5.2758e+03  7.4740e+03  1.2301e+04\n   AGE                  -1.3475e+05 -2.0813e+04 -8.6260e+03 -3.7784e+03\n   PROX_CBD             -7.7047e+07 -2.3608e+05 -8.3600e+04  3.4646e+04\n   PROX_CHILDCARE       -6.0097e+06 -3.3667e+05 -9.7425e+04  2.9007e+05\n   PROX_ELDERLYCARE     -3.5000e+06 -1.5970e+05  3.1971e+04  1.9577e+05\n   PROX_URA_GROWTH_AREA -3.0170e+06 -8.2013e+04  7.0749e+04  2.2612e+05\n   PROX_MRT             -3.5282e+06 -6.5836e+05 -1.8833e+05  3.6922e+04\n   PROX_PARK            -1.2062e+06 -2.1732e+05  3.5383e+04  4.1335e+05\n   PROX_PRIMARY_SCH     -2.2695e+07 -1.7066e+05  4.8472e+04  5.1555e+05\n   PROX_SHOPPING_MALL   -7.2585e+06 -1.6684e+05 -1.0517e+04  1.5923e+05\n   PROX_BUS_STOP        -1.4676e+06 -4.5207e+04  3.7601e+05  1.1664e+06\n   NO_Of_UNITS          -1.3170e+03 -2.4822e+02 -3.0846e+01  2.5496e+02\n   FAMILY_FRIENDLY      -2.2749e+06 -1.1140e+05  7.6214e+03  1.6107e+05\n   FREEHOLD             -9.2067e+06  3.8073e+04  1.5169e+05  3.7528e+05\n                             Max.\n   Intercept            112793548\n   AREA_SQM                 21575\n   AGE                     434201\n   PROX_CBD               2704596\n   PROX_CHILDCARE         1654087\n   PROX_ELDERLYCARE      38867814\n   PROX_URA_GROWTH_AREA  78515730\n   PROX_MRT               3124316\n   PROX_PARK             18122425\n   PROX_PRIMARY_SCH       4637503\n   PROX_SHOPPING_MALL     1529952\n   PROX_BUS_STOP         11342182\n   NO_Of_UNITS              12907\n   FAMILY_FRIENDLY        1720744\n   FREEHOLD               6073636\n   ************************Diagnostic information*************************\n   Number of data points: 1436 \n   Effective number of parameters (2trace(S) - trace(S'S)): 438.3804 \n   Effective degrees of freedom (n-2trace(S) + trace(S'S)): 997.6196 \n   AICc (GWR book, Fotheringham, et al. 2002, p. 61, eq 2.33): 42263.61 \n   AIC (GWR book, Fotheringham, et al. 2002,GWR p. 96, eq. 4.22): 41632.36 \n   BIC (GWR book, Fotheringham, et al. 2002,GWR p. 61, eq. 2.34): 42515.71 \n   Residual sum of squares: 2.53407e+14 \n   R-square value:  0.8909912 \n   Adjusted R-square value:  0.8430417 \n\n   ***********************************************************************\n   Program stops at: 2022-12-10 20:20:53 \n\n\nThe reported AICc under GWR model is 42263.61 is higher than the reported AIC calculated under global multiple linear regression model. The reported R-square is 0.8430417, which is significantly better than the reported R-square calculated using the global multiple linear regression model of 0.6472.\n\n\n\nBuilding Adaptive Bandwidth GWR model\n\nComputing the adaptive bandwidth\nThe code chunks also use bw.gwr() function to compute the bandwidth. However, since we want to compute adaptive bandwidth, the adaptive argument has been changed to TRUE.\n\nbw.adaptive <- bw.gwr(formula = SELLING_PRICE ~ AREA_SQM + AGE  + \n                        PROX_CBD + PROX_CHILDCARE + PROX_ELDERLYCARE    + \n                        PROX_URA_GROWTH_AREA + PROX_MRT + PROX_PARK + \n                        PROX_PRIMARY_SCH + PROX_SHOPPING_MALL   + PROX_BUS_STOP + \n                        NO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD, \n                      data=condo_resale.sp, \n                      approach=\"CV\", \n                      kernel=\"gaussian\", \n                      adaptive=TRUE, \n                      longlat=FALSE)\n\nAdaptive bandwidth: 895 CV score: 7.952401e+14 \nAdaptive bandwidth: 561 CV score: 7.667364e+14 \nAdaptive bandwidth: 354 CV score: 6.953454e+14 \nAdaptive bandwidth: 226 CV score: 6.15223e+14 \nAdaptive bandwidth: 147 CV score: 5.674373e+14 \nAdaptive bandwidth: 98 CV score: 5.426745e+14 \nAdaptive bandwidth: 68 CV score: 5.168117e+14 \nAdaptive bandwidth: 49 CV score: 4.859631e+14 \nAdaptive bandwidth: 37 CV score: 4.646518e+14 \nAdaptive bandwidth: 30 CV score: 4.422088e+14 \nAdaptive bandwidth: 25 CV score: 4.430816e+14 \nAdaptive bandwidth: 32 CV score: 4.505602e+14 \nAdaptive bandwidth: 27 CV score: 4.462172e+14 \nAdaptive bandwidth: 30 CV score: 4.422088e+14 \n\n\nThis method will advise how many data points that we should use. The result shows that 30 is the recommended data points to be used.\n\n\nConstructing the adaptive bandwidth GWR model\nIn the below code chunks, we calibrate the GWR-based hedonic pricing model by using adaptive bandwidth and gaussian kernel.\n\ngwr.adaptive <- gwr.basic(formula = SELLING_PRICE ~ AREA_SQM + AGE + \n                            PROX_CBD + PROX_CHILDCARE + PROX_ELDERLYCARE + \n                            PROX_URA_GROWTH_AREA + PROX_MRT + PROX_PARK + \n                            PROX_PRIMARY_SCH + PROX_SHOPPING_MALL + PROX_BUS_STOP + \n                            NO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD, \n                          data=condo_resale.sp, bw=bw.adaptive, \n                          kernel = 'gaussian', \n                          adaptive=TRUE, \n                          longlat = FALSE)\n\nWarning in proj4string(data): CRS object has comment, which is lost in output; in tests, see\nhttps://cran.r-project.org/web/packages/sp/vignettes/CRS_warnings.html\n\n\nWe can display the model output by using the below code:\n\ngwr.adaptive\n\n   ***********************************************************************\n   *                       Package   GWmodel                             *\n   ***********************************************************************\n   Program starts at: 2022-12-10 20:21:01 \n   Call:\n   gwr.basic(formula = SELLING_PRICE ~ AREA_SQM + AGE + PROX_CBD + \n    PROX_CHILDCARE + PROX_ELDERLYCARE + PROX_URA_GROWTH_AREA + \n    PROX_MRT + PROX_PARK + PROX_PRIMARY_SCH + PROX_SHOPPING_MALL + \n    PROX_BUS_STOP + NO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD, \n    data = condo_resale.sp, bw = bw.adaptive, kernel = \"gaussian\", \n    adaptive = TRUE, longlat = FALSE)\n\n   Dependent (y) variable:  SELLING_PRICE\n   Independent variables:  AREA_SQM AGE PROX_CBD PROX_CHILDCARE PROX_ELDERLYCARE PROX_URA_GROWTH_AREA PROX_MRT PROX_PARK PROX_PRIMARY_SCH PROX_SHOPPING_MALL PROX_BUS_STOP NO_Of_UNITS FAMILY_FRIENDLY FREEHOLD\n   Number of data points: 1436\n   ***********************************************************************\n   *                    Results of Global Regression                     *\n   ***********************************************************************\n\n   Call:\n    lm(formula = formula, data = data)\n\n   Residuals:\n     Min       1Q   Median       3Q      Max \n-3470778  -298119   -23481   248917 12234210 \n\n   Coefficients:\n                          Estimate Std. Error t value Pr(>|t|)    \n   (Intercept)           527633.22  108183.22   4.877 1.20e-06 ***\n   AREA_SQM               12777.52     367.48  34.771  < 2e-16 ***\n   AGE                   -24687.74    2754.84  -8.962  < 2e-16 ***\n   PROX_CBD              -77131.32    5763.12 -13.384  < 2e-16 ***\n   PROX_CHILDCARE       -318472.75  107959.51  -2.950 0.003231 ** \n   PROX_ELDERLYCARE      185575.62   39901.86   4.651 3.61e-06 ***\n   PROX_URA_GROWTH_AREA   39163.25   11754.83   3.332 0.000885 ***\n   PROX_MRT             -294745.11   56916.37  -5.179 2.56e-07 ***\n   PROX_PARK             570504.81   65507.03   8.709  < 2e-16 ***\n   PROX_PRIMARY_SCH      159856.14   60234.60   2.654 0.008046 ** \n   PROX_SHOPPING_MALL   -220947.25   36561.83  -6.043 1.93e-09 ***\n   PROX_BUS_STOP         682482.22  134513.24   5.074 4.42e-07 ***\n   NO_Of_UNITS             -245.48      87.95  -2.791 0.005321 ** \n   FAMILY_FRIENDLY       146307.58   46893.02   3.120 0.001845 ** \n   FREEHOLD              350599.81   48506.48   7.228 7.98e-13 ***\n\n   ---Significance stars\n   Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 \n   Residual standard error: 756000 on 1421 degrees of freedom\n   Multiple R-squared: 0.6507\n   Adjusted R-squared: 0.6472 \n   F-statistic: 189.1 on 14 and 1421 DF,  p-value: < 2.2e-16 \n   ***Extra Diagnostic information\n   Residual sum of squares: 8.120609e+14\n   Sigma(hat): 752522.9\n   AIC:  42966.76\n   AICc:  42967.14\n   BIC:  41731.39\n   ***********************************************************************\n   *          Results of Geographically Weighted Regression              *\n   ***********************************************************************\n\n   *********************Model calibration information*********************\n   Kernel function: gaussian \n   Adaptive bandwidth: 30 (number of nearest neighbours)\n   Regression points: the same locations as observations are used.\n   Distance metric: Euclidean distance metric is used.\n\n   ****************Summary of GWR coefficient estimates:******************\n                               Min.     1st Qu.      Median     3rd Qu.\n   Intercept            -1.3487e+08 -2.4669e+05  7.7928e+05  1.6194e+06\n   AREA_SQM              3.3188e+03  5.6285e+03  7.7825e+03  1.2738e+04\n   AGE                  -9.6746e+04 -2.9288e+04 -1.4043e+04 -5.6119e+03\n   PROX_CBD             -2.5330e+06 -1.6256e+05 -7.7242e+04  2.6624e+03\n   PROX_CHILDCARE       -1.2790e+06 -2.0175e+05  8.7158e+03  3.7778e+05\n   PROX_ELDERLYCARE     -1.6212e+06 -9.2050e+04  6.1029e+04  2.8184e+05\n   PROX_URA_GROWTH_AREA -7.2686e+06 -3.0350e+04  4.5869e+04  2.4613e+05\n   PROX_MRT             -4.3781e+07 -6.7282e+05 -2.2115e+05 -7.4593e+04\n   PROX_PARK            -2.9020e+06 -1.6782e+05  1.1601e+05  4.6572e+05\n   PROX_PRIMARY_SCH     -8.6418e+05 -1.6627e+05 -7.7853e+03  4.3222e+05\n   PROX_SHOPPING_MALL   -1.8272e+06 -1.3175e+05 -1.4049e+04  1.3799e+05\n   PROX_BUS_STOP        -2.0579e+06 -7.1461e+04  4.1104e+05  1.2071e+06\n   NO_Of_UNITS          -2.1993e+03 -2.3685e+02 -3.4699e+01  1.1657e+02\n   FAMILY_FRIENDLY      -5.9879e+05 -5.0927e+04  2.6173e+04  2.2481e+05\n   FREEHOLD             -1.6340e+05  4.0765e+04  1.9023e+05  3.7960e+05\n                            Max.\n   Intercept            18758355\n   AREA_SQM                23064\n   AGE                     13303\n   PROX_CBD             11346650\n   PROX_CHILDCARE        2892127\n   PROX_ELDERLYCARE      2465671\n   PROX_URA_GROWTH_AREA  7384059\n   PROX_MRT              1186242\n   PROX_PARK             2588497\n   PROX_PRIMARY_SCH      3381462\n   PROX_SHOPPING_MALL   38038564\n   PROX_BUS_STOP        12081592\n   NO_Of_UNITS              1010\n   FAMILY_FRIENDLY       2072414\n   FREEHOLD              1813995\n   ************************Diagnostic information*************************\n   Number of data points: 1436 \n   Effective number of parameters (2trace(S) - trace(S'S)): 350.3088 \n   Effective degrees of freedom (n-2trace(S) + trace(S'S)): 1085.691 \n   AICc (GWR book, Fotheringham, et al. 2002, p. 61, eq 2.33): 41982.22 \n   AIC (GWR book, Fotheringham, et al. 2002,GWR p. 96, eq. 4.22): 41546.74 \n   BIC (GWR book, Fotheringham, et al. 2002,GWR p. 61, eq. 2.34): 41914.08 \n   Residual sum of squares: 2.528227e+14 \n   R-square value:  0.8912425 \n   Adjusted R-square value:  0.8561185 \n\n   ***********************************************************************\n   Program stops at: 2022-12-10 20:21:03 \n\n\nWe notice that AICc of the GWR model of 42263.61 which is significantly smaller than the AIC calculated under the global multiple linear regression model of 42967.14. At the same time, under GWR, adjusted R-square is 0.8430417, which means that this model can explain 84.3% of the times variations in the dependent variables compared to adjusted R-square of 0.6472 under global multiple linear regression model. GWR method proves to be more superior than the global linear regression method in this example.\n\n\nConverting SDF info sf data frame\nTo visualize the fields in SDF, we need to first convert it into sf data frame by using the below code chunks:\n\ncondo_resale.sf.adaptive <- st_as_sf(gwr.adaptive$SDF) %>%\n  st_transform(crs=3414)\n\n\ncondo_resale.sf.adaptive.svy21 <- st_transform(condo_resale.sf.adaptive, 3414)\ncondo_resale.sf.adaptive.svy21  \n\nSimple feature collection with 1436 features and 51 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 14940.85 ymin: 24765.67 xmax: 43352.45 ymax: 48382.81\nProjected CRS: SVY21 / Singapore TM\nFirst 10 features:\n    Intercept  AREA_SQM        AGE  PROX_CBD PROX_CHILDCARE PROX_ELDERLYCARE\n1   2050011.7  9561.892  -9514.634 -120681.9      319266.92       -393417.79\n2   1633128.2 16576.853 -58185.479 -149434.2      441102.18        325188.74\n3   3433608.2 13091.861 -26707.386 -259397.8     -120116.82        535855.81\n4    234358.9 20730.601 -93308.988 2426853.7      480825.28        314783.72\n5   2285804.9  6722.836 -17608.018 -316835.5       90764.78       -137384.61\n6  -3568877.4  6039.581 -26535.592  327306.1     -152531.19       -700392.85\n7  -2874842.4 16843.575 -59166.727 -983577.2     -177810.50       -122384.02\n8   2038086.0  6905.135 -17681.897 -285076.6       70259.40        -96012.78\n9   1718478.4  9580.703 -14401.128  105803.4     -657698.02       -123276.00\n10  3457054.0 14072.011 -31579.884 -234895.4       79961.45        548581.04\n   PROX_URA_GROWTH_AREA    PROX_MRT  PROX_PARK PROX_PRIMARY_SCH\n1            -159980.20  -299742.96 -172104.47        242668.03\n2            -142290.39 -2510522.23  523379.72       1106830.66\n3            -253621.21  -936853.28  209099.85        571462.33\n4           -2679297.89 -2039479.50 -759153.26       3127477.21\n5             303714.81   -44567.05  -10284.62         30413.56\n6             -28051.25   733566.47 1511488.92        320878.23\n7            1397676.38 -2745430.34  710114.74       1786570.95\n8             269368.71   -14552.99   73533.34         53359.73\n9            -361974.72  -476785.32 -132067.59        -40128.92\n10           -150024.38 -1503835.53  574155.47        108996.67\n   PROX_SHOPPING_MALL PROX_BUS_STOP  NO_Of_UNITS FAMILY_FRIENDLY  FREEHOLD\n1          300881.390     1210615.4  104.8290640       -9075.370  303955.6\n2          -87693.378     1843587.2 -288.3441183      310074.664  396221.3\n3         -126732.712     1411924.9   -9.5532945        5949.746  168821.7\n4          -29593.342     7225577.5 -161.3551620     1556178.531 1212515.6\n5           -7490.586      677577.0   42.2659674       58986.951  328175.2\n6          258583.881     1086012.6 -214.3671271      201992.641  471873.1\n7         -384251.210     5094060.5   -0.9212521      359659.512  408871.9\n8          -39634.902      735767.1   30.1741069       55602.506  347075.0\n9          276718.757     2815772.4  675.1615559      -30453.297  503872.8\n10        -454726.822     2123557.0  -21.3044311     -100935.586  213324.6\n         y    yhat    residual CV_Score Stud_residual Intercept_SE AREA_SQM_SE\n1  3000000 2886532   113468.16        0    0.38207013     516105.5    823.2860\n2  3880000 3466801   413198.52        0    1.01433140     488083.5    825.2380\n3  3325000 3616527  -291527.20        0   -0.83780678     963711.4    988.2240\n4  4250000 5435482 -1185481.63        0   -2.84614670     444185.5    617.4007\n5  1400000 1388166    11834.26        0    0.03404453    2119620.6   1376.2778\n6  1320000 1516702  -196701.94        0   -0.72065800   28572883.7   2348.0091\n7  3410000 3266881   143118.77        0    0.41291992     679546.6    893.5893\n8  1420000 1431955   -11955.27        0   -0.03033109    2217773.1   1415.2604\n9  2025000 1832799   192200.83        0    0.52018109     814281.8    943.8434\n10 2550000 2223364   326635.53        0    1.10559735    2410252.0   1271.4073\n      AGE_SE PROX_CBD_SE PROX_CHILDCARE_SE PROX_ELDERLYCARE_SE\n1   5889.782    37411.22          319111.1           120633.34\n2   6226.916    23615.06          299705.3            84546.69\n3   6510.236    56103.77          349128.5           129687.07\n4   6010.511   469337.41          304965.2           127150.69\n5   8180.361   410644.47          698720.6           327371.55\n6  14601.909  5272846.47         1141599.8          1653002.19\n7   8970.629   346164.20          530101.1           148598.71\n8   8661.309   438035.69          742532.8           399221.05\n9  11791.208    89148.35          704630.7           329683.30\n10  9941.980   173532.77          500976.2           281876.74\n   PROX_URA_GROWTH_AREA_SE PROX_MRT_SE PROX_PARK_SE PROX_PRIMARY_SCH_SE\n1                 56207.39    185181.3     205499.6            152400.7\n2                 76956.50    281133.9     229358.7            165150.7\n3                 95774.60    275483.7     314124.3            196662.6\n4                470762.12    279877.1     227249.4            240878.9\n5                474339.56    363830.0     364580.9            249087.7\n6               5496627.21    730453.2    1741712.0            683265.5\n7                371692.97    375511.9     297400.9            344602.8\n8                517977.91    423155.4     440984.4            261251.2\n9                153436.22    285325.4     304998.4            278258.5\n10               239182.57    571355.7     599131.8            331284.8\n   PROX_SHOPPING_MALL_SE PROX_BUS_STOP_SE NO_Of_UNITS_SE FAMILY_FRIENDLY_SE\n1               109268.8         600668.6       218.1258           131474.7\n2                98906.8         410222.1       208.9410           114989.1\n3               119913.3         464156.7       210.9828           146607.2\n4               177104.1         562810.8       361.7767           108726.6\n5               301032.9         740922.4       299.5034           160663.7\n6              2931208.6        1418333.3       602.5571           331727.0\n7               249969.5         821236.4       532.1978           129241.2\n8               351634.0         775038.4       338.6777           171895.1\n9               289872.7         850095.5       439.9037           220223.4\n10              265529.7         631399.2       259.0169           189125.5\n   FREEHOLD_SE Intercept_TV AREA_SQM_TV     AGE_TV PROX_CBD_TV\n1     115954.0    3.9720784   11.614302  -1.615447 -3.22582173\n2     130110.0    3.3460017   20.087361  -9.344188 -6.32792021\n3     141031.5    3.5629010   13.247868  -4.102368 -4.62353528\n4     138239.1    0.5276150   33.577223 -15.524302  5.17080808\n5     210641.1    1.0784029    4.884795  -2.152474 -0.77155660\n6     374347.3   -0.1249043    2.572214  -1.817269  0.06207388\n7     182216.9   -4.2305303   18.849348  -6.595605 -2.84136028\n8     216649.4    0.9189786    4.879056  -2.041481 -0.65080678\n9     220473.7    2.1104224   10.150733  -1.221345  1.18682383\n10    206346.2    1.4343123   11.068059  -3.176418 -1.35360852\n   PROX_CHILDCARE_TV PROX_ELDERLYCARE_TV PROX_URA_GROWTH_AREA_TV PROX_MRT_TV\n1         1.00048819          -3.2612693            -2.846248368 -1.61864578\n2         1.47178634           3.8462625            -1.848971738 -8.92998600\n3        -0.34404755           4.1319138            -2.648105057 -3.40075727\n4         1.57665606           2.4756745            -5.691404992 -7.28705261\n5         0.12990138          -0.4196596             0.640289855 -0.12249416\n6        -0.13361179          -0.4237096            -0.005103357  1.00426206\n7        -0.33542751          -0.8235874             3.760298131 -7.31116712\n8         0.09462126          -0.2405003             0.520038994 -0.03439159\n9        -0.93339393          -0.3739225            -2.359121712 -1.67102293\n10        0.15961128           1.9461735            -0.627237944 -2.63204802\n   PROX_PARK_TV PROX_PRIMARY_SCH_TV PROX_SHOPPING_MALL_TV PROX_BUS_STOP_TV\n1   -0.83749312           1.5923022            2.75358842        2.0154464\n2    2.28192684           6.7019454           -0.88662640        4.4941192\n3    0.66565951           2.9058009           -1.05686949        3.0419145\n4   -3.34061770          12.9836105           -0.16709578       12.8383775\n5   -0.02820944           0.1220998           -0.02488294        0.9145046\n6    0.86781794           0.4696245            0.08821750        0.7656963\n7    2.38773567           5.1844351           -1.53719231        6.2029165\n8    0.16674816           0.2042469           -0.11271635        0.9493299\n9   -0.43301073          -0.1442145            0.95462153        3.3123012\n10   0.95831249           0.3290120           -1.71252687        3.3632555\n   NO_Of_UNITS_TV FAMILY_FRIENDLY_TV FREEHOLD_TV  Local_R2\n1     0.480589953        -0.06902748    2.621347 0.8846744\n2    -1.380026395         2.69655779    3.045280 0.8899773\n3    -0.045279967         0.04058290    1.197050 0.8947007\n4    -0.446007570        14.31276425    8.771149 0.9073605\n5     0.141120178         0.36714544    1.557983 0.9510057\n6    -0.355762335         0.60891234    1.260522 0.9247586\n7    -0.001731033         2.78285441    2.243875 0.8310458\n8     0.089093858         0.32346758    1.602012 0.9463936\n9     1.534793921        -0.13828365    2.285410 0.8380365\n10   -0.082251138        -0.53369623    1.033819 0.9080753\n                    geometry\n1  POINT (22085.12 29951.54)\n2   POINT (25656.84 34546.2)\n3   POINT (23963.99 32890.8)\n4  POINT (27044.28 32319.77)\n5  POINT (41042.56 33743.64)\n6   POINT (39717.04 32943.1)\n7   POINT (28419.1 33513.37)\n8  POINT (40763.57 33879.61)\n9  POINT (23595.63 28884.78)\n10 POINT (24586.56 33194.31)\n\n\n\ngwr.adaptive.output <- as.data.frame(gwr.adaptive$SDF)\ncondo_resale.sf.adaptive <- cbind(condo_resale.res.sf, as.matrix(gwr.adaptive.output))\n\nNext, glimpse() is used to display the content of condo_resale.sf.adaptive sf data frame.\n\nglimpse(condo_resale.sf.adaptive)\n\nRows: 1,436\nColumns: 77\n$ POSTCODE                <dbl> 118635, 288420, 267833, 258380, 467169, 466472…\n$ SELLING_PRICE           <dbl> 3000000, 3880000, 3325000, 4250000, 1400000, 1…\n$ AREA_SQM                <dbl> 309, 290, 248, 127, 145, 139, 218, 141, 165, 1…\n$ AGE                     <dbl> 30, 32, 33, 7, 28, 22, 24, 24, 27, 31, 17, 22,…\n$ PROX_CBD                <dbl> 7.941259, 6.609797, 6.898000, 4.038861, 11.783…\n$ PROX_CHILDCARE          <dbl> 0.16597932, 0.28027246, 0.42922669, 0.39473543…\n$ PROX_ELDERLYCARE        <dbl> 2.5198118, 1.9333338, 0.5021395, 1.9910316, 1.…\n$ PROX_URA_GROWTH_AREA    <dbl> 6.618741, 7.505109, 6.463887, 4.906512, 6.4106…\n$ PROX_HAWKER_MARKET      <dbl> 1.76542207, 0.54507614, 0.37789301, 1.68259969…\n$ PROX_KINDERGARTEN       <dbl> 0.05835552, 0.61592412, 0.14120309, 0.38200076…\n$ PROX_MRT                <dbl> 0.5607188, 0.6584461, 0.3053433, 0.6910183, 0.…\n$ PROX_PARK               <dbl> 1.1710446, 0.1992269, 0.2779886, 0.9832843, 0.…\n$ PROX_PRIMARY_SCH        <dbl> 1.6340256, 0.9747834, 1.4715016, 1.4546324, 0.…\n$ PROX_TOP_PRIMARY_SCH    <dbl> 3.3273195, 0.9747834, 1.4715016, 2.3006394, 0.…\n$ PROX_SHOPPING_MALL      <dbl> 2.2102717, 2.9374279, 1.2256850, 0.3525671, 1.…\n$ PROX_SUPERMARKET        <dbl> 0.9103958, 0.5900617, 0.4135583, 0.4162219, 0.…\n$ PROX_BUS_STOP           <dbl> 0.10336166, 0.28673408, 0.28504777, 0.29872340…\n$ NO_Of_UNITS             <dbl> 18, 20, 27, 30, 30, 31, 32, 32, 32, 32, 34, 34…\n$ FAMILY_FRIENDLY         <dbl> 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0…\n$ FREEHOLD                <dbl> 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1…\n$ LEASEHOLD_99YR          <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ LOG_SELLING_PRICE       <dbl> 14.91412, 15.17135, 15.01698, 15.26243, 14.151…\n$ MLR_RES                 <dbl> -1489099.55, 415494.57, 194129.69, 1088992.71,…\n$ Intercept               <dbl> 2050011.67, 1633128.24, 3433608.17, 234358.91,…\n$ AREA_SQM.1              <dbl> 9561.892, 16576.853, 13091.861, 20730.601, 672…\n$ AGE.1                   <dbl> -9514.634, -58185.479, -26707.386, -93308.988,…\n$ PROX_CBD.1              <dbl> -120681.94, -149434.22, -259397.77, 2426853.66…\n$ PROX_CHILDCARE.1        <dbl> 319266.925, 441102.177, -120116.816, 480825.28…\n$ PROX_ELDERLYCARE.1      <dbl> -393417.795, 325188.741, 535855.806, 314783.72…\n$ PROX_URA_GROWTH_AREA.1  <dbl> -159980.203, -142290.389, -253621.206, -267929…\n$ PROX_MRT.1              <dbl> -299742.96, -2510522.23, -936853.28, -2039479.…\n$ PROX_PARK.1             <dbl> -172104.47, 523379.72, 209099.85, -759153.26, …\n$ PROX_PRIMARY_SCH.1      <dbl> 242668.03, 1106830.66, 571462.33, 3127477.21, …\n$ PROX_SHOPPING_MALL.1    <dbl> 300881.390, -87693.378, -126732.712, -29593.34…\n$ PROX_BUS_STOP.1         <dbl> 1210615.44, 1843587.22, 1411924.90, 7225577.51…\n$ NO_Of_UNITS.1           <dbl> 104.8290640, -288.3441183, -9.5532945, -161.35…\n$ FAMILY_FRIENDLY.1       <dbl> -9075.370, 310074.664, 5949.746, 1556178.531, …\n$ FREEHOLD.1              <dbl> 303955.61, 396221.27, 168821.75, 1212515.58, 3…\n$ y                       <dbl> 3000000, 3880000, 3325000, 4250000, 1400000, 1…\n$ yhat                    <dbl> 2886531.8, 3466801.5, 3616527.2, 5435481.6, 13…\n$ residual                <dbl> 113468.16, 413198.52, -291527.20, -1185481.63,…\n$ CV_Score                <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ Stud_residual           <dbl> 0.38207013, 1.01433140, -0.83780678, -2.846146…\n$ Intercept_SE            <dbl> 516105.5, 488083.5, 963711.4, 444185.5, 211962…\n$ AREA_SQM_SE             <dbl> 823.2860, 825.2380, 988.2240, 617.4007, 1376.2…\n$ AGE_SE                  <dbl> 5889.782, 6226.916, 6510.236, 6010.511, 8180.3…\n$ PROX_CBD_SE             <dbl> 37411.22, 23615.06, 56103.77, 469337.41, 41064…\n$ PROX_CHILDCARE_SE       <dbl> 319111.1, 299705.3, 349128.5, 304965.2, 698720…\n$ PROX_ELDERLYCARE_SE     <dbl> 120633.34, 84546.69, 129687.07, 127150.69, 327…\n$ PROX_URA_GROWTH_AREA_SE <dbl> 56207.39, 76956.50, 95774.60, 470762.12, 47433…\n$ PROX_MRT_SE             <dbl> 185181.3, 281133.9, 275483.7, 279877.1, 363830…\n$ PROX_PARK_SE            <dbl> 205499.6, 229358.7, 314124.3, 227249.4, 364580…\n$ PROX_PRIMARY_SCH_SE     <dbl> 152400.7, 165150.7, 196662.6, 240878.9, 249087…\n$ PROX_SHOPPING_MALL_SE   <dbl> 109268.8, 98906.8, 119913.3, 177104.1, 301032.…\n$ PROX_BUS_STOP_SE        <dbl> 600668.6, 410222.1, 464156.7, 562810.8, 740922…\n$ NO_Of_UNITS_SE          <dbl> 218.1258, 208.9410, 210.9828, 361.7767, 299.50…\n$ FAMILY_FRIENDLY_SE      <dbl> 131474.73, 114989.07, 146607.22, 108726.62, 16…\n$ FREEHOLD_SE             <dbl> 115954.0, 130110.0, 141031.5, 138239.1, 210641…\n$ Intercept_TV            <dbl> 3.9720784, 3.3460017, 3.5629010, 0.5276150, 1.…\n$ AREA_SQM_TV             <dbl> 11.614302, 20.087361, 13.247868, 33.577223, 4.…\n$ AGE_TV                  <dbl> -1.6154474, -9.3441881, -4.1023685, -15.524301…\n$ PROX_CBD_TV             <dbl> -3.22582173, -6.32792021, -4.62353528, 5.17080…\n$ PROX_CHILDCARE_TV       <dbl> 1.000488185, 1.471786337, -0.344047555, 1.5766…\n$ PROX_ELDERLYCARE_TV     <dbl> -3.26126929, 3.84626245, 4.13191383, 2.4756745…\n$ PROX_URA_GROWTH_AREA_TV <dbl> -2.846248368, -1.848971738, -2.648105057, -5.6…\n$ PROX_MRT_TV             <dbl> -1.61864578, -8.92998600, -3.40075727, -7.2870…\n$ PROX_PARK_TV            <dbl> -0.83749312, 2.28192684, 0.66565951, -3.340617…\n$ PROX_PRIMARY_SCH_TV     <dbl> 1.59230221, 6.70194543, 2.90580089, 12.9836104…\n$ PROX_SHOPPING_MALL_TV   <dbl> 2.753588422, -0.886626400, -1.056869486, -0.16…\n$ PROX_BUS_STOP_TV        <dbl> 2.0154464, 4.4941192, 3.0419145, 12.8383775, 0…\n$ NO_Of_UNITS_TV          <dbl> 0.480589953, -1.380026395, -0.045279967, -0.44…\n$ FAMILY_FRIENDLY_TV      <dbl> -0.06902748, 2.69655779, 0.04058290, 14.312764…\n$ FREEHOLD_TV             <dbl> 2.6213469, 3.0452799, 1.1970499, 8.7711485, 1.…\n$ Local_R2                <dbl> 0.8846744, 0.8899773, 0.8947007, 0.9073605, 0.…\n$ coords.x1               <dbl> 22085.12, 25656.84, 23963.99, 27044.28, 41042.…\n$ coords.x2               <dbl> 29951.54, 34546.20, 32890.80, 32319.77, 33743.…\n$ geometry                <POINT [m]> POINT (22085.12 29951.54), POINT (25656.…\n\n\n\nsummary(gwr.adaptive$SDF$yhat)\n\n    Min.  1st Qu.   Median     Mean  3rd Qu.     Max. \n  171347  1102001  1385528  1751842  1982307 13887901 \n\n\n\n\nVisualizing local R2\nThe code chunks below is used to create an interactive point symbol map.\n\ntmap_mode(\"view\")\n\ntmap mode set to interactive viewing\n\ntm_shape(mpsz_svy21)+\n  tm_polygons(alpha = 0.1) +\ntm_shape(condo_resale.sf.adaptive) +  \n  tm_dots(col = \"Local_R2\",\n          border.col = \"gray60\",\n          border.lwd = 1) +\n  tm_view(set.zoom.limits = c(11,14))\n\nWarning: The shape mpsz_svy21 is invalid (after reprojection). See\nsf::st_is_valid\n\n\n\n\n\n\n\nWe then reset tmap_mode back to plot.\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\n\n\n\nVisualizing Coefficients Estimates\nThe code chunks below is used to create an interactive point symbol map.\n\ntmap_mode(\"view\")\n\ntmap mode set to interactive viewing\n\nAREA_SQM_SE <- tm_shape(mpsz_svy21)+\n  tm_polygons(alpha = 0.1) +\ntm_shape(condo_resale.sf.adaptive) +  \n  tm_dots(col = \"AREA_SQM_SE\",\n          border.col = \"gray60\",\n          border.lwd = 1) +\n  tm_view(set.zoom.limits = c(11,14))\n\nAREA_SQM_TV <- tm_shape(mpsz_svy21)+\n  tm_polygons(alpha = 0.1) +\ntm_shape(condo_resale.sf.adaptive) +  \n  tm_dots(col = \"AREA_SQM_TV\",\n          border.col = \"gray60\",\n          border.lwd = 1) +\n  tm_view(set.zoom.limits = c(11,14))\n\ntmap_arrange(AREA_SQM_SE, AREA_SQM_TV, \n             asp=1, ncol=2,\n             sync = TRUE)\n\nWarning: The shape mpsz_svy21 is invalid (after reprojection). See\nsf::st_is_valid\n\nWarning: The shape mpsz_svy21 is invalid (after reprojection). See\nsf::st_is_valid\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nBy URA Planning Region\n\ntm_shape(mpsz_svy21[mpsz_svy21$REGION_N==\"CENTRAL REGION\", ])+\n  tm_polygons()+\ntm_shape(condo_resale.sf.adaptive) + \n  tm_bubbles(col = \"Local_R2\",\n           size = 0.15,\n           border.col = \"gray60\",\n           border.lwd = 1)\n\nWarning: The shape mpsz_svy21[mpsz_svy21$REGION_N == \"CENTRAL REGION\", ] is\ninvalid (after reprojection). See sf::st_is_valid"
  },
  {
    "objectID": "In-class_Ex1/In-class_Ex1.html",
    "href": "In-class_Ex1/In-class_Ex1.html",
    "title": "In-class Exercise 1",
    "section": "",
    "text": "This exercise covers Chapter 3 on Spatial Weights and their applications using R."
  },
  {
    "objectID": "In-class_Ex1/In-class_Ex1.html#data-set",
    "href": "In-class_Ex1/In-class_Ex1.html#data-set",
    "title": "In-class Exercise 1",
    "section": "Data Set",
    "text": "Data Set\nTwo datasets will be used in this exercise:\n\nHunan County Boundary Layer: A geospatial set in ESRI shapefile format.\nHunan_2012.csv: This file contains selected Hunan’s local development indicators in 2012."
  },
  {
    "objectID": "In-class_Ex1/In-class_Ex1.html#getting-started",
    "href": "In-class_Ex1/In-class_Ex1.html#getting-started",
    "title": "In-class Exercise 1",
    "section": "Getting Started",
    "text": "Getting Started\nThe code chunk below will install and load tidyverse and sf packages.\n\npacman::p_load(tidyverse,sf,spdep,tmap)"
  },
  {
    "objectID": "In-class_Ex1/In-class_Ex1.html#importing-geospatial-data",
    "href": "In-class_Ex1/In-class_Ex1.html#importing-geospatial-data",
    "title": "In-class Exercise 1",
    "section": "Importing Geospatial Data",
    "text": "Importing Geospatial Data\n\nImporting polygon features\nThis code chunks will import ESRI shapefile into R.\n\nhunan<-st_read(dsn=\"data/geospatial\",layer=\"Hunan\")\n\nReading layer `Hunan' from data source \n  `C:\\thaorocket\\ISS624\\In-class_Ex1\\data\\geospatial' using driver `ESRI Shapefile'\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n\n\n\n\nImporting attribute data in csv to R environment\n\nhunan2012<-read_csv(\"data/aspatial/Hunan_2012.csv\")\n\nRows: 88 Columns: 29\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (2): County, City\ndbl (27): avg_wage, deposite, FAI, Gov_Rev, Gov_Exp, GDP, GDPPC, GIO, Loan, ...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\n\nPerforming relational join\nNext we will join the attribute data of hunan’s Spatial Polygon Data Frame with the attribute data of hunan2012’s dataframe by performing the below code chunk.\n\nhunan<-left_join(hunan,hunan2012)\n\nJoining, by = \"County\"\n\nhunan\n\nSimple feature collection with 88 features and 35 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\nFirst 10 features:\n     NAME_2  ID_3    NAME_3   ENGTYPE_3 Shape_Leng Shape_Area    County\n1   Changde 21098   Anxiang      County   1.869074 0.10056190   Anxiang\n2   Changde 21100   Hanshou      County   2.360691 0.19978745   Hanshou\n3   Changde 21101    Jinshi County City   1.425620 0.05302413    Jinshi\n4   Changde 21102        Li      County   3.474325 0.18908121        Li\n5   Changde 21103     Linli      County   2.289506 0.11450357     Linli\n6   Changde 21104    Shimen      County   4.171918 0.37194707    Shimen\n7  Changsha 21109   Liuyang County City   4.060579 0.46016789   Liuyang\n8  Changsha 21110 Ningxiang      County   3.323754 0.26614198 Ningxiang\n9  Changsha 21111 Wangcheng      County   2.292093 0.13049161 Wangcheng\n10 Chenzhou 21112     Anren      County   2.240739 0.13343936     Anren\n       City avg_wage deposite     FAI Gov_Rev Gov_Exp     GDP GDPPC      GIO\n1   Changde    31935   5517.2  3541.0  243.64  1779.5 12482.0 23667   5108.9\n2   Changde    32265   7979.0  8665.0  386.13  2062.4 15788.0 20981  13491.0\n3   Changde    28692   4581.7  4777.0  373.31  1148.4  8706.9 34592  10935.0\n4   Changde    32541  13487.0 16066.0  709.61  2459.5 20322.0 24473  18402.0\n5   Changde    32667    564.1  7781.2  336.86  1538.7 10355.0 25554   8214.0\n6   Changde    33261   8334.4 10531.0  548.33  2178.8 16293.0 27137  17795.0\n7  Changsha    40446  21415.0 43599.0 2473.10  4605.5 81113.0 63118  99254.0\n8  Changsha    40744  18662.0 49234.0 2448.90  4812.2 73250.0 62202 114145.0\n9  Changsha    45171  12122.0 48829.0 2285.50  3802.3 37488.0 70666 148976.0\n10 Chenzhou    28058   4598.9  6386.1  220.57  1454.7  4941.2 12761   4189.2\n      Loan   NIPCR  Bed    Emp  EmpR EmpRT Pri_Stu Sec_Stu Household\n1   2806.9  7693.7 1931 336.39 270.5 205.9  19.584  17.819     148.1\n2   4550.0  8269.9 2560 456.78 388.8 246.7  42.097  33.029     240.2\n3   2242.0  8169.9  848 122.78  82.1  61.7   8.723   7.592      81.9\n4   6748.0  8377.0 2038 513.44 426.8 227.1  38.975  33.938     268.5\n5    358.0  8143.1 1440 307.36 272.2 100.8  23.286  18.943     129.1\n6   6026.5  6156.0 2502 392.05 329.6 193.8  29.245  26.104     190.6\n7  23408.0 15719.0 6225 919.62 721.4 300.1  90.978  58.819     374.8\n8  18435.0 13763.0 4351 852.96 757.6 318.3  80.715  68.853     391.7\n9  10330.0 16495.0 1678 361.48 268.6 131.2  28.838  24.815     161.3\n10  2555.3  3271.8  970 290.82 255.4  99.4  33.171  17.505     104.6\n   Household_R NOIP Pop_R    RSCG  Pop_T      Agri Service Disp_Inc      RORP\n1        135.4   53 346.0  3957.9  528.3  4524.410 14100.0    16610 0.6549309\n2        208.7   95 553.2  4460.5  804.6  6545.350 17727.0    18925 0.6875466\n3         43.7   77  92.4  3683.0  251.8  2562.460  7525.0    19498 0.3669579\n4        256.0   96 539.7  7110.2  832.5  7562.340 53160.0    18985 0.6482883\n5        157.2   99 246.6  3604.9  409.3  3583.910  7031.0    18604 0.6024921\n6        184.7  122 399.2  6490.7  600.5  5266.510  6981.0    19275 0.6647794\n7        369.8  733 642.7 16233.0 1285.5 10844.470 26617.8    27345 0.4999611\n8        369.6  552 655.5 15623.0 1186.5 12804.480 18447.7    24020 0.5524652\n9        154.8  314 266.6  5623.3  533.4  5222.356  6648.6    27690 0.4998125\n10       121.9   34 243.2  2386.4  388.7  2357.764  3814.1    16072 0.6256753\n      ROREmp                       geometry\n1  0.8041262 POLYGON ((112.0625 29.75523...\n2  0.8511756 POLYGON ((112.2288 29.11684...\n3  0.6686757 POLYGON ((111.8927 29.6013,...\n4  0.8312558 POLYGON ((111.3731 29.94649...\n5  0.8856065 POLYGON ((111.6324 29.76288...\n6  0.8407091 POLYGON ((110.8825 30.11675...\n7  0.7844544 POLYGON ((113.9905 28.5682,...\n8  0.8882011 POLYGON ((112.7181 28.38299...\n9  0.7430563 POLYGON ((112.7914 28.52688...\n10 0.8782065 POLYGON ((113.1757 26.82734...\n\n\nNote that R can find out the “by” argument for the left join as County without us needing to explicitly state the argument.\n\nglimpse(hunan)\n\nRows: 88\nColumns: 36\n$ NAME_2      <chr> \"Changde\", \"Changde\", \"Changde\", \"Changde\", \"Changde\", \"Ch…\n$ ID_3        <int> 21098, 21100, 21101, 21102, 21103, 21104, 21109, 21110, 21…\n$ NAME_3      <chr> \"Anxiang\", \"Hanshou\", \"Jinshi\", \"Li\", \"Linli\", \"Shimen\", \"…\n$ ENGTYPE_3   <chr> \"County\", \"County\", \"County City\", \"County\", \"County\", \"Co…\n$ Shape_Leng  <dbl> 1.869074, 2.360691, 1.425620, 3.474325, 2.289506, 4.171918…\n$ Shape_Area  <dbl> 0.10056190, 0.19978745, 0.05302413, 0.18908121, 0.11450357…\n$ County      <chr> \"Anxiang\", \"Hanshou\", \"Jinshi\", \"Li\", \"Linli\", \"Shimen\", \"…\n$ City        <chr> \"Changde\", \"Changde\", \"Changde\", \"Changde\", \"Changde\", \"Ch…\n$ avg_wage    <dbl> 31935, 32265, 28692, 32541, 32667, 33261, 40446, 40744, 45…\n$ deposite    <dbl> 5517.2, 7979.0, 4581.7, 13487.0, 564.1, 8334.4, 21415.0, 1…\n$ FAI         <dbl> 3541.0, 8665.0, 4777.0, 16066.0, 7781.2, 10531.0, 43599.0,…\n$ Gov_Rev     <dbl> 243.64, 386.13, 373.31, 709.61, 336.86, 548.33, 2473.10, 2…\n$ Gov_Exp     <dbl> 1779.5, 2062.4, 1148.4, 2459.5, 1538.7, 2178.8, 4605.5, 48…\n$ GDP         <dbl> 12482.0, 15788.0, 8706.9, 20322.0, 10355.0, 16293.0, 81113…\n$ GDPPC       <dbl> 23667, 20981, 34592, 24473, 25554, 27137, 63118, 62202, 70…\n$ GIO         <dbl> 5108.9, 13491.0, 10935.0, 18402.0, 8214.0, 17795.0, 99254.…\n$ Loan        <dbl> 2806.90, 4550.00, 2242.00, 6748.00, 358.00, 6026.50, 23408…\n$ NIPCR       <dbl> 7693.7, 8269.9, 8169.9, 8377.0, 8143.1, 6156.0, 15719.0, 1…\n$ Bed         <dbl> 1931, 2560, 848, 2038, 1440, 2502, 6225, 4351, 1678, 970, …\n$ Emp         <dbl> 336.39, 456.78, 122.78, 513.44, 307.36, 392.05, 919.62, 85…\n$ EmpR        <dbl> 270.5, 388.8, 82.1, 426.8, 272.2, 329.6, 721.4, 757.6, 268…\n$ EmpRT       <dbl> 205.9, 246.7, 61.7, 227.1, 100.8, 193.8, 300.1, 318.3, 131…\n$ Pri_Stu     <dbl> 19.584, 42.097, 8.723, 38.975, 23.286, 29.245, 90.978, 80.…\n$ Sec_Stu     <dbl> 17.819, 33.029, 7.592, 33.938, 18.943, 26.104, 58.819, 68.…\n$ Household   <dbl> 148.1, 240.2, 81.9, 268.5, 129.1, 190.6, 374.8, 391.7, 161…\n$ Household_R <dbl> 135.4, 208.7, 43.7, 256.0, 157.2, 184.7, 369.8, 369.6, 154…\n$ NOIP        <dbl> 53, 95, 77, 96, 99, 122, 733, 552, 314, 34, 14, 100, 67, 4…\n$ Pop_R       <dbl> 346.0, 553.2, 92.4, 539.7, 246.6, 399.2, 642.7, 655.5, 266…\n$ RSCG        <dbl> 3957.9, 4460.5, 3683.0, 7110.2, 3604.9, 6490.7, 16233.0, 1…\n$ Pop_T       <dbl> 528.3, 804.6, 251.8, 832.5, 409.3, 600.5, 1285.5, 1186.5, …\n$ Agri        <dbl> 4524.410, 6545.350, 2562.460, 7562.340, 3583.910, 5266.510…\n$ Service     <dbl> 14100.0, 17727.0, 7525.0, 53160.0, 7031.0, 6981.0, 26617.8…\n$ Disp_Inc    <dbl> 16610, 18925, 19498, 18985, 18604, 19275, 27345, 24020, 27…\n$ RORP        <dbl> 0.6549309, 0.6875466, 0.3669579, 0.6482883, 0.6024921, 0.6…\n$ ROREmp      <dbl> 0.8041262, 0.8511756, 0.6686757, 0.8312558, 0.8856065, 0.8…\n$ geometry    <POLYGON [°]> POLYGON ((112.0625 29.75523..., POLYGON ((112.2288…"
  },
  {
    "objectID": "In-class_Ex1/In-class_Ex1.html#visualizing-regional-development-indicator",
    "href": "In-class_Ex1/In-class_Ex1.html#visualizing-regional-development-indicator",
    "title": "In-class Exercise 1",
    "section": "Visualizing Regional Development Indicator",
    "text": "Visualizing Regional Development Indicator\nNext, we are going to create a base map and choropleth map showing the distribution of GDPPC in 2012 using qtm() function of tmap package.\n\nbasemap<-tm_shape(hunan)+\n  tm_polygons()+\n  tm_text(\"NAME_3\",size=0.2)\ngdppc<-qtm(hunan,\"GDPPC\")\ntmap_arrange(basemap,gdppc,asp=1,ncol=2)"
  },
  {
    "objectID": "In-class_Ex1/In-class_Ex1.html#computing-contiguity-spatial-weights",
    "href": "In-class_Ex1/In-class_Ex1.html#computing-contiguity-spatial-weights",
    "title": "In-class Exercise 1",
    "section": "Computing contiguity spatial weights",
    "text": "Computing contiguity spatial weights\nIn this section, I learn how to use poly2nb() of spdep package to calculate the contiguity weight matrices for the studied areas. This function builds a list of neighbours based on regions with contiguous boundaries. There is an argument called “queen” to specify whether I would like to return a list of first order neighbors using the Queen criteria.\n\nComputing Queen contiguity based neighbors\n\nwm_q<-poly2nb(hunan,queen=TRUE)\nsummary(wm_q)\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 11 \n 2  2 12 16 24 14 11  4  2  1 \n2 least connected regions:\n30 65 with 1 link\n1 most connected region:\n85 with 11 links\n\n\nThe summary report shows there are 88 regions. The most connected region has 11 neighbors while the two least connected regions have 1 neighbor only.\nWe can also view the list of neighbors using wm_q[[x]] with x as the polygon ID as stored in hunan Spatial Polygon Data Frame. For example, I want to view the list of the neighbors of polygon ID 85 (The most connected region).\n\nwm_q[[85]]\n\n [1]  1  2  3  5  6 32 56 57 69 75 78\n\n\nHow about the least connected regions stated above?\n\nwm_q[[30]]\n\n[1] 33\n\nwm_q[[65]]\n\n[1] 76\n\n\nWe can also retrieve the name of the county linked to the Polygon ID by using the below code chunk.\n\nhunan$County[85]\n\n[1] \"Taoyuan\"\n\n\nSo Taoyuan is the most well-connected county in this example.\nNow, how about finding out the names of the neighboring counties to Taoyuan?\n\nhunan$NAME_3[c(1,2,3,5,6,32,56,57,69,75,78)]\n\n [1] \"Anxiang\"  \"Hanshou\"  \"Jinshi\"   \"Linli\"    \"Shimen\"   \"Yuanling\"\n [7] \"Anhua\"    \"Nan\"      \"Cili\"     \"Sangzhi\"  \"Taojiang\"\n\n\nWe can retrieve the GDPPC of the above 11 neighboring counties using the code chunks below:\n\nnb1<-wm_q[[85]]\nnb1<-hunan$GDPPC[nb1]\nnb1\n\n [1] 23667 20981 34592 25554 27137 24194 14567 21311 18714 14624 19509\n\n\nWe can display the complete weight matrix by using str() below:\n\nstr(wm_q)\n\nList of 88\n $ : int [1:5] 2 3 4 57 85\n $ : int [1:5] 1 57 58 78 85\n $ : int [1:4] 1 4 5 85\n $ : int [1:4] 1 3 5 6\n $ : int [1:4] 3 4 6 85\n $ : int [1:5] 4 5 69 75 85\n $ : int [1:4] 67 71 74 84\n $ : int [1:7] 9 46 47 56 78 80 86\n $ : int [1:6] 8 66 68 78 84 86\n $ : int [1:8] 16 17 19 20 22 70 72 73\n $ : int [1:3] 14 17 72\n $ : int [1:5] 13 60 61 63 83\n $ : int [1:4] 12 15 60 83\n $ : int [1:3] 11 15 17\n $ : int [1:4] 13 14 17 83\n $ : int [1:5] 10 17 22 72 83\n $ : int [1:7] 10 11 14 15 16 72 83\n $ : int [1:5] 20 22 23 77 83\n $ : int [1:6] 10 20 21 73 74 86\n $ : int [1:7] 10 18 19 21 22 23 82\n $ : int [1:5] 19 20 35 82 86\n $ : int [1:5] 10 16 18 20 83\n $ : int [1:7] 18 20 38 41 77 79 82\n $ : int [1:5] 25 28 31 32 54\n $ : int [1:5] 24 28 31 33 81\n $ : int [1:4] 27 33 42 81\n $ : int [1:3] 26 29 42\n $ : int [1:5] 24 25 33 49 54\n $ : int [1:3] 27 37 42\n $ : int 33\n $ : int [1:8] 24 25 32 36 39 40 56 81\n $ : int [1:8] 24 31 50 54 55 56 75 85\n $ : int [1:5] 25 26 28 30 81\n $ : int [1:3] 36 45 80\n $ : int [1:6] 21 41 47 80 82 86\n $ : int [1:6] 31 34 40 45 56 80\n $ : int [1:4] 29 42 43 44\n $ : int [1:4] 23 44 77 79\n $ : int [1:5] 31 40 42 43 81\n $ : int [1:6] 31 36 39 43 45 79\n $ : int [1:6] 23 35 45 79 80 82\n $ : int [1:7] 26 27 29 37 39 43 81\n $ : int [1:6] 37 39 40 42 44 79\n $ : int [1:4] 37 38 43 79\n $ : int [1:6] 34 36 40 41 79 80\n $ : int [1:3] 8 47 86\n $ : int [1:5] 8 35 46 80 86\n $ : int [1:5] 50 51 52 53 55\n $ : int [1:4] 28 51 52 54\n $ : int [1:5] 32 48 52 54 55\n $ : int [1:3] 48 49 52\n $ : int [1:5] 48 49 50 51 54\n $ : int [1:3] 48 55 75\n $ : int [1:6] 24 28 32 49 50 52\n $ : int [1:5] 32 48 50 53 75\n $ : int [1:7] 8 31 32 36 78 80 85\n $ : int [1:6] 1 2 58 64 76 85\n $ : int [1:5] 2 57 68 76 78\n $ : int [1:4] 60 61 87 88\n $ : int [1:4] 12 13 59 61\n $ : int [1:7] 12 59 60 62 63 77 87\n $ : int [1:3] 61 77 87\n $ : int [1:4] 12 61 77 83\n $ : int [1:2] 57 76\n $ : int 76\n $ : int [1:5] 9 67 68 76 84\n $ : int [1:4] 7 66 76 84\n $ : int [1:5] 9 58 66 76 78\n $ : int [1:3] 6 75 85\n $ : int [1:3] 10 72 73\n $ : int [1:3] 7 73 74\n $ : int [1:5] 10 11 16 17 70\n $ : int [1:5] 10 19 70 71 74\n $ : int [1:6] 7 19 71 73 84 86\n $ : int [1:6] 6 32 53 55 69 85\n $ : int [1:7] 57 58 64 65 66 67 68\n $ : int [1:7] 18 23 38 61 62 63 83\n $ : int [1:7] 2 8 9 56 58 68 85\n $ : int [1:7] 23 38 40 41 43 44 45\n $ : int [1:8] 8 34 35 36 41 45 47 56\n $ : int [1:6] 25 26 31 33 39 42\n $ : int [1:5] 20 21 23 35 41\n $ : int [1:9] 12 13 15 16 17 18 22 63 77\n $ : int [1:6] 7 9 66 67 74 86\n $ : int [1:11] 1 2 3 5 6 32 56 57 69 75 ...\n $ : int [1:9] 8 9 19 21 35 46 47 74 84\n $ : int [1:4] 59 61 62 88\n $ : int [1:2] 59 87\n - attr(*, \"class\")= chr \"nb\"\n - attr(*, \"region.id\")= chr [1:88] \"1\" \"2\" \"3\" \"4\" ...\n - attr(*, \"call\")= language poly2nb(pl = hunan, queen = TRUE)\n - attr(*, \"type\")= chr \"queen\"\n - attr(*, \"sym\")= logi TRUE\n\n\n\n\nCreating Rook Contiguity based neighbors\nWe can compute the weight matrix using Rook criteria by setting the queen argument of poly2nb to FALSE as below:\n\nwm_r<-poly2nb(hunan,queen=FALSE)\nsummary(wm_r)\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 440 \nPercentage nonzero weights: 5.681818 \nAverage number of links: 5 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 10 \n 2  2 12 20 21 14 11  3  2  1 \n2 least connected regions:\n30 65 with 1 link\n1 most connected region:\n85 with 10 links\n\n\nFrom the above summary report, we can see that the most connected region has the Polygon ID of 85 with 10 links. The 2 least connected regions have 1 link. There are 88 counties in Hunan.\n\n\nVisualizing contiguity weights\n\nlongitude<-map_dbl(hunan$geometry,~st_centroid(.x)[[1]])\n\n\nlatitude<-map_dbl(hunan$geometry,~st_centroid(.x)[[2]])\n\n\ncoords<-cbind(longitude,latitude)\n\n\nhead(coords)\n\n     longitude latitude\n[1,]  112.1531 29.44362\n[2,]  112.0372 28.86489\n[3,]  111.8917 29.47107\n[4,]  111.7031 29.74499\n[5,]  111.6138 29.49258\n[6,]  111.0341 29.79863\n\n\n\nPlotting Queen Contiguity based neighbor map\n\nplot(hunan$geometry,border=\"lightgrey\")\nplot(wm_q,coords,pch=18,cex=0.5,add=TRUE,col=\"Green\")\n\n\n\n\n\n\nPlotting Rook contiguity based neighbor map\n\nplot(hunan$geometry,border=\"lightgrey\")\nplot(wm_r,coords,pch=18,cex=0.5,add=TRUE,col=\"Green\")\n\n\n\n\n\n\nPlotting both Queen and Rook contiguity based neighbor maps\n\npar(mfrow=c(1,2))\nplot(hunan$geometry,border=\"lightgrey\")\nplot(wm_q,coords,pch=18,cex=0.5,add=TRUE,col=\"Green\")\nplot(hunan$geometry,border=\"lightgrey\")\nplot(wm_r,coords,pch=18,cex=0.5,add=TRUE,col=\"Green\")"
  },
  {
    "objectID": "In-class_Ex1/In-class_Ex1.html#computing-distance-based-neighbours",
    "href": "In-class_Ex1/In-class_Ex1.html#computing-distance-based-neighbours",
    "title": "In-class Exercise 1",
    "section": "Computing Distance based neighbours",
    "text": "Computing Distance based neighbours\nIn this section, I learn how to derive distance-based weight matrices by using the dnearneigh() of spdep package.\nThe function identifies neighbor of regions by Euclidean distance with a distance band bounded by lower d1 and upper d2 controlled by the bounds argument.\n\nDetermine the cut-off distance\nFirst, I need to determine the upper limit for distance band by following the below steps:\n\nReturn a matrix with the indices of points belonging to the set of the k nearest neighbors each other by using knearneigh() of spdep. By default, k=1 so it means I am find the the indices of points belonging to the set of the first nearest neighbor.\nConvert the knn object returned after knearneigh() into a list of neigbours with class nb of integer vectors containing neighbor region number ID by using knn2nb().\nReturn the length of neighbor edges by using nbdist() of spdep package. The function returns in coordinates if coordinates are projected, in km otherwise.\nRemove the list structure of the returned object by using unlist().\n\nknearneigh(coords)\n\n$nn\n      [,1]\n [1,]    3\n [2,]   78\n [3,]    1\n [4,]    5\n [5,]    4\n [6,]   69\n [7,]   67\n [8,]   46\n [9,]   84\n[10,]   70\n[11,]   72\n[12,]   63\n[13,]   12\n[14,]   17\n[15,]   13\n[16,]   22\n[17,]   16\n[18,]   20\n[19,]   21\n[20,]   82\n[21,]   19\n[22,]   16\n[23,]   41\n[24,]   54\n[25,]   81\n[26,]   81\n[27,]   29\n[28,]   49\n[29,]   27\n[30,]   33\n[31,]   24\n[32,]   50\n[33,]   28\n[34,]   45\n[35,]   47\n[36,]   34\n[37,]   42\n[38,]   44\n[39,]   43\n[40,]   39\n[41,]   23\n[42,]   37\n[43,]   44\n[44,]   43\n[45,]   34\n[46,]   47\n[47,]   46\n[48,]   51\n[49,]   28\n[50,]   52\n[51,]   48\n[52,]   54\n[53,]   55\n[54,]   52\n[55,]   50\n[56,]   36\n[57,]   58\n[58,]   57\n[59,]   87\n[60,]   13\n[61,]   63\n[62,]   61\n[63,]   12\n[64,]   57\n[65,]   76\n[66,]   68\n[67,]    7\n[68,]   66\n[69,]    6\n[70,]   10\n[71,]   74\n[72,]   11\n[73,]   70\n[74,]   71\n[75,]   55\n[76,]   65\n[77,]   38\n[78,]    2\n[79,]   45\n[80,]   34\n[81,]   25\n[82,]   21\n[83,]   12\n[84,]    9\n[85,]    5\n[86,]   74\n[87,]   61\n[88,]   87\n\n$np\n[1] 88\n\n$k\n[1] 1\n\n$dimension\n[1] 2\n\n$x\n      longitude latitude\n [1,]  112.1531 29.44362\n [2,]  112.0372 28.86489\n [3,]  111.8917 29.47107\n [4,]  111.7031 29.74499\n [5,]  111.6138 29.49258\n [6,]  111.0341 29.79863\n [7,]  113.7065 28.23215\n [8,]  112.3460 28.13081\n [9,]  112.8169 28.28918\n[10,]  113.3534 26.57906\n[11,]  113.8942 25.98122\n[12,]  112.4006 25.63215\n[13,]  112.5542 25.33880\n[14,]  113.6636 25.54967\n[15,]  112.9206 25.26722\n[16,]  113.1883 26.21248\n[17,]  113.4521 25.93480\n[18,]  112.4209 26.36132\n[19,]  113.0152 27.08120\n[20,]  112.6350 26.75969\n[21,]  112.7087 27.27930\n[22,]  112.9095 26.42079\n[23,]  111.9522 26.80117\n[24,]  110.2606 27.89384\n[25,]  110.0921 27.54115\n[26,]  109.7985 26.91321\n[27,]  109.5765 26.54507\n[28,]  109.7211 27.78801\n[29,]  109.7339 26.21157\n[30,]  109.1537 27.22941\n[31,]  110.6442 27.83407\n[32,]  110.5916 28.57282\n[33,]  109.5984 27.39828\n[34,]  111.4783 27.67997\n[35,]  112.1745 27.46256\n[36,]  111.2315 27.86930\n[37,]  110.3149 26.32113\n[38,]  111.3248 26.48991\n[39,]  110.5859 27.10164\n[40,]  110.9593 27.34884\n[41,]  111.8296 27.18765\n[42,]  110.1926 26.70972\n[43,]  110.7334 26.78494\n[44,]  110.9123 26.54354\n[45,]  111.4599 27.42910\n[46,]  112.5268 27.92456\n[47,]  112.3406 27.77407\n[48,]  109.5602 28.66808\n[49,]  109.5071 28.01142\n[50,]  109.9954 28.60033\n[51,]  109.4273 28.42749\n[52,]  109.7587 28.31518\n[53,]  109.5044 29.21940\n[54,]  109.9899 28.16053\n[55,]  109.9664 29.01206\n[56,]  111.3785 28.28449\n[57,]  112.4350 29.23817\n[58,]  112.5558 28.97135\n[59,]  111.7379 24.97087\n[60,]  112.1831 25.31559\n[61,]  111.9743 25.65101\n[62,]  111.7009 25.91101\n[63,]  112.2196 25.88615\n[64,]  112.6472 29.48614\n[65,]  113.5102 29.49285\n[66,]  113.1172 28.79707\n[67,]  113.7089 28.76024\n[68,]  112.7963 28.71653\n[69,]  110.9276 29.39439\n[70,]  113.6420 26.80361\n[71,]  113.4577 27.66123\n[72,]  113.8404 26.37989\n[73,]  113.4758 27.17064\n[74,]  113.1428 27.62875\n[75,]  110.3017 29.39053\n[76,]  113.1957 29.25343\n[77,]  111.7410 26.36035\n[78,]  112.1831 28.49854\n[79,]  111.3390 27.01465\n[80,]  111.8208 27.75124\n[81,]  110.0753 27.23539\n[82,]  112.3965 27.08323\n[83,]  112.7683 25.82828\n[84,]  113.1679 28.30074\n[85,]  111.4495 28.95406\n[86,]  112.7956 27.68910\n[87,]  111.5896 25.49530\n[88,]  111.2393 25.19355\n\nattr(,\"class\")\n[1] \"knn\"\nattr(,\"call\")\nknearneigh(x = coords)\n\n\n\nk1<-knn2nb(knearneigh(coords))\nk1\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 88 \nPercentage nonzero weights: 1.136364 \nAverage number of links: 1 \nNon-symmetric neighbours list\n\nsummary(k1)\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 88 \nPercentage nonzero weights: 1.136364 \nAverage number of links: 1 \nNon-symmetric neighbours list\nLink number distribution:\n\n 1 \n88 \n88 least connected regions:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 with 1 link\n88 most connected regions:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 with 1 link\n\n\n\n\nnbdists(k1,coords,longlat=TRUE)\n\n[[1]]\n[1] 25.53398\n\n[[2]]\n[1] 43.03114\n\n[[3]]\n[1] 25.53398\n\n[[4]]\n[1] 29.2848\n\n[[5]]\n[1] 29.2848\n\n[[6]]\n[1] 45.98097\n\n[[7]]\n[1] 58.52704\n\n[[8]]\n[1] 28.95985\n\n[[9]]\n[1] 34.45062\n\n[[10]]\n[1] 37.99885\n\n[[11]]\n[1] 44.49442\n\n[[12]]\n[1] 33.48816\n\n[[13]]\n[1] 35.98123\n\n[[14]]\n[1] 47.65184\n\n[[15]]\n[1] 37.73556\n\n[[16]]\n[1] 36.16613\n\n[[17]]\n[1] 40.53569\n\n[[18]]\n[1] 49.02492\n\n[[19]]\n[1] 37.47543\n\n[[20]]\n[1] 42.97316\n\n[[21]]\n[1] 37.47543\n\n[[22]]\n[1] 36.16613\n\n[[23]]\n[1] 44.51898\n\n[[24]]\n[1] 39.7744\n\n[[25]]\n[1] 33.9218\n\n[[26]]\n[1] 45.03425\n\n[[27]]\n[1] 40.15056\n\n[[28]]\n[1] 32.50795\n\n[[29]]\n[1] 40.15056\n\n[[30]]\n[1] 47.83345\n\n[[31]]\n[1] 38.35439\n\n[[32]]\n[1] 58.39365\n\n[[33]]\n[1] 44.85211\n\n[[34]]\n[1] 27.85864\n\n[[35]]\n[1] 38.2151\n\n[[36]]\n[1] 32.12293\n\n[[37]]\n[1] 44.74688\n\n[[38]]\n[1] 41.53815\n\n[[39]]\n[1] 38.02669\n\n[[40]]\n[1] 46.029\n\n[[41]]\n[1] 44.51898\n\n[[42]]\n[1] 44.74688\n\n[[43]]\n[1] 32.1334\n\n[[44]]\n[1] 32.1334\n\n[[45]]\n[1] 27.85864\n\n[[46]]\n[1] 24.79082\n\n[[47]]\n[1] 24.79082\n\n[[48]]\n[1] 29.66852\n\n[[49]]\n[1] 32.50795\n\n[[50]]\n[1] 39.19375\n\n[[51]]\n[1] 29.66852\n\n[[52]]\n[1] 28.43598\n\n[[53]]\n[1] 50.50645\n\n[[54]]\n[1] 28.43598\n\n[[55]]\n[1] 45.721\n\n[[56]]\n[1] 48.22649\n\n[[57]]\n[1] 31.82332\n\n[[58]]\n[1] 31.82332\n\n[[59]]\n[1] 59.98421\n\n[[60]]\n[1] 37.44866\n\n[[61]]\n[1] 35.83248\n\n[[62]]\n[1] 39.77577\n\n[[63]]\n[1] 33.48816\n\n[[64]]\n[1] 34.34758\n\n[[65]]\n[1] 40.45791\n\n[[66]]\n[1] 32.58547\n\n[[67]]\n[1] 58.52704\n\n[[68]]\n[1] 32.58547\n\n[[69]]\n[1] 45.98097\n\n[[70]]\n[1] 37.99885\n\n[[71]]\n[1] 31.27538\n\n[[72]]\n[1] 44.49442\n\n[[73]]\n[1] 43.88878\n\n[[74]]\n[1] 31.27538\n\n[[75]]\n[1] 53.12656\n\n[[76]]\n[1] 40.45791\n\n[[77]]\n[1] 43.93382\n\n[[78]]\n[1] 43.03114\n\n[[79]]\n[1] 47.45858\n\n[[80]]\n[1] 34.68711\n\n[[81]]\n[1] 33.9218\n\n[[82]]\n[1] 37.80739\n\n[[83]]\n[1] 42.81869\n\n[[84]]\n[1] 34.45062\n\n[[85]]\n[1] 61.79116\n\n[[86]]\n[1] 34.90929\n\n[[87]]\n[1] 42.32891\n\n[[88]]\n[1] 48.59005\n\nattr(,\"class\")\n[1] \"nbdist\"\nattr(,\"call\")\nnbdists(nb = k1, coords = coords, longlat = TRUE)\n\n\n\nk1 <- knn2nb(knearneigh(coords))\nk1dists <- unlist(nbdists(k1, coords, longlat = TRUE))\nsummary(k1dists)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  24.79   32.57   38.01   39.07   44.52   61.79 \n\n\nThe summary report shows the largest distance of the first nearest neighbor is 61.79 km. Therefore, we will be using this as upper bound to ensure that all units will have at least one neighbor.\n\n\nComputing fixed distance weight matrix\nNow we will come up with the distance weight matrix by using dnearneigh() shown in code chunk below:\n\nwm_d62<-dnearneigh(coords,0,62,longlat=TRUE)\nsummary(wm_d62)\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 324 \nPercentage nonzero weights: 4.183884 \nAverage number of links: 3.681818 \nLink number distribution:\n\n 1  2  3  4  5  6 \n 6 15 14 26 20  7 \n6 least connected regions:\n6 15 30 32 56 65 with 1 link\n7 most connected regions:\n21 28 35 45 50 52 82 with 6 links\n\n\nBased on upper bound of 62km, the average number of neighbors for each area unit is 3.681818.\nNext, we will use str() to display the content of the wm_d62 matrix\n\nstr(wm_d62)\n\nList of 88\n $ : int [1:5] 3 4 5 57 64\n $ : int [1:4] 57 58 78 85\n $ : int [1:4] 1 4 5 57\n $ : int [1:3] 1 3 5\n $ : int [1:4] 1 3 4 85\n $ : int 69\n $ : int [1:2] 67 84\n $ : int [1:4] 9 46 47 78\n $ : int [1:4] 8 46 68 84\n $ : int [1:4] 16 22 70 72\n $ : int [1:3] 14 17 72\n $ : int [1:5] 13 60 61 63 83\n $ : int [1:4] 12 15 60 83\n $ : int [1:2] 11 17\n $ : int 13\n $ : int [1:4] 10 17 22 83\n $ : int [1:3] 11 14 16\n $ : int [1:3] 20 22 63\n $ : int [1:5] 20 21 73 74 82\n $ : int [1:5] 18 19 21 22 82\n $ : int [1:6] 19 20 35 74 82 86\n $ : int [1:4] 10 16 18 20\n $ : int [1:3] 41 77 82\n $ : int [1:4] 25 28 31 54\n $ : int [1:4] 24 28 33 81\n $ : int [1:4] 27 33 42 81\n $ : int [1:2] 26 29\n $ : int [1:6] 24 25 33 49 52 54\n $ : int [1:2] 27 37\n $ : int 33\n $ : int [1:2] 24 36\n $ : int 50\n $ : int [1:5] 25 26 28 30 81\n $ : int [1:3] 36 45 80\n $ : int [1:6] 21 41 46 47 80 82\n $ : int [1:5] 31 34 45 56 80\n $ : int [1:2] 29 42\n $ : int [1:3] 44 77 79\n $ : int [1:4] 40 42 43 81\n $ : int [1:3] 39 45 79\n $ : int [1:5] 23 35 45 79 82\n $ : int [1:5] 26 37 39 43 81\n $ : int [1:3] 39 42 44\n $ : int [1:2] 38 43\n $ : int [1:6] 34 36 40 41 79 80\n $ : int [1:5] 8 9 35 47 86\n $ : int [1:5] 8 35 46 80 86\n $ : int [1:5] 50 51 52 53 55\n $ : int [1:4] 28 51 52 54\n $ : int [1:6] 32 48 51 52 54 55\n $ : int [1:4] 48 49 50 52\n $ : int [1:6] 28 48 49 50 51 54\n $ : int [1:2] 48 55\n $ : int [1:5] 24 28 49 50 52\n $ : int [1:4] 48 50 53 75\n $ : int 36\n $ : int [1:5] 1 2 3 58 64\n $ : int [1:5] 2 57 64 66 68\n $ : int [1:3] 60 87 88\n $ : int [1:4] 12 13 59 61\n $ : int [1:5] 12 60 62 63 87\n $ : int [1:4] 61 63 77 87\n $ : int [1:5] 12 18 61 62 83\n $ : int [1:4] 1 57 58 76\n $ : int 76\n $ : int [1:5] 58 67 68 76 84\n $ : int [1:2] 7 66\n $ : int [1:4] 9 58 66 84\n $ : int [1:2] 6 75\n $ : int [1:3] 10 72 73\n $ : int [1:2] 73 74\n $ : int [1:3] 10 11 70\n $ : int [1:4] 19 70 71 74\n $ : int [1:5] 19 21 71 73 86\n $ : int [1:2] 55 69\n $ : int [1:3] 64 65 66\n $ : int [1:3] 23 38 62\n $ : int [1:2] 2 8\n $ : int [1:4] 38 40 41 45\n $ : int [1:5] 34 35 36 45 47\n $ : int [1:5] 25 26 33 39 42\n $ : int [1:6] 19 20 21 23 35 41\n $ : int [1:4] 12 13 16 63\n $ : int [1:4] 7 9 66 68\n $ : int [1:2] 2 5\n $ : int [1:4] 21 46 47 74\n $ : int [1:4] 59 61 62 88\n $ : int [1:2] 59 87\n - attr(*, \"class\")= chr \"nb\"\n - attr(*, \"region.id\")= chr [1:88] \"1\" \"2\" \"3\" \"4\" ...\n - attr(*, \"call\")= language dnearneigh(x = coords, d1 = 0, d2 = 62, longlat = TRUE)\n - attr(*, \"dnn\")= num [1:2] 0 62\n - attr(*, \"bounds\")= chr [1:2] \"GE\" \"LE\"\n - attr(*, \"nbtype\")= chr \"distance\"\n - attr(*, \"sym\")= logi TRUE\n\n\nWe can also display the structure of the weight matrix by combining table() and card() of spdep\n\ntable(hunan$County,card(wm_d62))\n\n               \n                1 2 3 4 5 6\n  Anhua         1 0 0 0 0 0\n  Anren         0 0 0 1 0 0\n  Anxiang       0 0 0 0 1 0\n  Baojing       0 0 0 0 1 0\n  Chaling       0 0 1 0 0 0\n  Changning     0 0 1 0 0 0\n  Changsha      0 0 0 1 0 0\n  Chengbu       0 1 0 0 0 0\n  Chenxi        0 0 0 1 0 0\n  Cili          0 1 0 0 0 0\n  Dao           0 0 0 1 0 0\n  Dongan        0 0 1 0 0 0\n  Dongkou       0 0 0 1 0 0\n  Fenghuang     0 0 0 1 0 0\n  Guidong       0 0 1 0 0 0\n  Guiyang       0 0 0 1 0 0\n  Guzhang       0 0 0 0 0 1\n  Hanshou       0 0 0 1 0 0\n  Hengdong      0 0 0 0 1 0\n  Hengnan       0 0 0 0 1 0\n  Hengshan      0 0 0 0 0 1\n  Hengyang      0 0 0 0 0 1\n  Hongjiang     0 0 0 0 1 0\n  Huarong       0 0 0 1 0 0\n  Huayuan       0 0 0 1 0 0\n  Huitong       0 0 0 1 0 0\n  Jiahe         0 0 0 0 1 0\n  Jianghua      0 0 1 0 0 0\n  Jiangyong     0 1 0 0 0 0\n  Jingzhou      0 1 0 0 0 0\n  Jinshi        0 0 0 1 0 0\n  Jishou        0 0 0 0 0 1\n  Lanshan       0 0 0 1 0 0\n  Leiyang       0 0 0 1 0 0\n  Lengshuijiang 0 0 1 0 0 0\n  Li            0 0 1 0 0 0\n  Lianyuan      0 0 0 0 1 0\n  Liling        0 1 0 0 0 0\n  Linli         0 0 0 1 0 0\n  Linwu         0 0 0 1 0 0\n  Linxiang      1 0 0 0 0 0\n  Liuyang       0 1 0 0 0 0\n  Longhui       0 0 1 0 0 0\n  Longshan      0 1 0 0 0 0\n  Luxi          0 0 0 0 1 0\n  Mayang        0 0 0 0 0 1\n  Miluo         0 0 0 0 1 0\n  Nan           0 0 0 0 1 0\n  Ningxiang     0 0 0 1 0 0\n  Ningyuan      0 0 0 0 1 0\n  Pingjiang     0 1 0 0 0 0\n  Qidong        0 0 1 0 0 0\n  Qiyang        0 0 1 0 0 0\n  Rucheng       0 1 0 0 0 0\n  Sangzhi       0 1 0 0 0 0\n  Shaodong      0 0 0 0 1 0\n  Shaoshan      0 0 0 0 1 0\n  Shaoyang      0 0 0 1 0 0\n  Shimen        1 0 0 0 0 0\n  Shuangfeng    0 0 0 0 0 1\n  Shuangpai     0 0 0 1 0 0\n  Suining       0 0 0 0 1 0\n  Taojiang      0 1 0 0 0 0\n  Taoyuan       0 1 0 0 0 0\n  Tongdao       0 1 0 0 0 0\n  Wangcheng     0 0 0 1 0 0\n  Wugang        0 0 1 0 0 0\n  Xiangtan      0 0 0 1 0 0\n  Xiangxiang    0 0 0 0 1 0\n  Xiangyin      0 0 0 1 0 0\n  Xinhua        0 0 0 0 1 0\n  Xinhuang      1 0 0 0 0 0\n  Xinning       0 1 0 0 0 0\n  Xinshao       0 0 0 0 0 1\n  Xintian       0 0 0 0 1 0\n  Xupu          0 1 0 0 0 0\n  Yanling       0 0 1 0 0 0\n  Yizhang       1 0 0 0 0 0\n  Yongshun      0 0 0 1 0 0\n  Yongxing      0 0 0 1 0 0\n  You           0 0 0 1 0 0\n  Yuanjiang     0 0 0 0 1 0\n  Yuanling      1 0 0 0 0 0\n  Yueyang       0 0 1 0 0 0\n  Zhijiang      0 0 0 0 1 0\n  Zhongfang     0 0 0 1 0 0\n  Zhuzhou       0 0 0 0 1 0\n  Zixing        0 0 1 0 0 0\n\n\nn.comp.nb(nb.obj) finds the number of disjoint connected subgraphs in the graph depicted by nb.obj -a spatial neighbors list object. (Reference from https://r-spatial.github.io/spdep/reference/compon.html)\nnc: Number of disjoint connected subgraphs\ncomp.id: vector with the indices of the disjoint connected subgraphs that the nodes in nb.obj belong to.\n\nn_comp<-n.comp.nb(wm_d62)\nn_comp\n\n$nc\n[1] 1\n\n$comp.id\n [1] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[39] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[77] 1 1 1 1 1 1 1 1 1 1 1 1\n\nn_comp$nc\n\n[1] 1\n\n\n\ntable(n_comp$comp.id)\n\n\n 1 \n88 \n\n\n\nPlotting fixed distance weight matrix\nNext, we will plot the distance weight matrix by using the below code chunks:\n\nplot(hunan$geometry,border=\"lightgrey\")\nplot(wm_d62,coords,add=TRUE)\nplot(k1,coords,add=TRUE,col=\"red\",length=0.08)\n\n\n\n\nThe red lines show the links of the 1st nearest neighbors while the black line show the links of neighbors within the cut-off distance of 62 km.\nAlternatively, we can plot these 2 maps side by side by using the code chunks below:\n\npar(mfrow=c(1,2))\nplot(hunan$geometry,border=\"lightgrey\")\nplot(k1,coords,add=TRUE,col=\"red\",length=0.08,main=\"1st nearest neighbors\")\nplot(hunan$geometry,border=\"lightgrey\")\nplot(wm_d62,coords,add=TRUE,col=\"black\",pch=18,cex=0.6,main=\"Distance link within 62km\")\n\n\n\n\n\n\n\nComputing adaptive distance weight matrix\nIn this section, I learn how to control the number of neighbors directly using k-nearest neighbors.\n\nknn6<-knn2nb(knearneigh(coords,k=6))\nknn6\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 528 \nPercentage nonzero weights: 6.818182 \nAverage number of links: 6 \nNon-symmetric neighbours list\n\n\nWe can display the content of the above knn6 by using str()\n\nstr(knn6)\n\nList of 88\n $ : int [1:6] 2 3 4 5 57 64\n $ : int [1:6] 1 3 57 58 78 85\n $ : int [1:6] 1 2 4 5 57 85\n $ : int [1:6] 1 3 5 6 69 85\n $ : int [1:6] 1 3 4 6 69 85\n $ : int [1:6] 3 4 5 69 75 85\n $ : int [1:6] 9 66 67 71 74 84\n $ : int [1:6] 9 46 47 78 80 86\n $ : int [1:6] 8 46 66 68 84 86\n $ : int [1:6] 16 19 22 70 72 73\n $ : int [1:6] 10 14 16 17 70 72\n $ : int [1:6] 13 15 60 61 63 83\n $ : int [1:6] 12 15 60 61 63 83\n $ : int [1:6] 11 15 16 17 72 83\n $ : int [1:6] 12 13 14 17 60 83\n $ : int [1:6] 10 11 17 22 72 83\n $ : int [1:6] 10 11 14 16 72 83\n $ : int [1:6] 20 22 23 63 77 83\n $ : int [1:6] 10 20 21 73 74 82\n $ : int [1:6] 18 19 21 22 23 82\n $ : int [1:6] 19 20 35 74 82 86\n $ : int [1:6] 10 16 18 19 20 83\n $ : int [1:6] 18 20 41 77 79 82\n $ : int [1:6] 25 28 31 52 54 81\n $ : int [1:6] 24 28 31 33 54 81\n $ : int [1:6] 25 27 29 33 42 81\n $ : int [1:6] 26 29 30 37 42 81\n $ : int [1:6] 24 25 33 49 52 54\n $ : int [1:6] 26 27 37 42 43 81\n $ : int [1:6] 26 27 28 33 49 81\n $ : int [1:6] 24 25 36 39 40 54\n $ : int [1:6] 24 31 50 54 55 56\n $ : int [1:6] 25 26 28 30 49 81\n $ : int [1:6] 36 40 41 45 56 80\n $ : int [1:6] 21 41 46 47 80 82\n $ : int [1:6] 31 34 40 45 56 80\n $ : int [1:6] 26 27 29 42 43 44\n $ : int [1:6] 23 43 44 62 77 79\n $ : int [1:6] 25 40 42 43 44 81\n $ : int [1:6] 31 36 39 43 45 79\n $ : int [1:6] 23 35 45 79 80 82\n $ : int [1:6] 26 27 37 39 43 81\n $ : int [1:6] 37 39 40 42 44 79\n $ : int [1:6] 37 38 39 42 43 79\n $ : int [1:6] 34 36 40 41 79 80\n $ : int [1:6] 8 9 35 47 78 86\n $ : int [1:6] 8 21 35 46 80 86\n $ : int [1:6] 49 50 51 52 53 55\n $ : int [1:6] 28 33 48 51 52 54\n $ : int [1:6] 32 48 51 52 54 55\n $ : int [1:6] 28 48 49 50 52 54\n $ : int [1:6] 28 48 49 50 51 54\n $ : int [1:6] 48 50 51 52 55 75\n $ : int [1:6] 24 28 49 50 51 52\n $ : int [1:6] 32 48 50 52 53 75\n $ : int [1:6] 32 34 36 78 80 85\n $ : int [1:6] 1 2 3 58 64 68\n $ : int [1:6] 2 57 64 66 68 78\n $ : int [1:6] 12 13 60 61 87 88\n $ : int [1:6] 12 13 59 61 63 87\n $ : int [1:6] 12 13 60 62 63 87\n $ : int [1:6] 12 38 61 63 77 87\n $ : int [1:6] 12 18 60 61 62 83\n $ : int [1:6] 1 3 57 58 68 76\n $ : int [1:6] 58 64 66 67 68 76\n $ : int [1:6] 9 58 67 68 76 84\n $ : int [1:6] 7 65 66 68 76 84\n $ : int [1:6] 9 57 58 66 78 84\n $ : int [1:6] 4 5 6 32 75 85\n $ : int [1:6] 10 16 19 22 72 73\n $ : int [1:6] 7 19 73 74 84 86\n $ : int [1:6] 10 11 14 16 17 70\n $ : int [1:6] 10 19 21 70 71 74\n $ : int [1:6] 19 21 71 73 84 86\n $ : int [1:6] 6 32 50 53 55 69\n $ : int [1:6] 58 64 65 66 67 68\n $ : int [1:6] 18 23 38 61 62 63\n $ : int [1:6] 2 8 9 46 58 68\n $ : int [1:6] 38 40 41 43 44 45\n $ : int [1:6] 34 35 36 41 45 47\n $ : int [1:6] 25 26 28 33 39 42\n $ : int [1:6] 19 20 21 23 35 41\n $ : int [1:6] 12 13 15 16 22 63\n $ : int [1:6] 7 9 66 68 71 74\n $ : int [1:6] 2 3 4 5 56 69\n $ : int [1:6] 8 9 21 46 47 74\n $ : int [1:6] 59 60 61 62 63 88\n $ : int [1:6] 59 60 61 62 63 87\n - attr(*, \"region.id\")= chr [1:88] \"1\" \"2\" \"3\" \"4\" ...\n - attr(*, \"call\")= language knearneigh(x = coords, k = 6)\n - attr(*, \"sym\")= logi FALSE\n - attr(*, \"type\")= chr \"knn\"\n - attr(*, \"knn-k\")= num 6\n - attr(*, \"class\")= chr \"nb\"\n\n\nNow each county has exactly six neighbors.\n\nPlotting distance based neighbors\n\nplot(hunan$geometry,border=\"lightgrey\")\nplot(knn6,coords,pch=18,cex=0.6,add=TRUE,col=\"red\")"
  },
  {
    "objectID": "In-class_Ex1/In-class_Ex1.html#weight-based-on-idw",
    "href": "In-class_Ex1/In-class_Ex1.html#weight-based-on-idw",
    "title": "In-class Exercise 1",
    "section": "Weight based on IDW",
    "text": "Weight based on IDW\nIn this section, I learn how to compute a spatial weight matrix based on Inverse Distance Method\nFirst, I will need to compute the distance between counties by using nbdists() of spdep package.\nNote that in the below example we are using Queen’s method.\n\ndist<-nbdists(wm_q,coords,longlat=TRUE)\nids<-lapply(dist,function(x) 1/(x))\nids\n\n[[1]]\n[1] 0.01535405 0.03916350 0.01820896 0.02807922 0.01145113\n\n[[2]]\n[1] 0.01535405 0.01764308 0.01925924 0.02323898 0.01719350\n\n[[3]]\n[1] 0.03916350 0.02822040 0.03695795 0.01395765\n\n[[4]]\n[1] 0.01820896 0.02822040 0.03414741 0.01539065\n\n[[5]]\n[1] 0.03695795 0.03414741 0.01524598 0.01618354\n\n[[6]]\n[1] 0.015390649 0.015245977 0.021748129 0.011883901 0.009810297\n\n[[7]]\n[1] 0.01708612 0.01473997 0.01150924 0.01872915\n\n[[8]]\n[1] 0.02022144 0.03453056 0.02529256 0.01036340 0.02284457 0.01500600 0.01515314\n\n[[9]]\n[1] 0.02022144 0.01574888 0.02109502 0.01508028 0.02902705 0.01502980\n\n[[10]]\n[1] 0.02281552 0.01387777 0.01538326 0.01346650 0.02100510 0.02631658 0.01874863\n[8] 0.01500046\n\n[[11]]\n[1] 0.01882869 0.02243492 0.02247473\n\n[[12]]\n[1] 0.02779227 0.02419652 0.02333385 0.02986130 0.02335429\n\n[[13]]\n[1] 0.02779227 0.02650020 0.02670323 0.01714243\n\n[[14]]\n[1] 0.01882869 0.01233868 0.02098555\n\n[[15]]\n[1] 0.02650020 0.01233868 0.01096284 0.01562226\n\n[[16]]\n[1] 0.02281552 0.02466962 0.02765018 0.01476814 0.01671430\n\n[[17]]\n[1] 0.01387777 0.02243492 0.02098555 0.01096284 0.02466962 0.01593341 0.01437996\n\n[[18]]\n[1] 0.02039779 0.02032767 0.01481665 0.01473691 0.01459380\n\n[[19]]\n[1] 0.01538326 0.01926323 0.02668415 0.02140253 0.01613589 0.01412874\n\n[[20]]\n[1] 0.01346650 0.02039779 0.01926323 0.01723025 0.02153130 0.01469240 0.02327034\n\n[[21]]\n[1] 0.02668415 0.01723025 0.01766299 0.02644986 0.02163800\n\n[[22]]\n[1] 0.02100510 0.02765018 0.02032767 0.02153130 0.01489296\n\n[[23]]\n[1] 0.01481665 0.01469240 0.01401432 0.02246233 0.01880425 0.01530458 0.01849605\n\n[[24]]\n[1] 0.02354598 0.01837201 0.02607264 0.01220154 0.02514180\n\n[[25]]\n[1] 0.02354598 0.02188032 0.01577283 0.01949232 0.02947957\n\n[[26]]\n[1] 0.02155798 0.01745522 0.02212108 0.02220532\n\n[[27]]\n[1] 0.02155798 0.02490625 0.01562326\n\n[[28]]\n[1] 0.01837201 0.02188032 0.02229549 0.03076171 0.02039506\n\n[[29]]\n[1] 0.02490625 0.01686587 0.01395022\n\n[[30]]\n[1] 0.02090587\n\n[[31]]\n[1] 0.02607264 0.01577283 0.01219005 0.01724850 0.01229012 0.01609781 0.01139438\n[8] 0.01150130\n\n[[32]]\n[1] 0.01220154 0.01219005 0.01712515 0.01340413 0.01280928 0.01198216 0.01053374\n[8] 0.01065655\n\n[[33]]\n[1] 0.01949232 0.01745522 0.02229549 0.02090587 0.01979045\n\n[[34]]\n[1] 0.03113041 0.03589551 0.02882915\n\n[[35]]\n[1] 0.01766299 0.02185795 0.02616766 0.02111721 0.02108253 0.01509020\n\n[[36]]\n[1] 0.01724850 0.03113041 0.01571707 0.01860991 0.02073549 0.01680129\n\n[[37]]\n[1] 0.01686587 0.02234793 0.01510990 0.01550676\n\n[[38]]\n[1] 0.01401432 0.02407426 0.02276151 0.01719415\n\n[[39]]\n[1] 0.01229012 0.02172543 0.01711924 0.02629732 0.01896385\n\n[[40]]\n[1] 0.01609781 0.01571707 0.02172543 0.01506473 0.01987922 0.01894207\n\n[[41]]\n[1] 0.02246233 0.02185795 0.02205991 0.01912542 0.01601083 0.01742892\n\n[[42]]\n[1] 0.02212108 0.01562326 0.01395022 0.02234793 0.01711924 0.01836831 0.01683518\n\n[[43]]\n[1] 0.01510990 0.02629732 0.01506473 0.01836831 0.03112027 0.01530782\n\n[[44]]\n[1] 0.01550676 0.02407426 0.03112027 0.01486508\n\n[[45]]\n[1] 0.03589551 0.01860991 0.01987922 0.02205991 0.02107101 0.01982700\n\n[[46]]\n[1] 0.03453056 0.04033752 0.02689769\n\n[[47]]\n[1] 0.02529256 0.02616766 0.04033752 0.01949145 0.02181458\n\n[[48]]\n[1] 0.02313819 0.03370576 0.02289485 0.01630057 0.01818085\n\n[[49]]\n[1] 0.03076171 0.02138091 0.02394529 0.01990000\n\n[[50]]\n[1] 0.01712515 0.02313819 0.02551427 0.02051530 0.02187179\n\n[[51]]\n[1] 0.03370576 0.02138091 0.02873854\n\n[[52]]\n[1] 0.02289485 0.02394529 0.02551427 0.02873854 0.03516672\n\n[[53]]\n[1] 0.01630057 0.01979945 0.01253977\n\n[[54]]\n[1] 0.02514180 0.02039506 0.01340413 0.01990000 0.02051530 0.03516672\n\n[[55]]\n[1] 0.01280928 0.01818085 0.02187179 0.01979945 0.01882298\n\n[[56]]\n[1] 0.01036340 0.01139438 0.01198216 0.02073549 0.01214479 0.01362855 0.01341697\n\n[[57]]\n[1] 0.028079221 0.017643082 0.031423501 0.029114131 0.013520292 0.009903702\n\n[[58]]\n[1] 0.01925924 0.03142350 0.02722997 0.01434859 0.01567192\n\n[[59]]\n[1] 0.01696711 0.01265572 0.01667105 0.01785036\n\n[[60]]\n[1] 0.02419652 0.02670323 0.01696711 0.02343040\n\n[[61]]\n[1] 0.02333385 0.01265572 0.02343040 0.02514093 0.02790764 0.01219751 0.02362452\n\n[[62]]\n[1] 0.02514093 0.02002219 0.02110260\n\n[[63]]\n[1] 0.02986130 0.02790764 0.01407043 0.01805987\n\n[[64]]\n[1] 0.02911413 0.01689892\n\n[[65]]\n[1] 0.02471705\n\n[[66]]\n[1] 0.01574888 0.01726461 0.03068853 0.01954805 0.01810569\n\n[[67]]\n[1] 0.01708612 0.01726461 0.01349843 0.01361172\n\n[[68]]\n[1] 0.02109502 0.02722997 0.03068853 0.01406357 0.01546511\n\n[[69]]\n[1] 0.02174813 0.01645838 0.01419926\n\n[[70]]\n[1] 0.02631658 0.01963168 0.02278487\n\n[[71]]\n[1] 0.01473997 0.01838483 0.03197403\n\n[[72]]\n[1] 0.01874863 0.02247473 0.01476814 0.01593341 0.01963168\n\n[[73]]\n[1] 0.01500046 0.02140253 0.02278487 0.01838483 0.01652709\n\n[[74]]\n[1] 0.01150924 0.01613589 0.03197403 0.01652709 0.01342099 0.02864567\n\n[[75]]\n[1] 0.011883901 0.010533736 0.012539774 0.018822977 0.016458383 0.008217581\n\n[[76]]\n[1] 0.01352029 0.01434859 0.01689892 0.02471705 0.01954805 0.01349843 0.01406357\n\n[[77]]\n[1] 0.014736909 0.018804247 0.022761507 0.012197506 0.020022195 0.014070428\n[7] 0.008440896\n\n[[78]]\n[1] 0.02323898 0.02284457 0.01508028 0.01214479 0.01567192 0.01546511 0.01140779\n\n[[79]]\n[1] 0.01530458 0.01719415 0.01894207 0.01912542 0.01530782 0.01486508 0.02107101\n\n[[80]]\n[1] 0.01500600 0.02882915 0.02111721 0.01680129 0.01601083 0.01982700 0.01949145\n[8] 0.01362855\n\n[[81]]\n[1] 0.02947957 0.02220532 0.01150130 0.01979045 0.01896385 0.01683518\n\n[[82]]\n[1] 0.02327034 0.02644986 0.01849605 0.02108253 0.01742892\n\n[[83]]\n[1] 0.023354289 0.017142433 0.015622258 0.016714303 0.014379961 0.014593799\n[7] 0.014892965 0.018059871 0.008440896\n\n[[84]]\n[1] 0.01872915 0.02902705 0.01810569 0.01361172 0.01342099 0.01297994\n\n[[85]]\n [1] 0.011451133 0.017193502 0.013957649 0.016183544 0.009810297 0.010656545\n [7] 0.013416965 0.009903702 0.014199260 0.008217581 0.011407794\n\n[[86]]\n[1] 0.01515314 0.01502980 0.01412874 0.02163800 0.01509020 0.02689769 0.02181458\n[8] 0.02864567 0.01297994\n\n[[87]]\n[1] 0.01667105 0.02362452 0.02110260 0.02058034\n\n[[88]]\n[1] 0.01785036 0.02058034\n\n\n\nRow-standardized weights matrix\nWe use nb2listw() function to supplement a neighbor list with spatial weights for the chosen coding scheme.\nStyle argument in this nb2listw() can be B (basic binary coding), W (row standardized-sum over all links to n), C (globally standardized)-sum over all links to n).\n\nrswm_q<-nb2listw(wm_q,style=\"W\",zero.policy=TRUE)\nrswm_q\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: W \nWeights constants summary:\n   n   nn S0       S1       S2\nW 88 7744 88 37.86334 365.9147\n\n\nzero.policy=TRUE option allows for lists of non-neighbors. However, this has to be used with caution since users may not be aware of missing data in their data set. However, zero.policy=FALSE would return error.\nTo see the weight of the first polygon’s four neighbor type:\n\nrswm_q$weights[10]\n\n[[1]]\n[1] 0.125 0.125 0.125 0.125 0.125 0.125 0.125 0.125\n\n\nEach neighbor is assigned 0.2 of the total weight. When R computes the average neighboring income values, each neighbor’s income values will be multiplied by 0.2 before being tallied.\nWe can also derive a row standardized inverse distance weight matrix\n\nrswm_ids<-nb2listw(wm_q,glist=ids,style=\"B\",zero.policy = TRUE)\nrswm_ids\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: B \nWeights constants summary:\n   n   nn       S0        S1     S2\nB 88 7744 8.786867 0.3776535 3.8137\n\n\n\nrswm_ids$weights[1]\n\n[[1]]\n[1] 0.01535405 0.03916350 0.01820896 0.02807922 0.01145113\n\n\n\nsummary(unlist(rswm_ids$weights))\n\n    Min.  1st Qu.   Median     Mean  3rd Qu.     Max. \n0.008218 0.015088 0.018739 0.019614 0.022823 0.040338"
  },
  {
    "objectID": "In-class_Ex1/In-class_Ex1.html#application-of-spatial-weight-matrix",
    "href": "In-class_Ex1/In-class_Ex1.html#application-of-spatial-weight-matrix",
    "title": "In-class Exercise 1",
    "section": "Application of Spatial Weight Matrix",
    "text": "Application of Spatial Weight Matrix\nIn this section, I learn four different spatial lagged variables, namely:\n\nspatial lag with row standardized weights\nspatial lag as a sum of neighboring values\nspatial window average\nspatial window sum\n\n\nSpatial lag with row-standardized weights\n\nGDPPC.lag<-lag.listw(rswm_q,hunan$GDPPC)\nGDPPC.lag\n\n [1] 24847.20 22724.80 24143.25 27737.50 27270.25 21248.80 43747.00 33582.71\n [9] 45651.17 32027.62 32671.00 20810.00 25711.50 30672.33 33457.75 31689.20\n[17] 20269.00 23901.60 25126.17 21903.43 22718.60 25918.80 20307.00 20023.80\n[25] 16576.80 18667.00 14394.67 19848.80 15516.33 20518.00 17572.00 15200.12\n[33] 18413.80 14419.33 24094.50 22019.83 12923.50 14756.00 13869.80 12296.67\n[41] 15775.17 14382.86 11566.33 13199.50 23412.00 39541.00 36186.60 16559.60\n[49] 20772.50 19471.20 19827.33 15466.80 12925.67 18577.17 14943.00 24913.00\n[57] 25093.00 24428.80 17003.00 21143.75 20435.00 17131.33 24569.75 23835.50\n[65] 26360.00 47383.40 55157.75 37058.00 21546.67 23348.67 42323.67 28938.60\n[73] 25880.80 47345.67 18711.33 29087.29 20748.29 35933.71 15439.71 29787.50\n[81] 18145.00 21617.00 29203.89 41363.67 22259.09 44939.56 16902.00 16930.00\n\n\n\nnb85 <- wm_q[[85]]\nnb85 <- hunan$GDPPC[nb85]\nnb85\n\n [1] 23667 20981 34592 25554 27137 24194 14567 21311 18714 14624 19509\n\n\nWe then append the spatial lag GDPPC values onto hunan sf data frame by using the code chunk below:\n\nlag.list<-list(hunan$NAME_3,lag.listw(rswm_q,hunan$GDPPC))\nlag.res<-as.data.frame(lag.list)\ncolnames(lag.res)<-c(\"NAME_3\",\"lag GDPPC\")\nhunan<-left_join(hunan,lag.res)\n\nJoining, by = \"NAME_3\"\n\n\n\nhead(hunan)\n\nSimple feature collection with 6 features and 36 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 110.4922 ymin: 28.61762 xmax: 112.3013 ymax: 30.12812\nGeodetic CRS:  WGS 84\n   NAME_2  ID_3  NAME_3   ENGTYPE_3 Shape_Leng Shape_Area  County    City\n1 Changde 21098 Anxiang      County   1.869074 0.10056190 Anxiang Changde\n2 Changde 21100 Hanshou      County   2.360691 0.19978745 Hanshou Changde\n3 Changde 21101  Jinshi County City   1.425620 0.05302413  Jinshi Changde\n4 Changde 21102      Li      County   3.474325 0.18908121      Li Changde\n5 Changde 21103   Linli      County   2.289506 0.11450357   Linli Changde\n6 Changde 21104  Shimen      County   4.171918 0.37194707  Shimen Changde\n  avg_wage deposite     FAI Gov_Rev Gov_Exp     GDP GDPPC     GIO   Loan  NIPCR\n1    31935   5517.2  3541.0  243.64  1779.5 12482.0 23667  5108.9 2806.9 7693.7\n2    32265   7979.0  8665.0  386.13  2062.4 15788.0 20981 13491.0 4550.0 8269.9\n3    28692   4581.7  4777.0  373.31  1148.4  8706.9 34592 10935.0 2242.0 8169.9\n4    32541  13487.0 16066.0  709.61  2459.5 20322.0 24473 18402.0 6748.0 8377.0\n5    32667    564.1  7781.2  336.86  1538.7 10355.0 25554  8214.0  358.0 8143.1\n6    33261   8334.4 10531.0  548.33  2178.8 16293.0 27137 17795.0 6026.5 6156.0\n   Bed    Emp  EmpR EmpRT Pri_Stu Sec_Stu Household Household_R NOIP Pop_R\n1 1931 336.39 270.5 205.9  19.584  17.819     148.1       135.4   53 346.0\n2 2560 456.78 388.8 246.7  42.097  33.029     240.2       208.7   95 553.2\n3  848 122.78  82.1  61.7   8.723   7.592      81.9        43.7   77  92.4\n4 2038 513.44 426.8 227.1  38.975  33.938     268.5       256.0   96 539.7\n5 1440 307.36 272.2 100.8  23.286  18.943     129.1       157.2   99 246.6\n6 2502 392.05 329.6 193.8  29.245  26.104     190.6       184.7  122 399.2\n    RSCG Pop_T    Agri Service Disp_Inc      RORP    ROREmp lag GDPPC\n1 3957.9 528.3 4524.41   14100    16610 0.6549309 0.8041262  24847.20\n2 4460.5 804.6 6545.35   17727    18925 0.6875466 0.8511756  22724.80\n3 3683.0 251.8 2562.46    7525    19498 0.3669579 0.6686757  24143.25\n4 7110.2 832.5 7562.34   53160    18985 0.6482883 0.8312558  27737.50\n5 3604.9 409.3 3583.91    7031    18604 0.6024921 0.8856065  27270.25\n6 6490.7 600.5 5266.51    6981    19275 0.6647794 0.8407091  21248.80\n                        geometry\n1 POLYGON ((112.0625 29.75523...\n2 POLYGON ((112.2288 29.11684...\n3 POLYGON ((111.8927 29.6013,...\n4 POLYGON ((111.3731 29.94649...\n5 POLYGON ((111.6324 29.76288...\n6 POLYGON ((110.8825 30.11675...\n\n\nNext, we will plot both the GDPPC and lag GDPPC using qtm() for comparison\n\ngdppc<-qtm(hunan,\"GDPPC\")\nlag_gdppc<-qtm(hunan,\"lag GDPPC\")\ntmap_arrange(gdppc,lag_gdppc,asp=1,ncol=2)\n\n\n\n\n\n\nSpatial lag as a sum of neighboring values\n\nb_weights<-lapply(wm_q,function(x) 0*x+1)\nb_weights2<-nb2listw(wm_q,glist=b_weights,style=\"B\")\nb_weights2\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: B \nWeights constants summary:\n   n   nn  S0  S1    S2\nB 88 7744 448 896 10224\n\n\n\nlag_sum<-list(hunan$NAME_3,lag.listw(b_weights2,hunan$GDPPC))\nlag.res<-as.data.frame(lag_sum)\ncolnames(lag.res)<-c(\"NAME_3\",\"lag sum GDPPC\")\n\n\nlag_sum\n\n[[1]]\n [1] \"Anxiang\"       \"Hanshou\"       \"Jinshi\"        \"Li\"           \n [5] \"Linli\"         \"Shimen\"        \"Liuyang\"       \"Ningxiang\"    \n [9] \"Wangcheng\"     \"Anren\"         \"Guidong\"       \"Jiahe\"        \n[13] \"Linwu\"         \"Rucheng\"       \"Yizhang\"       \"Yongxing\"     \n[17] \"Zixing\"        \"Changning\"     \"Hengdong\"      \"Hengnan\"      \n[21] \"Hengshan\"      \"Leiyang\"       \"Qidong\"        \"Chenxi\"       \n[25] \"Zhongfang\"     \"Huitong\"       \"Jingzhou\"      \"Mayang\"       \n[29] \"Tongdao\"       \"Xinhuang\"      \"Xupu\"          \"Yuanling\"     \n[33] \"Zhijiang\"      \"Lengshuijiang\" \"Shuangfeng\"    \"Xinhua\"       \n[37] \"Chengbu\"       \"Dongan\"        \"Dongkou\"       \"Longhui\"      \n[41] \"Shaodong\"      \"Suining\"       \"Wugang\"        \"Xinning\"      \n[45] \"Xinshao\"       \"Shaoshan\"      \"Xiangxiang\"    \"Baojing\"      \n[49] \"Fenghuang\"     \"Guzhang\"       \"Huayuan\"       \"Jishou\"       \n[53] \"Longshan\"      \"Luxi\"          \"Yongshun\"      \"Anhua\"        \n[57] \"Nan\"           \"Yuanjiang\"     \"Jianghua\"      \"Lanshan\"      \n[61] \"Ningyuan\"      \"Shuangpai\"     \"Xintian\"       \"Huarong\"      \n[65] \"Linxiang\"      \"Miluo\"         \"Pingjiang\"     \"Xiangyin\"     \n[69] \"Cili\"          \"Chaling\"       \"Liling\"        \"Yanling\"      \n[73] \"You\"           \"Zhuzhou\"       \"Sangzhi\"       \"Yueyang\"      \n[77] \"Qiyang\"        \"Taojiang\"      \"Shaoyang\"      \"Lianyuan\"     \n[81] \"Hongjiang\"     \"Hengyang\"      \"Guiyang\"       \"Changsha\"     \n[85] \"Taoyuan\"       \"Xiangtan\"      \"Dao\"           \"Jiangyong\"    \n\n[[2]]\n [1] 124236 113624  96573 110950 109081 106244 174988 235079 273907 256221\n[11]  98013 104050 102846  92017 133831 158446 141883 119508 150757 153324\n[21] 113593 129594 142149 100119  82884  74668  43184  99244  46549  20518\n[31] 140576 121601  92069  43258 144567 132119  51694  59024  69349  73780\n[41]  94651 100680  69398  52798 140472 118623 180933  82798  83090  97356\n[51]  59482  77334  38777 111463  74715 174391 150558 122144  68012  84575\n[61] 143045  51394  98279  47671  26360 236917 220631 185290  64640  70046\n[71] 126971 144693 129404 284074 112268 203611 145238 251536 108078 238300\n[81] 108870 108085 262835 248182 244850 404456  67608  33860\n\n\nNext we append the lag_sum GDPPC field into hunan sf data frame by using left_join() function.\n\nhunan<-left_join(hunan,lag.res)\n\nJoining, by = \"NAME_3\"\n\n\nLast, we will plot both GDPPC and lag sum GDPPC for comparison using the code chunk below:\n\ngdppc<-qtm(hunan,\"GDPPC\")\nlag_sum_gdppc<-qtm(hunan,\"lag sum GDPPC\")\ntmap_arrange(gdppc,lag_sum_gdppc,asp=1,ncol=2)\n\n\n\n\n\n\nSpatial window average\nThe spatial window average uses row standardized weights and includes the diagonal element. To do this in R, we need to go back to the neighbor structure and add in the diagonal element before proceeding to assign weights.\n\nwm_q1<-wm_q\nwm_q1\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\n\nTo add the diagonal element to the neighbour list, we use include.self() function.\n\nwm_q2<-include.self(wm_q1)\n\n\nwm_q2\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 536 \nPercentage nonzero weights: 6.921488 \nAverage number of links: 6.090909 \n\n\n\nwm_q1\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\n\nWe can see the difference between wm_q1 and wm_q2 in terms of number of non-zero links, percentage of non-zero links and average number of links.\nNext, we assign binary weights to the neighbor structure that includes the diagonal element.\n\nwm_q2<-nb2listw(wm_q2)\nwm_q2\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 536 \nPercentage nonzero weights: 6.921488 \nAverage number of links: 6.090909 \n\nWeights style: W \nWeights constants summary:\n   n   nn S0       S1       S2\nW 88 7744 88 30.90265 357.5308\n\n\nNext, we will create the lag variable from our weight structure and GDPPC variable.\n\nlag_w_avg_gdppc<-lag.listw(wm_q2,hunan$GDPPC)\nlag_w_avg_gdppc\n\n [1] 24650.50 22434.17 26233.00 27084.60 26927.00 22230.17 47621.20 37160.12\n [9] 49224.71 29886.89 26627.50 22690.17 25366.40 25825.75 30329.00 32682.83\n[17] 25948.62 23987.67 25463.14 21904.38 23127.50 25949.83 20018.75 19524.17\n[25] 18955.00 17800.40 15883.00 18831.33 14832.50 17965.00 17159.89 16199.44\n[33] 18764.50 26878.75 23188.86 20788.14 12365.20 15985.00 13764.83 11907.43\n[41] 17128.14 14593.62 11644.29 12706.00 21712.29 43548.25 35049.00 16226.83\n[49] 19294.40 18156.00 19954.75 18145.17 12132.75 18419.29 14050.83 23619.75\n[57] 24552.71 24733.67 16762.60 20932.60 19467.75 18334.00 22541.00 26028.00\n[65] 29128.50 46569.00 47576.60 36545.50 20838.50 22531.00 42115.50 27619.00\n[73] 27611.33 44523.29 18127.43 28746.38 20734.50 33880.62 14716.38 28516.22\n[81] 18086.14 21244.50 29568.80 48119.71 22310.75 43151.60 17133.40 17009.33\n\n\nNext, we convert the lag variable list into a data frame by using as.data.frame() in the below code chunks:\n\nlag.list.wm_q2<-list(hunan$NAME_3,lag.listw(wm_q2,hunan$GDPPC))\nlag_wm_q2.res<-as.data.frame(lag.list.wm_q2)\ncolnames(lag_wm_q2.res)<-c(\"NAME_3\",\"lag_window_avg GDPPC\")\n\nNext we will join hunan data frame and lag_wm_q1.res data frame together by using left_join().\n\nhunan<-left_join(hunan,lag_wm_q2.res)\n\nJoining, by = \"NAME_3\"\n\n\nLast, we will use qtm() of tmap package to plot the GDPPC and lag_window_avg GDPPC for comparison.\n\ngdppc<-qtm(hunan,\"GDPPC\")\nw_avg_gdppc<-qtm(hunan,\"lag_window_avg GDPPC\")\ntmap_arrange(gdppc,w_avg_gdppc,asp=1,ncol=2)\n\n\n\n\n\n\nSpatial window sum\nThe spatial window sum is the counter part of the spatial window average but without using the row standardized weights.\nWe start with assigning binary weights to the neighbor structure that includes the diagonal element.\n\nwm_q1<-wm_q\n\n\ninclude.self(wm_q1)\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 536 \nPercentage nonzero weights: 6.921488 \nAverage number of links: 6.090909 \n\n\n\nwm_q1\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\n\nAssign binary weights to the neighbor structures that include the diagonal element.\n\nb_weights<-lapply(wm_q1, function(x) 0*x+1)\nb_weights[1]\n\n[[1]]\n[1] 1 1 1 1 1\n\n\nAgain we will be using nb2listw() and glist() to assign weight values.\n\nb_weights2<-nb2listw(wm_q1,glist=b_weights,style=\"B\")\nb_weights2\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: B \nWeights constants summary:\n   n   nn  S0  S1    S2\nB 88 7744 448 896 10224\n\n\nWe then compute the lag variable with lag.listw()\n\nw_sum_gdppc<-list(hunan$NAME_3,lag.listw(b_weights2,hunan$GDPPC))\nw_sum_gdppc\n\n[[1]]\n [1] \"Anxiang\"       \"Hanshou\"       \"Jinshi\"        \"Li\"           \n [5] \"Linli\"         \"Shimen\"        \"Liuyang\"       \"Ningxiang\"    \n [9] \"Wangcheng\"     \"Anren\"         \"Guidong\"       \"Jiahe\"        \n[13] \"Linwu\"         \"Rucheng\"       \"Yizhang\"       \"Yongxing\"     \n[17] \"Zixing\"        \"Changning\"     \"Hengdong\"      \"Hengnan\"      \n[21] \"Hengshan\"      \"Leiyang\"       \"Qidong\"        \"Chenxi\"       \n[25] \"Zhongfang\"     \"Huitong\"       \"Jingzhou\"      \"Mayang\"       \n[29] \"Tongdao\"       \"Xinhuang\"      \"Xupu\"          \"Yuanling\"     \n[33] \"Zhijiang\"      \"Lengshuijiang\" \"Shuangfeng\"    \"Xinhua\"       \n[37] \"Chengbu\"       \"Dongan\"        \"Dongkou\"       \"Longhui\"      \n[41] \"Shaodong\"      \"Suining\"       \"Wugang\"        \"Xinning\"      \n[45] \"Xinshao\"       \"Shaoshan\"      \"Xiangxiang\"    \"Baojing\"      \n[49] \"Fenghuang\"     \"Guzhang\"       \"Huayuan\"       \"Jishou\"       \n[53] \"Longshan\"      \"Luxi\"          \"Yongshun\"      \"Anhua\"        \n[57] \"Nan\"           \"Yuanjiang\"     \"Jianghua\"      \"Lanshan\"      \n[61] \"Ningyuan\"      \"Shuangpai\"     \"Xintian\"       \"Huarong\"      \n[65] \"Linxiang\"      \"Miluo\"         \"Pingjiang\"     \"Xiangyin\"     \n[69] \"Cili\"          \"Chaling\"       \"Liling\"        \"Yanling\"      \n[73] \"You\"           \"Zhuzhou\"       \"Sangzhi\"       \"Yueyang\"      \n[77] \"Qiyang\"        \"Taojiang\"      \"Shaoyang\"      \"Lianyuan\"     \n[81] \"Hongjiang\"     \"Hengyang\"      \"Guiyang\"       \"Changsha\"     \n[85] \"Taoyuan\"       \"Xiangtan\"      \"Dao\"           \"Jiangyong\"    \n\n[[2]]\n [1] 124236 113624  96573 110950 109081 106244 174988 235079 273907 256221\n[11]  98013 104050 102846  92017 133831 158446 141883 119508 150757 153324\n[21] 113593 129594 142149 100119  82884  74668  43184  99244  46549  20518\n[31] 140576 121601  92069  43258 144567 132119  51694  59024  69349  73780\n[41]  94651 100680  69398  52798 140472 118623 180933  82798  83090  97356\n[51]  59482  77334  38777 111463  74715 174391 150558 122144  68012  84575\n[61] 143045  51394  98279  47671  26360 236917 220631 185290  64640  70046\n[71] 126971 144693 129404 284074 112268 203611 145238 251536 108078 238300\n[81] 108870 108085 262835 248182 244850 404456  67608  33860\n\n\nNext we will convert the lag variable listw object into data frame by using as.data.frame() in the below code chunk.\n\nw_sum_gdppc.res<-as.data.frame(w_sum_gdppc)\ncolnames(w_sum_gdppc.res)<-c(\"NAME_3\",\"w_sum GDPPC\")\n\n\nhunan<-left_join(hunan,w_sum_gdppc.res)\n\nJoining, by = \"NAME_3\"\n\n\n\ngdppc<-qtm(hunan,\"GDPPC\")\nw_sum_gdppc<-qtm(hunan,\"w_sum GDPPC\")\ntmap_arrange(gdppc,w_sum_gdppc,asp=1,ncol=2)"
  },
  {
    "objectID": "In-class_Ex2/In-class_Ex2.html",
    "href": "In-class_Ex2/In-class_Ex2.html",
    "title": "In-class Exercise 2",
    "section": "",
    "text": "In this take home exercise, we will apply appropriate global and local measures of spatial association techniques to reveal the spatial patterns of Non-Functional water points in Nigeria."
  },
  {
    "objectID": "In-class_Ex2/In-class_Ex2.html#data-set",
    "href": "In-class_Ex2/In-class_Ex2.html#data-set",
    "title": "In-class Exercise 2",
    "section": "Data Set",
    "text": "Data Set\n\nAspatial Data\nWPdx+ dataset of Nigeria in csv format was downloaded WPdx (Water Point Data Exchange) Global Data Repositories. The dataset contains water points related data from rural areas at the water point or small water scheme level. The dataset will be re-named as geo_export.csv saved under data/aspatial folder.\n\n\nGeospatial data\nNigeria Level-2 Administrative Boundary (also known as Local Government Area) polygon features GIS data was downloaded from geoBoundaries portal. The file names were “geoBoundaries-NGA-ADM2” with different file formats and saved under data/geospatial folder."
  },
  {
    "objectID": "In-class_Ex2/In-class_Ex2.html#getting-started",
    "href": "In-class_Ex2/In-class_Ex2.html#getting-started",
    "title": "In-class Exercise 2",
    "section": "Getting Started",
    "text": "Getting Started\nFirst, we will install and download relevant packages for this exercises by using p_load() under pacman packages.\n\nsf for importing, managing and processing geospatial data, and\ntidyverse for performing data science tasks such as importing, wrangling and visualizing data, and\nspdep for computing spatial weights, global and local spatial autocorrelation statistics, and\ntmap for preparing cartographic quality choropleth map\nfunModelling for exploratory data analysis, particularly for the DEA analysis in the later part\n\n\npacman::p_load(sf,tidyverse,spdep,tmap,funModeling)"
  },
  {
    "objectID": "In-class_Ex2/In-class_Ex2.html#importing-data",
    "href": "In-class_Ex2/In-class_Ex2.html#importing-data",
    "title": "In-class Exercise 2",
    "section": "Importing data",
    "text": "Importing data\n\nImporting aspatial data in csv format\nSince geo_export data set was downloaded in csv format, read_csv() function is used to read to import geo_export.csv\n\nwp<-read_csv(\"data/aspatial/geo_export.csv\")\nglimpse(wp)\n\nFrom the above message, there are in total 95008 observations with 70 columns.\nThe below code chunks provides the list for wp object:\n\nlist(wp)\n\n\n\nCreating a simple data feature data frame from an aspatial data frame\nThe below code chunks convert wp data frame into a simple feature data frame (sf object) by using st_as_sf() function of sf packages:\n\nwp_sf<-st_as_sf(wp,coords=c(\"#lon_deg\",\"#lat_deg\"),crs=4326)\n\nThings to learn from the above code chunks:\n\ncoords argument requires us to provide the column name of x-coordinates followed by the column name of y-coordinates.\ncrs argument requires us to provide the coordinate system in EPSG format. EPSG 4326 is the WGS84 Geographic Coordinates System.\n\nIn order to learn more about the attributes of the newly created sf object, we use the following code chunks:\n\nglimpse(wp_sf)\n\nWe can also view the coordinates system of wp_sf by using the below code chunks:\n\nst_crs(wp_sf)\n\nWe then save the extracted data which is (wp_sf) into an output file in rds data format. The output file is called wp_nga.rds and saved under geospatial sub-folder.\n\nwrite_rds(wp_sf,\"data/geospatial/wp_nga.rds\")\n\n\n\nImporting polygon feature data in shapefile format\nIn the below code chunks, we use st_read() function of sf package to import geoBoundaries-NGA-ADM2 Shapefile into R as a polygon feature data frame. Note that there are 2 arguments used when the input geospatial data is in shapefile format, namely: dsn to define the data path and layer to provide the Shapefile name. Notice that we do not need to indicate file extension.\n\nnga<-st_read(dsn=\"data/geospatial\",layer=\"geoBoundaries-NGA-ADM2\",crs=4326)\n\nFrom the above summary, we learn that the geometry type is Multipolygon. There are in total 774 features and 70 columns.\nWe can confirm the coordinates system again by using the st_crs() function of sf package.\n\nst_crs(nga)\n\nWe can use st_geometry() function of sf package to retrieve the basic information on the type of geometry, the geographic extent of the features, and the coordinates system of the data.\n\nst_geometry(nga)\n\nWe can plot only the geometry of Nigeria using the below code chunk:\n\nplot(st_geometry(nga))\n\nHowever, some of the values under the the column #status_clean,which we need to use in the analysis to identify the working condition of the water points, are NA. Therefore, additional step required to replace NA values to Unknown.\n\nwp_nga<-read_rds(\"data/geospatial/wp_nga.rds\") %>%\n  mutate(`#status_clean` = replace_na(`#status_clean`,\"Unknown\"))\n\nIn the above code chunks, the newly created wp_nga.rds file was read and mutate() function of dplyr package was used to amend those NA values under column #status_clean to Unknown values."
  },
  {
    "objectID": "In-class_Ex2/In-class_Ex2.html#exploratory-data-analysis-eda",
    "href": "In-class_Ex2/In-class_Ex2.html#exploratory-data-analysis-eda",
    "title": "In-class Exercise 2",
    "section": "Exploratory Data Analysis (EDA)",
    "text": "Exploratory Data Analysis (EDA)\nWe then plot a frequency table based on the column #status_clean using the below code chunk:\n\nfreq(data=wp_nga,input=\"#status_clean\")\n\nfreq() of funModelling package mentioned above is used to generate and format frequency tables from a variable or a table, with percentages and formatting options.\nFrom the above frequency table, we can group those under “Functional”, “Functional but needs repair”,“Functional but not in use” and categorize them as “Functional Water Points”, while those under “Non-Functional”,“Non-Functional due to dry season”,“Abandoned/Decommissioned”,“Abandoned”,“Non functional due to dry season” are categorized as “Non-Functional Water Points”. Keep this in mind for the rest of the analysis."
  },
  {
    "objectID": "In-class_Ex2/In-class_Ex2.html#geoprocessing-with-sf-package",
    "href": "In-class_Ex2/In-class_Ex2.html#geoprocessing-with-sf-package",
    "title": "In-class Exercise 2",
    "section": "Geoprocessing with sf package",
    "text": "Geoprocessing with sf package\nIn this section, we will perform a wide range of geoprocessing with one commonly used geogprocessing functions: point in polygon count.\nHowever, we will need to extract relevant data about the number of water points first under different categories: function, non-function and unknown.\n\nExtracting functional water points\nIn the code chunks below, filter() of dplyr package is used to select functional water points.\n\nwpt_functional <-wp_nga %>%\n  filter(`#status_clean` %in%\n           c(\"Functional\",\"Functional but needs repair\",\"Functional but not in use\"))\n\n\n\nPlotting frequency table of functional water points\n\nfreq(data=wpt_functional,input=\"#status_clean\")\n\n\n\nExtracting non-functional water points\nIn the code chunks below, filter() of dplyr package is used to select non-functional water points.\n\nwpt_nonfunctional<-wp_nga %>%\n  filter(`#status_clean` %in%\n  c(\"Non-Functional\",\"Non-Functional due to dry season\",\"Abandoned/Decommissioned\",\"Abandoned\",\"Non functional due to dry season\"))\n\n\n\nPlotting frequency table of non-functional water points\n\nfreq(data=wpt_nonfunctional,input=\"#status_clean\")\n\n\n\nExtracting unknown water points\nIn the code chunks below, filter() of dplyr package is used to select unknown water points.\n\nwpt_unknown<-wp_nga%>%\n  filter(`#status_clean`==\"Unknown\")\n\n\n\nPerforming Point-in-Polygon Count\n\nnga_wp<-nga %>%\n  mutate(`total wpt`=lengths(st_intersects(nga,wp_nga)))%>%\n  mutate(`wpt functional`=lengths(st_intersects(nga,wpt_functional)))%>%\n  mutate(`wpt nonfunctional`=lengths(st_intersects(nga,wpt_nonfunctional)))%>%\n  mutate(`wpt unknown`=lengths(st_intersects(nga,wpt_unknown)))\n\nIn the above code chunks, these are the below operations done:\n\nFirst, st_intersects() function helps identify the water points under these 4 categories (set in the previous part): total, functional, non-functional and unknown, respectively in each area unit.\nNext, lengths() function of Base R helps calculate the number of water points for each category: total, functional, non-function and unknown that fall into each area unit.\nLast, mutate() function helps create the new columns for the newly calculated values and name them as total wpt wpt functional wpt nonfunctional wpt unknown.\n\nWe can check the summary statistics of the newly derived fields of total wpt wpt functional wpt nonfunctional wpt unknown using the below code chunks:\n\nsummary(nga_wp$`wpt functional`)\nsummary(nga_wp$`wpt nonfunctional`)\nsummary(nga_wp$`wpt unknown`)"
  },
  {
    "objectID": "In-class_Ex2/In-class_Ex2.html#calculating-the-proportion-of-number-of-functional-non-functional-and-unknown-water-points-to-the-total-number-of-water-points-for-each-area-unit",
    "href": "In-class_Ex2/In-class_Ex2.html#calculating-the-proportion-of-number-of-functional-non-functional-and-unknown-water-points-to-the-total-number-of-water-points-for-each-area-unit",
    "title": "In-class Exercise 2",
    "section": "Calculating the proportion of number of functional, non-functional and unknown water points to the total number of water points for each area unit",
    "text": "Calculating the proportion of number of functional, non-functional and unknown water points to the total number of water points for each area unit\nThe below code chunks compute the proportion of functional, non-functional and unknown water points to the total number of water points for each area unit. The code chunks also name the newly created fields as pct functional, pct nonfunctional, pct unknown. These fields will be very crucial in our analysis for the rest of the exercise.\n\nnga_wp<-nga_wp%>%\n  mutate(`pct functional`=`wpt functional`/`total wpt`)%>%\n  mutate(`pct nonfunctional`=`wpt nonfunctional`/`total wpt`)%>%\n  mutate(`pct unknown`=`wpt unknown`/`total wpt`)%>%\n  select(1,3,6:13)\nnga_wp\n\nDo note that the above select() function selects the relevant fields to keep for further analysis. In this case, we keep ShapeName (column 1), shapeID (column 3), from total wpt column to geometry column (column 6 to 13).\nWe then use write_rds() function below to create a new data file with a much smaller size of 2.1MB.\n\nwrite_rds(nga_wp,\"data/geospatial/nga_wp.rds\")"
  },
  {
    "objectID": "In-class_Ex2/In-class_Ex2.html#visualizing-the-spatial-distribution-of-number-of-water-points",
    "href": "In-class_Ex2/In-class_Ex2.html#visualizing-the-spatial-distribution-of-number-of-water-points",
    "title": "In-class Exercise 2",
    "section": "Visualizing the spatial distribution of number of water points",
    "text": "Visualizing the spatial distribution of number of water points\nIn the below code chunks, we graph a simple map of the spatial distribution of the number of functional, non-functional and unknown water point at LGA level.\n\nnga_wp<-read_rds(\"data/geospatial/nga_wp.rds\")\ntotal<-qtm(nga_wp,\"total wpt\")\nwp_functional<-qtm(nga_wp,\"wpt functional\")\nwp_nonfunctional<-qtm(nga_wp,\"wpt nonfunctional\")\nwp_unknown<-qtm(nga_wp,\"wpt unknown\")\ntmap_arrange(total,wp_functional,wp_nonfunctional,wp_unknown,asp=1,ncol=2)"
  },
  {
    "objectID": "In-class_Ex2/In-class_Ex2.html#visualizing-the-spatial-distribution-of-water-point-rates",
    "href": "In-class_Ex2/In-class_Ex2.html#visualizing-the-spatial-distribution-of-water-point-rates",
    "title": "In-class Exercise 2",
    "section": "Visualizing the spatial distribution of water point rates",
    "text": "Visualizing the spatial distribution of water point rates\nIn the below code chunks, we graph a simple map of the spatial distribution of functional, non-functional and unknown water point rates at LGA level. However, our focus for this exercise will be more on the non-functional water point rate.\n\npct_functional<-qtm(nga_wp,\"pct functional\")\npct_nonfunctional<-qtm(nga_wp,\"pct nonfunctional\")\npct_unknown<-qtm(nga_wp,\"pct unknown\")\ntmap_arrange(pct_functional,pct_nonfunctional,pct_unknown,asp=1,ncol=2)\n\n\n\n\nNotice that there are “Missing values” in all three maps. It was due to NaN values under the corresponding volumes for pct functional, pct nonfunctional, pct unknown as some of the regions do not have any water points at all, thus dividing by 0. More details and further processing will be covered under Distance based weight matrix below."
  },
  {
    "objectID": "In-class_Ex3/In-class_Ex3.html",
    "href": "In-class_Ex3/In-class_Ex3.html",
    "title": "In-class Exercise 3: Spatially Constrained Clustering: ClustGeo Method",
    "section": "",
    "text": "Below are the codes from the Hands-on Exercise 3 to be brought over for this In-class Exercise 3.\n\n\nIn the below code chunks, we copy the list of packages that we used in the Hands-on Exercise 3 and install a new package called ClustGeo.\n\npacman::p_load(rgdal,spdep,tmap,sf,ggpubr,cluster,factoextra,NbClust,heatmaply,corrplot,psych,tidyverse,ClustGeo)\n\n\n\n\n\nshan_sf<-st_read(dsn=\"data/geospatial\",layer=\"myanmar_township_boundaries\")%>%\n  filter(ST %in% c(\"Shan (East)\",\"Shan (North)\",\"Shan (South)\"))\n\nReading layer `myanmar_township_boundaries' from data source \n  `C:\\thaorocket\\ISS624\\In-class_Ex3\\data\\geospatial' using driver `ESRI Shapefile'\nSimple feature collection with 330 features and 14 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 92.17275 ymin: 9.671252 xmax: 101.1699 ymax: 28.54554\nGeodetic CRS:  WGS 84\n\n\n\nict<-read_csv(\"data/aspatial/Shan-ICT.csv\")\n\nRows: 55 Columns: 11\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): District Pcode, District Name, Township Pcode, Township Name\ndbl (7): Total households, Radio, Television, Land line phone, Mobile phone,...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\nict_derived<-ict %>%\n  mutate(`RADIO_PR`=`Radio`/`Total households`*1000)%>%\n  mutate(`TV_PR`=`Television`/`Total households`*1000)%>%\n  mutate(`LLPHONE_PR`=`Land line phone`/`Total households`*1000)%>%\n  mutate(`MPHONE_PR`=`Mobile phone`/`Total households`*1000)%>%\n  mutate(`COMPUTER_PR`=`Computer`/`Total households`*1000)%>%\n  mutate(`INTERNET_PR`=`Internet at home`/`Total households`*1000)%>%\n  rename(`DT_PCODE` =`District Pcode`,`DT`=`District Name`,`TS_PCODE`=`Township Pcode`, `TS`=`Township Name`,`TT_HOUSEHOLDS`=`Total households`,`RADIO`=`Radio`, `TV`=`Television`, \n`LLPHONE`=`Land line phone`, `MPHONE`=`Mobile phone`,`COMPUTER`=`Computer`, `INTERNET`=`Internet at home`)\n\n\nshan_sf<-left_join(shan_sf,ict_derived,by=c(\"TS_PCODE\"=\"TS_PCODE\"))\n\n\n\n\n\ncluster_vars<-shan_sf %>%\n  st_set_geometry(NULL) %>%\n  select(\"TS.x\",\"RADIO_PR\",\"TV_PR\",\"LLPHONE_PR\",\"MPHONE_PR\",\"COMPUTER_PR\")\n\n\nrow.names(cluster_vars)<-cluster_vars$TS.x\n\n\nshan_ict<-select(cluster_vars,c(2:6))\n\n\n\n\n\nproxmat<-dist(shan_ict,method=\"euclidean\")"
  },
  {
    "objectID": "In-class_Ex3/In-class_Ex3.html#spatially-constrained-clustering-clustgeo-method",
    "href": "In-class_Ex3/In-class_Ex3.html#spatially-constrained-clustering-clustgeo-method",
    "title": "In-class Exercise 3: Spatially Constrained Clustering: ClustGeo Method",
    "section": "Spatially Constrained Clustering: ClustGeo Method",
    "text": "Spatially Constrained Clustering: ClustGeo Method\n\nWard-like hierarchical clustering: ClustGeo\nhclustgeo() of ClustGeo package performs a typical Ward-like hierarchical clustering.\nIn order to perform non-spatially constrained hierarchical clustering, we only need to provide the function a proximity matrix (similarity/dissimilarity matrix) as shown in the code chunk:\n\nnongeo_cluster<-hclustgeo(proxmat)\nplot(nongeo_cluster,cex=0.5)\nrect.hclust(nongeo_cluster,k=6,border=2:5)\n\n\n\n\nNote that the proximity matrix must be an object of class dist, i.e. an object obtained from using function dist().\n\n\nMapping the clusters formed\n\ngroups<-as.factor(cutree(nongeo_cluster,k=6))\n\n\nshan_sf_ngeo_cluster<-cbind(shan_sf,as.matrix(groups))%>%\n  rename(`CLUSTER`=`as.matrix.groups.`)\n\n\nqtm(shan_sf_ngeo_cluster,\"CLUSTER\")\n\n\n\n\n\n\nSpatially Constrained Hierarchical Clustering\nBefore we can perform spatially constrained hierarchical clustering, a spatial distance will need to be computed by using st_distance() of sf package.\n\ndist<-st_distance(shan_sf,shan_sf)\ndistmat<-as.dist(dist)\n\nas.dist() function convert the data frame dist into matrix.\nNext, choicealpha() will be used to determined a suitable value for the mixing parameter alpha shown in the below code chunks:\n\ncr<-choicealpha(proxmat,distmat,range.alpha=seq(0,1,0.1),K=6,graph=TRUE)\n\n\n\n\n\n\n\nFrom the above graph, we can see that with alpha of 0.3, d0 (attribute homogeneity) will only drop to 0.8 (slight drop) while spatial homogeneity will increase to 0.7 (steep increase).\nWe then use alpha of 0.3 in the code chunk below:\n\nclustG<-hclustgeo(proxmat,distmat,alpha=0.3)\n\nNext, we use cutree() to derive the cluster object:\n\ngroups<-as.factor(cutree(clustG,k=6))\n\nWe will then join back the group list of shan_sf polygon feature data frame by using the code chunk below:\n\nshan_sf_Gcluster<-cbind(shan_sf,as.matrix(groups))%>%\n  rename(`CLUSTER`=`as.matrix.groups.`)\n\nLast, we will then plot the map of the newly delineated spatially constrained clusters.\n\nqtm(shan_sf_Gcluster,\"CLUSTER\")"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "ISS624",
    "section": "",
    "text": "To learn more about Quarto websites visit https://quarto.org/docs/websites."
  },
  {
    "objectID": "Take-home_Ex1/Take-home_Ex1.html",
    "href": "Take-home_Ex1/Take-home_Ex1.html",
    "title": "Take-home Exercise 1",
    "section": "",
    "text": "In this take home exercise, we will apply appropriate global and local measures of spatial association techniques to reveal the spatial patterns of Non-Functional water points in Nigeria."
  },
  {
    "objectID": "Take-home_Ex1/Take-home_Ex1.html#data-set",
    "href": "Take-home_Ex1/Take-home_Ex1.html#data-set",
    "title": "Take-home Exercise 1",
    "section": "Data Set",
    "text": "Data Set\n\nAspatial Data\nWPdx+ dataset of Nigeria in csv format was downloaded WPdx (Water Point Data Exchange) Global Data Repositories. The dataset contains water points related data from rural areas at the water point or small water scheme level. The dataset will be re-named as geo_export.csv saved under data/aspatial folder.\n\n\nGeospatial data\nNigeria Level-2 Administrative Boundary (also known as Local Government Area) polygon features GIS data was downloaded from geoBoundaries portal. The file names were “geoBoundaries-NGA-ADM2” with different file formats and saved under data/geospatial folder."
  },
  {
    "objectID": "Take-home_Ex1/Take-home_Ex1.html#getting-started",
    "href": "Take-home_Ex1/Take-home_Ex1.html#getting-started",
    "title": "Take-home Exercise 1",
    "section": "Getting Started",
    "text": "Getting Started\nFirst, we will install and download relevant packages for this exercises by using p_load() under pacman packages.\n\nsf for importing, managing and processing geospatial data, and\ntidyverse for performing data science tasks such as importing, wrangling and visualizing data, and\nspdep for computing spatial weights, global and local spatial autocorrelation statistics, and\ntmap for preparing cartographic quality choropleth map\nfunModelling for exploratory data analysis, particularly for the DEA analysis in the later part\n\n\npacman::p_load(sf,tidyverse,spdep,tmap,funModeling)"
  },
  {
    "objectID": "Take-home_Ex1/Take-home_Ex1.html#importing-data",
    "href": "Take-home_Ex1/Take-home_Ex1.html#importing-data",
    "title": "Take-home Exercise 1",
    "section": "Importing data",
    "text": "Importing data\n\nImporting aspatial data in csv format\nSince geo_export data set was downloaded in csv format, read_csv() function is used to read to import geo_export.csv\n\nwp<-read_csv(\"data/aspatial/geo_export.csv\")\nglimpse(wp)\n\nFrom the above message, there are in total 95008 observations with 70 columns.\nThe below code chunks provides the list for wp object:\n\nlist(wp)\n\n\n\nCreating a simple data feature data frame from an aspatial data frame\nThe below code chunks convert wp data frame into a simple feature data frame (sf object) by using st_as_sf() function of sf packages:\n\nwp_sf<-st_as_sf(wp,coords=c(\"#lon_deg\",\"#lat_deg\"),crs=4326)\n\nThings to learn from the above code chunks:\n\ncoords argument requires us to provide the column name of x-coordinates followed by the column name of y-coordinates.\ncrs argument requires us to provide the coordinate system in EPSG format. EPSG 4326 is the WGS84 Geographic Coordinates System.\n\nIn order to learn more about the attributes of the newly created sf object, we use the following code chunks:\n\nglimpse(wp_sf)\n\nWe can also view the coordinates system of wp_sf by using the below code chunks:\n\nst_crs(wp_sf)\n\nWe then save the extracted data which is (wp_sf) into an output file in rds data format. The output file is called wp_nga.rds and saved under geospatial sub-folder.\n\nwrite_rds(wp_sf,\"data/geospatial/wp_nga.rds\")\n\n\n\nImporting polygon feature data in shapefile format\nIn the below code chunks, we use st_read() function of sf package to import geoBoundaries-NGA-ADM2 Shapefile into R as a polygon feature data frame. Note that there are 2 arguments used when the input geospatial data is in shapefile format, namely: dsn to define the data path and layer to provide the Shapefile name. Notice that we do not need to indicate file extension.\n\nnga<-st_read(dsn=\"data/geospatial\",layer=\"geoBoundaries-NGA-ADM2\",crs=4326)\n\nFrom the above summary, we learn that the geometry type is Multipolygon. There are in total 774 features and 70 columns.\nWe can confirm the coordinates system again by using the st_crs() function of sf package.\n\nst_crs(nga)\n\nWe can use st_geometry() function of sf package to retrieve the basic information on the type of geometry, the geographic extent of the features, and the coordinates system of the data.\n\nst_geometry(nga)\n\nWe can plot only the geometry of Nigeria using the below code chunk:\n\nplot(st_geometry(nga))\n\nHowever, some of the values under the the column #status_clean,which we need to use in the analysis to identify the working condition of the water points, are NA. Therefore, additional step required to replace NA values to Unknown.\n\nwp_nga<-read_rds(\"data/geospatial/wp_nga.rds\") %>%\n  mutate(`#status_clean` = replace_na(`#status_clean`,\"Unknown\"))\n\nIn the above code chunks, the newly created wp_nga.rds file was read and mutate() function of dplyr package was used to amend those NA values under column #status_clean to Unknown values."
  },
  {
    "objectID": "Take-home_Ex1/Take-home_Ex1.html#exploratory-data-analysis-eda",
    "href": "Take-home_Ex1/Take-home_Ex1.html#exploratory-data-analysis-eda",
    "title": "Take-home Exercise 1",
    "section": "Exploratory Data Analysis (EDA)",
    "text": "Exploratory Data Analysis (EDA)\nWe then plot a frequency table based on the column #status_clean using the below code chunk:\n\nfreq(data=wp_nga,input=\"#status_clean\")\n\nfreq() of funModelling package mentioned above is used to generate and format frequency tables from a variable or a table, with percentages and formatting options.\nFrom the above frequency table, we can group those under “Functional”, “Functional but needs repair”,“Functional but not in use” and categorize them as “Functional Water Points”, while those under “Non-Functional”,“Non-Functional due to dry season”,“Abandoned/Decommissioned”,“Abandoned”,“Non functional due to dry season” are categorized as “Non-Functional Water Points”. Keep this in mind for the rest of the analysis."
  },
  {
    "objectID": "Take-home_Ex1/Take-home_Ex1.html#geoprocessing-with-sf-package",
    "href": "Take-home_Ex1/Take-home_Ex1.html#geoprocessing-with-sf-package",
    "title": "Take-home Exercise 1",
    "section": "Geoprocessing with sf package",
    "text": "Geoprocessing with sf package\nIn this section, we will perform a wide range of geoprocessing with one commonly used geogprocessing functions: point in polygon count.\nHowever, we will need to extract relevant data about the number of water points first under different categories: functional, non-functional and unknown.\n\nExtracting functional water points\nIn the code chunks below, filter() of dplyr package is used to select functional water points.\n\nwpt_functional <-wp_nga %>%\n  filter(`#status_clean` %in%\n           c(\"Functional\",\"Functional but needs repair\",\"Functional but not in use\"))\n\n\n\nPlotting frequency table of functional water points\n\nfreq(data=wpt_functional,input=\"#status_clean\")\n\n\n\nExtracting non-functional water points\nIn the code chunks below, filter() of dplyr package is used to select non-functional water points.\n\nwpt_nonfunctional<-wp_nga %>%\n  filter(`#status_clean` %in%\n  c(\"Non-Functional\",\"Non-Functional due to dry season\",\"Abandoned/Decommissioned\",\"Abandoned\",\"Non functional due to dry season\"))\n\n\n\nPlotting frequency table of non-functional water points\n\nfreq(data=wpt_nonfunctional,input=\"#status_clean\")\n\n\n\nExtracting unknown water points\nIn the code chunks below, filter() of dplyr package is used to select unknown water points.\n\nwpt_unknown<-wp_nga%>%\n  filter(`#status_clean`==\"Unknown\")\n\n\n\nPerforming Point-in-Polygon Count\n\nnga_wp<-nga %>%\n  mutate(`total wpt`=lengths(st_intersects(nga,wp_nga)))%>%\n  mutate(`wpt functional`=lengths(st_intersects(nga,wpt_functional)))%>%\n  mutate(`wpt nonfunctional`=lengths(st_intersects(nga,wpt_nonfunctional)))%>%\n  mutate(`wpt unknown`=lengths(st_intersects(nga,wpt_unknown)))\n\nIn the above code chunks, these are the below operations done:\n\nFirst, st_intersects() function helps identify the water points under these 4 categories (set in the previous part): total, functional, non-functional and unknown, respectively in each area unit.\nNext, lengths() function of Base R helps calculate the number of water points for each category: total, functional, non-function and unknown that fall into each area unit.\nLast, mutate() function helps create the new columns for the newly calculated values and name them as total wpt wpt functional wpt nonfunctional wpt unknown.\n\nWe can check the summary statistics of the newly derived fields of total wpt wpt functional wpt nonfunctional wpt unknown using the below code chunks:\n\nsummary(nga_wp$`wpt functional`)\nsummary(nga_wp$`wpt nonfunctional`)\nsummary(nga_wp$`wpt unknown`)"
  },
  {
    "objectID": "Take-home_Ex1/Take-home_Ex1.html#calculating-the-proportion-of-number-of-functional-non-functional-and-unknown-water-points-to-the-total-number-of-water-points-for-each-area-unit",
    "href": "Take-home_Ex1/Take-home_Ex1.html#calculating-the-proportion-of-number-of-functional-non-functional-and-unknown-water-points-to-the-total-number-of-water-points-for-each-area-unit",
    "title": "Take-home Exercise 1",
    "section": "Calculating the proportion of number of functional, non-functional and unknown water points to the total number of water points for each area unit",
    "text": "Calculating the proportion of number of functional, non-functional and unknown water points to the total number of water points for each area unit\nThe below code chunks compute the proportion of functional, non-functional and unknown water points to the total number of water points for each area unit. The code chunks also name the newly created fields as pct functional, pct nonfunctional, pct unknown. These fields will be very crucial in our analysis for the rest of the exercise.\n\nnga_wp<-nga_wp%>%\n  mutate(`pct functional`=`wpt functional`/`total wpt`)%>%\n  mutate(`pct nonfunctional`=`wpt nonfunctional`/`total wpt`)%>%\n  mutate(`pct unknown`=`wpt unknown`/`total wpt`)%>%\n  select(1,3,6:13)\nnga_wp\n\nDo note that the above select() function selects the relevant fields to keep for further analysis. In this case, we keep ShapeName (column 1), shapeID (column 3), from total wpt column to geometry column (column 6 to 13).\nWe then use write_rds() function below to create a new data file with a much smaller size of 2.1MB.\n\nwrite_rds(nga_wp,\"data/geospatial/nga_wp.rds\")"
  },
  {
    "objectID": "Take-home_Ex1/Take-home_Ex1.html#visualizing-the-spatial-distribution-of-number-of-water-points",
    "href": "Take-home_Ex1/Take-home_Ex1.html#visualizing-the-spatial-distribution-of-number-of-water-points",
    "title": "Take-home Exercise 1",
    "section": "Visualizing the spatial distribution of number of water points",
    "text": "Visualizing the spatial distribution of number of water points\nIn the below code chunks, we graph a simple map of the spatial distribution of the number of functional, non-functional and unknown water point at LGA level.\n\nnga_wp<-read_rds(\"data/geospatial/nga_wp.rds\")\ntotal<-qtm(nga_wp,\"total wpt\")\nwp_functional<-qtm(nga_wp,\"wpt functional\")\nwp_nonfunctional<-qtm(nga_wp,\"wpt nonfunctional\")\nwp_unknown<-qtm(nga_wp,\"wpt unknown\")\ntmap_arrange(total,wp_functional,wp_nonfunctional,wp_unknown,asp=1,ncol=2)"
  },
  {
    "objectID": "Take-home_Ex1/Take-home_Ex1.html#visualizing-the-spatial-distribution-of-water-point-rates",
    "href": "Take-home_Ex1/Take-home_Ex1.html#visualizing-the-spatial-distribution-of-water-point-rates",
    "title": "Take-home Exercise 1",
    "section": "Visualizing the spatial distribution of water point rates",
    "text": "Visualizing the spatial distribution of water point rates\nIn the below code chunks, we graph a simple map of the spatial distribution of functional, non-functional and unknown water point rates at LGA level. However, our focus for this exercise will be more on the non-functional water point rate.\n\npct_functional<-qtm(nga_wp,\"pct functional\")\npct_nonfunctional<-qtm(nga_wp,\"pct nonfunctional\")\npct_unknown<-qtm(nga_wp,\"pct unknown\")\ntmap_arrange(pct_functional,pct_nonfunctional,pct_unknown,asp=1,ncol=2)\n\n\n\n\nNotice that there are “Missing values” in all three maps. It was due to NaN values under the corresponding volumes for pct functional, pct nonfunctional, pct unknown as some of the regions do not have any water points at all, thus dividing by 0. More details and further processing will be covered under Distance based weight matrix below."
  },
  {
    "objectID": "Take-home_Ex1/Take-home_Ex1.html#determining-appropriate-weighting-scheme-to-calculate-spatial-weight-matrix",
    "href": "Take-home_Ex1/Take-home_Ex1.html#determining-appropriate-weighting-scheme-to-calculate-spatial-weight-matrix",
    "title": "Take-home Exercise 1",
    "section": "Determining appropriate weighting scheme to calculate spatial weight matrix",
    "text": "Determining appropriate weighting scheme to calculate spatial weight matrix\nBefore computing global spatial autocorrelation statistics, we will need to construct a spatial weights matrix of the area under study. The spatial weights is used to define the neighborhood relationship between geographic units in the study area.\nWe will then test a few weighting schemes to find out the most appropriate approach for us to compute the spatial weight matrix. We will start with contiguity based approach and move on to distance based approach.\n\nComputing Contiguity Spatial Weights\nIn the below code chunks, we use poly2nb() function of spdep package to compute contiguity based weight matrices for the study area. This function builds a neighbors list based on regions with contiguous boundaries. The Queen argument in the below code chunks, if TRUE, a single shared boundary meets the contiguity condition, if FALSE, more than one shared point is required; note that more one shared boundary point does not necessarily mean a shared boundary line.\n\nwm_q<-poly2nb(nga_wp,queen=TRUE)\nsummary(wm_q)\n\nNeighbour list object:\nNumber of regions: 774 \nNumber of nonzero links: 4440 \nPercentage nonzero weights: 0.7411414 \nAverage number of links: 5.736434 \n1 region with no links:\n86\nLink number distribution:\n\n  0   1   2   3   4   5   6   7   8   9  10  11  12  14 \n  1   2  14  57 125 182 140 122  72  41  12   4   1   1 \n2 least connected regions:\n138 560 with 1 link\n1 most connected region:\n508 with 14 links\n\n\nThe above summary shows that there are 774 area units in Nigeria. The most connected area unit with ID 508 has 14 links while the least connected area units have 1 link. There is also an area unit without any link based on the contiguity based with ID 86.\nWe can find out the name of the most connected area unit that has links as well as the 14 links’ ID using the below code chunks:\n\nnga_wp$shapeName[508]\n\n[1] \"Mokwa\"\n\nwm_q[508]\n\n[[1]]\n [1]  20 106 123 171 174 239 402 419 468 471 494 511 644 753\n\n\nIn order to find out the name and some info about the “special” region that has no links, we use the below code chunks\n\nnga_wp$shapeName[86]\n\n[1] \"Bakassi\"\n\nnga_wp[86,]\n\nSimple feature collection with 1 feature and 9 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 8.553504 ymin: 4.798471 xmax: 8.589043 ymax: 4.816385\nGeodetic CRS:  WGS 84\n   shapeName                    shapeID total wpt wpt functional\n86   Bakassi NGA-ADM2-72505758B25708171         0              0\n   wpt nonfunctional wpt unknown pct functional pct nonfunctional pct unknown\n86                 0           0            NaN               NaN         NaN\n                         geometry\n86 MULTIPOLYGON (((8.580903 4....\n\n\nThis seems to be a very interesting observation. Bakassi is a peninsula on the Gulf of Guinea and is famous for being an oil-rich area. It has been a subject of territorial dispute between Cameroon and Nigeria for some years. Under the terms of a 2002 International Court of Justice ruling, the region was awarded to Cameroon. Interestingly, in this analysis, this region was considered part of Nigeria’s territory. This could be because most of the population on Bakassi Peninsula are Nigerians.\nMore reference about ICJ’s Ruling on Bakassi Territorial Dispute can be found here. https://www.loc.gov/item/global-legal-monitor/2013-08-23/cameroon-nigeria-bakassi-peninsula-transition-completed/\nControversy aside, since there is a region found with no neighbor, we now can consider using distance based weight matrix instead to ensure each region has some links at least.\n\n\nDistance based Weight Matrix\n\nTransforming from geographic coordinates system EPSG 3426 to projected coordinates system EPSG 26391\nSince we want to calculate distance, it is advisable to transform the current WGS84 geographic coordinates system to EPSG 26391 Projected Coordinates System for Nigeria using the below code chunks:\n\nnga_wp26391<-read_rds(\"data/geospatial/nga_wp.rds\")%>% \n  mutate(`pct functional` = replace_na(`pct functional`,0))%>%\n  mutate(`pct nonfunctional`=replace_na(`pct nonfunctional`,0))%>%\n  mutate(`pct unknown`=replace_na(`pct unknown`,0))%>%\n  st_transform(crs=26391)\n\nBesides transforming the coordinates system, the above code chunks also replace NaN values under pct functional, pct nonfunctional and pct unknown to 0 as the total water points for some areas were indeed 0 (i.e There were no water points at all for some regions. Therefore, when calculating rate/proportion, division by 0 would end up with NaN values.)\nWe can use function st_crs() to confirm if the projected coordinates system is indeed EPSG 26391.\n\nst_crs(nga_wp26391)\n\nCoordinate Reference System:\n  User input: EPSG:26391 \n  wkt:\nPROJCRS[\"Minna / Nigeria West Belt\",\n    BASEGEOGCRS[\"Minna\",\n        DATUM[\"Minna\",\n            ELLIPSOID[\"Clarke 1880 (RGS)\",6378249.145,293.465,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4263]],\n    CONVERSION[\"Nigeria West Belt\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",4,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",4.5,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",0.99975,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",230738.26,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",0,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Engineering survey, topographic mapping.\"],\n        AREA[\"Nigeria - onshore west of 6°30'E, onshore and offshore shelf.\"],\n        BBOX[3.57,2.69,13.9,6.5]],\n    ID[\"EPSG\",26391]]\n\n\n\n\nDeriving the centroids\nSince we are working with polygon for this exercise, we will need to get polygon centroids in order to make our connectivity graph. We will need to calculate the centroids using the sf package before moving to plot relevant maps. To do this, we will need to use mapping function. The mapping function applies a given function to each element of a vector and returns a vector of the same length. The input vector will be the geometry column of us.bound. The function will be st_centroid(). We will be using map_dbl variation of map from the purrr package.\nTo get the longitude values, we map the st_centroid() function over the geometry column of us.bound and access ONLY the longitude values through double bracket operation [[1]]\n\nlongitude<-map_dbl(nga_wp26391$geometry,~st_centroid(.x)[[1]])\n\nWe do the same for latitude. However, we access the second value of each centroid with [[2]].\n\nlatitude<-map_dbl(nga_wp26391$geometry,~st_centroid(.x)[[2]])\n\nSince we have computed the longitude and latitude, we use cbind() to put longitude and latitude into the same object.\n\ncoords<-cbind(longitude,latitude)\nhead(coords)\n\n     longitude  latitude\n[1,]  549364.0  123694.9\n[2,]  547123.4  120376.5\n[3,] 1189496.9 1059770.9\n[4,]  489057.4  534262.6\n[5,]  593718.2  113824.1\n[6,]  642618.7  251222.3\n\n\nNow we are ready to proceed with our next steps to compute the fixed distance weighting scheme, followed by adaptive distance weighting scheme.\n\n\nDetermine the cut-off distance\nFirst, we need to determine the upper bound for distance band by following the below steps:\n\nReturn a matrix with the indices of points belonging to the set of k nearest neighbors of each area unit by using knearneigh() function of spdep package. In this example, we keep the default k=1 to find out the set of 1st nearest neighbors of each area unit.\nConvert the knn object returned by the previous function knearneigh() into a list of neighbors of class nb with a list of integers specifying the neighbor IDs by using knn2nb() function of spdep package.\nReturn the length of neighbor relationship edges by using nbdists() of spdep package. The function returns in the unit of the coordinates if the coordinate system used is projected system. Else it will return in the unit of km.\nRemove the list structure of the returned object by using unlist() structure.\nProvide summary statistics with min, Q1, median, mean, Q3 and max values accordingly.\n\nBelow are the below code chunks that handle all the above mentioned operations:\n\nk1<-knn2nb(knearneigh(coords))\nk1dists<-unlist(nbdists(k1,coords))\nsummary(k1dists)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   2669   12834   20304   22084   27783   72139 \n\n\nThe summary report shows that the largest first nearest neighbor distance is 72139 m. So we use 73000 as the upper bound to ensure that all units have at least one neighbor.\n\n\nComputing fixed distance weight matrix\nNext, we will compute the distance weight matrix by using dnearneigh() with upper bound of 73000 m as shown in the below code chunks:\n\nwm_d73<-dnearneigh(coords,0,73000)\nsummary(wm_d73)\n\nNeighbour list object:\nNumber of regions: 774 \nNumber of nonzero links: 18486 \nPercentage nonzero weights: 3.085752 \nAverage number of links: 23.88372 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 \n 4  9 11 17 35 35 29 28 34 38 28 20 17 27 12 17  7 13 13 13 24  5 12 12  5 15 \n27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 \n12  8 10 12 17  7  5 13  8  8 10 13 17 14  6  9  3  3  3  8  8 11  7  6  2  6 \n53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 72 \n 2  1  4  4  8  3  3  6  2  7  4  8  7  4  1  3  1 \n4 least connected regions:\n90 112 237 670 with 1 link\n1 most connected region:\n585 with 72 links\n\n\nFor the above code chunks, dnearneigh() function identifies neighbours of region points by Euclidean distance with a distance band with lower d1= and upper d2= bounds controlled by the bounds= argument. Do take note that since we are using projected coordinate system in this exercise, the “longlat” argument was removed from the dnearneigh() function. How “longlat” argument works is that if unprojected coordinates system is used and either specified in the coordinates object x or with x as a two column matrix and longlat=TRUE, great circle distances in km will be calculated assuming the WGS84 reference ellipsoid. We can display the complete weight matrix by using str() in the below code chunk:\n\nstr(wm_d73)\n\nList of 774\n $ : int [1:64] 2 5 10 25 55 66 68 103 122 181 ...\n $ : int [1:62] 1 5 10 25 55 66 68 103 122 181 ...\n $ : int [1:2] 261 447\n $ : int [1:10] 12 20 257 263 446 454 466 641 690 695\n $ : int [1:56] 1 2 55 66 104 136 137 169 184 202 ...\n $ : int [1:21] 9 14 18 19 56 170 217 218 330 337 ...\n $ : int [1:20] 8 15 22 49 176 177 214 281 282 283 ...\n $ : int [1:34] 7 15 22 49 176 177 214 275 276 277 ...\n $ : int [1:27] 6 18 19 56 66 77 103 104 217 218 ...\n $ : int [1:64] 1 2 23 25 66 103 181 190 191 203 ...\n $ : int [1:23] 26 27 43 68 126 157 190 191 204 336 ...\n $ : int [1:11] 4 135 257 263 401 417 429 446 454 690 ...\n $ : int [1:13] 31 37 38 40 94 211 320 393 436 471 ...\n $ : int [1:24] 6 170 193 194 195 217 309 310 311 362 ...\n $ : int [1:27] 7 8 22 32 49 51 62 82 176 177 ...\n $ : int [1:38] 30 38 39 41 44 45 70 71 120 124 ...\n $ : int [1:34] 28 29 35 72 172 173 178 179 182 275 ...\n $ : int [1:30] 6 9 19 56 66 77 103 104 217 218 ...\n $ : int [1:42] 6 9 18 25 56 66 77 103 104 181 ...\n $ : int [1:7] 4 106 239 263 419 454 466\n $ : int [1:9] 60 61 162 269 484 520 578 596 626\n $ : int [1:32] 7 8 15 32 49 51 62 82 176 177 ...\n $ : int [1:64] 10 25 52 53 54 56 58 77 78 79 ...\n $ : int [1:5] 123 476 527 673 761\n $ : int [1:68] 1 2 10 19 23 54 56 66 77 103 ...\n $ : int [1:30] 11 27 43 68 157 190 191 204 336 370 ...\n $ : int [1:25] 11 26 43 68 157 191 204 336 370 371 ...\n $ : int [1:43] 17 29 35 70 71 124 172 173 178 179 ...\n $ : int [1:46] 17 28 35 70 71 120 124 172 173 178 ...\n $ : int [1:30] 16 38 39 40 41 44 45 175 185 186 ...\n $ : int [1:13] 13 37 94 158 210 211 212 289 308 561 ...\n $ : int [1:28] 15 22 49 51 62 82 177 196 207 214 ...\n $ : int [1:29] 47 111 130 142 145 155 166 219 227 233 ...\n $ : int [1:11] 42 86 104 136 137 213 375 553 559 733 ...\n $ : int [1:34] 17 28 29 72 172 173 178 179 182 275 ...\n $ : int [1:8] 50 107 247 408 432 455 681 759\n $ : int [1:21] 13 31 38 39 40 41 186 192 197 198 ...\n $ : int [1:25] 13 16 30 37 39 40 41 44 186 192 ...\n $ : int [1:27] 16 30 37 38 40 41 44 185 186 192 ...\n $ : int [1:21] 13 30 37 38 39 41 44 186 192 211 ...\n $ : int [1:24] 16 30 37 38 39 40 44 45 186 192 ...\n $ : int [1:21] 34 86 136 137 184 202 209 285 286 375 ...\n $ : int [1:19] 11 26 27 68 122 126 157 190 191 246 ...\n $ : int [1:28] 16 30 38 39 40 41 45 70 175 186 ...\n $ : int [1:27] 16 30 41 44 70 175 187 188 192 290 ...\n $ : int [1:12] 119 380 387 417 423 429 438 459 521 656 ...\n $ : int [1:25] 33 111 127 130 155 166 227 234 238 242 ...\n $ : int [1:12] 64 65 74 113 131 265 386 407 428 482 ...\n $ : int [1:31] 7 8 15 22 32 51 62 82 176 177 ...\n $ : int [1:5] 36 98 107 409 432\n $ : int [1:27] 15 22 32 49 62 82 177 207 214 284 ...\n $ : int [1:48] 23 53 54 57 58 77 78 79 80 165 ...\n $ : int [1:38] 23 52 54 57 58 78 79 80 165 189 ...\n $ : int [1:59] 23 25 52 53 56 57 58 77 78 79 ...\n $ : int [1:34] 1 2 5 68 122 157 169 184 190 203 ...\n $ : int [1:51] 6 9 18 19 23 25 54 66 77 78 ...\n $ : int [1:35] 52 53 54 58 78 79 80 165 189 197 ...\n $ : int [1:38] 23 52 53 54 57 78 79 165 189 197 ...\n $ : int [1:5] 128 129 493 700 748\n $ : int [1:14] 21 61 158 269 310 311 561 563 578 589 ...\n $ : int [1:11] 21 60 162 268 269 484 578 589 592 596 ...\n $ : int [1:28] 15 22 32 49 51 82 177 196 207 214 ...\n $ : int [1:5] 384 416 467 765 772\n $ : int [1:7] 48 65 74 113 131 265 407\n $ : int [1:11] 48 64 74 109 113 265 386 407 683 701 ...\n $ : int [1:48] 1 2 5 9 10 18 19 25 56 103 ...\n $ : int [1:26] 72 120 124 179 182 304 305 339 346 347 ...\n $ : int [1:30] 1 2 11 26 27 43 55 122 157 190 ...\n $ : int [1:8] 140 146 248 274 473 500 512 513\n $ : int [1:44] 16 28 29 44 45 71 120 124 172 173 ...\n $ : int [1:50] 16 28 29 70 120 124 172 173 175 178 ...\n $ : int [1:20] 17 35 67 182 348 361 374 378 404 566 ...\n $ : int [1:6] 361 374 377 404 665 666\n $ : int [1:15] 48 64 65 109 113 116 251 265 672 683 ...\n $ : int [1:15] 110 229 255 258 272 373 382 398 422 433 ...\n $ : int [1:9] 254 287 427 459 470 547 647 677 751\n $ : int [1:60] 9 18 19 23 25 52 54 56 78 79 ...\n $ : int [1:52] 23 52 53 54 56 57 58 77 79 80 ...\n $ : int [1:57] 23 52 53 54 56 57 58 77 78 80 ...\n $ : int [1:41] 23 52 53 54 57 77 78 79 165 189 ...\n $ : int [1:20] 99 145 156 227 233 242 255 270 426 449 ...\n $ : int [1:21] 15 22 32 49 51 62 177 207 214 297 ...\n $ : int [1:6] 132 258 383 414 529 767\n $ : int [1:3] 148 437 692\n $ : int [1:39] 101 105 130 142 145 155 156 219 235 242 ...\n $ : int [1:17] 34 42 136 137 184 202 285 286 499 538 ...\n $ : int [1:19] 147 149 151 221 226 245 267 399 410 415 ...\n $ : int [1:5] 150 489 648 700 714\n $ : int [1:12] 100 107 159 260 408 458 463 542 674 676 ...\n $ : int 237\n $ : int [1:3] 160 271 406\n $ : int [1:11] 95 119 390 391 392 423 487 642 656 668 ...\n $ : int [1:3] 354 607 665\n $ : int [1:7] 13 31 158 436 561 596 709\n $ : int [1:10] 92 390 391 392 405 423 469 656 708 770\n $ : int [1:17] 97 108 139 167 168 350 389 403 412 420 ...\n $ : int [1:14] 96 108 114 139 147 168 389 403 412 420 ...\n $ : int [1:5] 50 153 231 432 696\n $ : int [1:18] 81 145 154 167 227 233 255 270 426 449 ...\n  [list output truncated]\n - attr(*, \"class\")= chr \"nb\"\n - attr(*, \"region.id\")= chr [1:774] \"1\" \"2\" \"3\" \"4\" ...\n - attr(*, \"call\")= language dnearneigh(x = coords, d1 = 0, d2 = 73000)\n - attr(*, \"dnn\")= num [1:2] 0 73000\n - attr(*, \"bounds\")= chr [1:2] \"GE\" \"LE\"\n - attr(*, \"nbtype\")= chr \"distance\"\n - attr(*, \"sym\")= logi TRUE\n\n\nNext, nb2listw() is used to convert th nb object into spatial weights object.\n\nwm73_lw<-nb2listw(wm_d73,style=\"W\")\nsummary(wm73_lw)\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 774 \nNumber of nonzero links: 18486 \nPercentage nonzero weights: 3.085752 \nAverage number of links: 23.88372 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 \n 4  9 11 17 35 35 29 28 34 38 28 20 17 27 12 17  7 13 13 13 24  5 12 12  5 15 \n27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 \n12  8 10 12 17  7  5 13  8  8 10 13 17 14  6  9  3  3  3  8  8 11  7  6  2  6 \n53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 72 \n 2  1  4  4  8  3  3  6  2  7  4  8  7  4  1  3  1 \n4 least connected regions:\n90 112 237 670 with 1 link\n1 most connected region:\n585 with 72 links\n\nWeights style: W \nWeights constants summary:\n    n     nn  S0       S1       S2\nW 774 599076 774 126.9629 3125.191\n\n\nFrom the above summary, each area unit has around 23.88 neighbors on average if we cap the upper d2= bound as 73000. Notice that most connected region has 72 links. This is an insanely big number. As seen in the map, Nigeria is densely settled with many small area units in some regions. This method therefore shows a major drawback as it masks subtle local variations and smooths out any variations if the one area has too many neighbors.\nTherefore, in this case, we will also consider adaptive weighting schemes to limit the number of neighbors. This may prove to be more superior in the case of Nigeria as this scheme can adjust itself according to the density of the data.\n\n\nComputing adaptive distance weight matrix\nIn the below code chunks, we control the number of neighbors directly using k-nearest neighbors, either accepting asymmetric neighbors or imposing symmetry. In this exercise, we can start with k=8.\n\nknn<-knn2nb(knearneigh(coords,k=8))\nknn\n\nNeighbour list object:\nNumber of regions: 774 \nNumber of nonzero links: 6192 \nPercentage nonzero weights: 1.033592 \nAverage number of links: 8 \nNon-symmetric neighbours list\n\n\nFrom the above table summary, we can see that each area unit has exactly 8 neighbors, no more no less!\nNext, in the below code chunk, we create a row standardized spatial weight matrix in “W” style using the nb2listw() function. The reason why we should chose “W” over “B” was because the spatially lagged variable in this case is proportion/rate, which should be capped at 1. If “B” was used, spatially lagged variables pct nonfunctional in the later parts may end up larger than 1, which does not make any sense for proportion/rate.\n\nknn_lw<-nb2listw(knn,style=\"W\")\nsummary(knn_lw)\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 774 \nNumber of nonzero links: 6192 \nPercentage nonzero weights: 1.033592 \nAverage number of links: 8 \nNon-symmetric neighbours list\nLink number distribution:\n\n  8 \n774 \n774 least connected regions:\nwith 8 links\n774 most connected regions:\nwith 8 links\n\nWeights style: W \nWeights constants summary:\n    n     nn  S0       S1       S2\nW 774 599076 774 174.2812 3155.312\n\nknn_lw\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 774 \nNumber of nonzero links: 6192 \nPercentage nonzero weights: 1.033592 \nAverage number of links: 8 \nNon-symmetric neighbours list\n\nWeights style: W \nWeights constants summary:\n    n     nn  S0       S1       S2\nW 774 599076 774 174.2812 3155.312\n\n\nFor the rest of the analysis, we will be using adaptive distance weight matrix as the distribution of data varies across our study area."
  },
  {
    "objectID": "Take-home_Ex1/Take-home_Ex1.html#global-spatial-autocorrelation-morans-i",
    "href": "Take-home_Ex1/Take-home_Ex1.html#global-spatial-autocorrelation-morans-i",
    "title": "Take-home Exercise 1",
    "section": "Global Spatial Autocorrelation: Moran’s I",
    "text": "Global Spatial Autocorrelation: Moran’s I\n\nMoran’s I test\nThe below code chunks perform Moran’s I statistics calculation by using moran.test() function of spdep package.\n\nmoran.test(nga_wp26391$`pct nonfunctional`,listw=knn_lw,zero.policy = TRUE,na.action=na.omit)\n\n\n    Moran I test under randomisation\n\ndata:  nga_wp26391$`pct nonfunctional`  \nweights: knn_lw    \n\nMoran I statistic standard deviate = 27.282, p-value < 2.2e-16\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n     0.4613882839     -0.0012936611      0.0002876085 \n\n\nFrom the above summary table, we can see that Moran’s I (Z-value) of 0.46 is positive, which means observations tend to be clustered and similar.\nWe can also conduct a permutation test for Moran’s I statistics by using moran.mc() of spdep. A total of 1000 simulations will be performed.\n\nset.seed(1234)\nbperm<-moran.mc(nga_wp26391$`pct nonfunctional`,listw=knn_lw,nsim=999,zero.policy=TRUE,na.action=na.omit)\nbperm\n\n\n    Monte-Carlo simulation of Moran I\n\ndata:  nga_wp26391$`pct nonfunctional` \nweights: knn_lw  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.46139, observed rank = 1000, p-value = 0.001\nalternative hypothesis: greater\n\n\nFrom the output above, using Monte-Carlo simulation of Moran’s I with 1000 observation, the statistics of 0.46 is somehow similar to our findings when calculating the global Moran’s I statistics above. The area units are clustered and observations tend to be similar.\n\n\nGeary’s c\nWe can also consider Geary’s c test in our analysis.\nThe code chunks below performs Geary’s c test for spatial autocorrelation by using geary.test() function of spdep package.\n\ngeary.test(nga_wp26391$`pct nonfunctional`,listw=knn_lw)\n\n\n    Geary C test under randomisation\n\ndata:  nga_wp26391$`pct nonfunctional` \nweights: knn_lw \n\nGeary C statistic standard deviate = 26.256, p-value < 2.2e-16\nalternative hypothesis: Expectation greater than statistic\nsample estimates:\nGeary C statistic       Expectation          Variance \n      0.526234882       1.000000000       0.000325599 \n\n\nFrom the above table summary, we can see that Geary c statistics (z-value) is 0.526234882, which is less than 1. We conclude that the area units are clustered and observations tend to be similar.\nWe can also perform Monte-Carlo simulation of Geary’s c test with 1000 observations with the below code chunks:\n\nset.seed(1234)\nbperm<-geary.mc(nga_wp26391$`pct nonfunctional`,listw=knn_lw,nsim=999)\nbperm\n\n\n    Monte-Carlo simulation of Geary C\n\ndata:  nga_wp26391$`pct nonfunctional` \nweights: knn_lw \nnumber of simulations + 1: 1000 \n\nstatistic = 0.52623, observed rank = 1, p-value = 0.001\nalternative hypothesis: greater\n\n\nThe output for both the Geary’s c Test and Monte-Carlo simulation are both similar. Both shows that there were clusters and observations tend to be similar.\nWe notice that both Moran’s I Statistics and Geary’s c statistics yield the same conclusion. C approaches 0 and I approaches 1 when similar values are clustered."
  },
  {
    "objectID": "Take-home_Ex1/Take-home_Ex1.html#cluster-and-outlier-analysis",
    "href": "Take-home_Ex1/Take-home_Ex1.html#cluster-and-outlier-analysis",
    "title": "Take-home Exercise 1",
    "section": "Cluster and Outlier Analysis",
    "text": "Cluster and Outlier Analysis\nLocal Indicators of Spatial Association or LISA in short are statistics that evaluate the existence of clusters and/or outliers in the spatial arrangement of a given variable. In this section, we will apply appropriate LISA, especially local Moran’s I to detect clusters and/or outliers on the proportion of number of non-functional water points to the total number of water points in Nigeria.\n\nComputing local Moran’s I\nThe function localmoran() of spdep package is used to calculate the local Moran’s I statistics. It computes Ii values, given a set of zi values and a listw object (in this case, knn_lw)\n\nfips<-order(nga_wp26391$shapeName)\nlocalMI<-localmoran(nga_wp26391$`pct nonfunctional`,knn_lw)\nhead(localMI)\n\n         Ii          E.Ii     Var.Ii     Z.Ii Pr(z != E(Ii))\n1 0.6758946 -0.0008481017 0.08124087 2.374304   1.758207e-02\n2 0.6206028 -0.0005236472 0.05017720 2.772853   5.556728e-03\n3 2.9220515 -0.0037801442 0.36104279 4.869339   1.119723e-06\n4 0.2169765 -0.0016485516 0.15779059 0.550376   5.820615e-01\n5 0.8924913 -0.0007647464 0.07326225 3.300166   9.662752e-04\n6 0.5741337 -0.0009383859 0.08988120 1.918173   5.508904e-02\n\n\nlocalmoran() function returns a matrix of values whose columns are:\n\nIi: the local Moran’s I statistics\nE.Ii: the expectation of local Moran’s I statistics under the randomization hypothesis\nVar.Ii: the variance of local Moran’s I statistics under the randomization hypothesis\nZ.Ii: the standard deviate of local Moran’s I statistics\nPr(): the p-value of local Moran’s I statistics\n\n\n\nMapping the local Moran’s I statistics\nBefore mapping the local Moran’s I map, we will need to append the local Moran’s I dataframe (i.e. localMI) onto the nga_wp26391 SpatialPolygonDataFrame. The ouput SpatialPolygonDataFrame will then be called nga.localMI. The code chunks below perform the task:\n\nnga.localMI<-cbind(nga_wp26391,localMI)%>%\n  rename(Pr.Ii=Pr.z....E.Ii..)\n\n\n\nMapping local Moran’s I statistics\nWe can plot the local Moran’s I statistics using choropleth mapping functions of tmap package in the below code chunks:\n\ntm_shape(nga.localMI)+\n  tm_fill(col=\"Ii\",style=\"pretty\",title=\"Local Moran's I Statistics\")+\n  tm_borders(alpha=0.5)\n\n\n\n\n\n\nMapping local Moran’s I p-values\nThe code chunks below produce a choropleth map of Moran’s I p-values by using functions of tmap package:\n\ntm_shape(nga.localMI)+\n  tm_fill(col=\"Pr.Ii\",breaks=c(-Inf,0.001,0.01,0.05,0.1,Inf),palette=\"-Blues\",title=\"Local Moran's I p-values\")+\n  tm_borders(alpha=0.5)\n\n\n\n\n\n\nMapping both local Moran’s I statistics and p-values\nFor effective interpretation, we can plot both Moran’s I statistics and its corresponding p-values maps side by side using the below code chunks.\n\nlocalMI.map<-tm_shape(nga.localMI)+\n  tm_fill(col=\"Ii\",style=\"pretty\",title=\"Local Moran's I Statistics\")+\n  tm_borders(alpha=0.5)\npvalue.map<-tm_shape(nga.localMI)+\n  tm_fill(col=\"Pr.Ii\",breaks=c(-Inf,0.001,0.01,0.05,0.1,Inf),palette=\"-Blues\",title=\"Local Moran's I p-values\")+\n  tm_borders(alpha=0.5)\ntmap_arrange(localMI.map,pvalue.map,asp=1,ncol=2)\n\n\n\n\n\n\nInterpretation of Local Moran’s statistics\nIf the p-value for the feature is small enough to be considered statistically significant and local MI statistics are positive if location i is associated with relatively high values of the surrounding area, the location is a cluster.\nIf the p-value for the feature is small enough to be considered statistically significant and local MI statistics are negative if location i is associated with relatively low values of the surrounding area, the location is an outlier."
  },
  {
    "objectID": "Take-home_Ex1/Take-home_Ex1.html#creating-a-lisa-cluster-map",
    "href": "Take-home_Ex1/Take-home_Ex1.html#creating-a-lisa-cluster-map",
    "title": "Take-home Exercise 1",
    "section": "Creating a LISA Cluster Map",
    "text": "Creating a LISA Cluster Map\n\nPlotting Moran scatterplot\n\nnci<-moran.plot(nga_wp26391$`pct nonfunctional`,knn_lw,xlab=\"pct nonfunctional\",ylab=\"Spatially lag pct nonfunctional\")\n\n\n\n\nThe slope of the linear regression of the lagged variable of pct non-functional versus the original pct non-functional is equivalent to the Moran’s I score.\n\n\nPlotting Moran scatterplot with standardized variable\nFirst we will use scale() function to center and scale the the variable. Centering is done by subtracting the column means (omitting NA) of x from their corresponding columns. Scaling is done by dividing (centered) columns of x by their standard deviations.\n\nnga_wp26391$Z.pct_nonfunctional <- scale(nga_wp26391$`pct nonfunctional`)%>%\n  as.vector\n\nAs.vector() function ensures that the output’s data type is a vector which can map into our dataframe.\nWe will then proceed to plot the Moran scatterplot again by using the below code chunks:\n\nnci2<-moran.plot(nga_wp26391$Z.pct_nonfunctional,knn_lw,labels=as.character(nga_wp26391$shapeName),xlab=\"z-pct nonfunctional\",ylab=\"Spatially lag z-pct nonfunctional\")\n\n\n\n\n\n\nPreparing LISA map classes\nThe code chunks below show the step to prepare a LISA map\n\nquadrant<-vector(mode=\"numeric\",length=nrow(localMI))\n\nNext, we derive the spatially lagged variable (i.e. pct nonfunctional) and center the spatially lagged variable around its mean.\n\nnga_wp26391$lag_pct_nonfunctional<-lag.listw(knn_lw,nga_wp26391$`pct nonfunctional`)\nDV<-nga_wp26391$lag_pct_nonfunctional-mean(nga_wp26391$lag_pct_nonfunctional)\n\nThis will be followed by centering the local Moran’s I around its mean.\n\nLM_I<-localMI[,1]-mean(localMI[,1])\n\nWe also need to set significant level for the local Moran’s I statistics:\n\nsignif<-0.05\n\nThese four command lines define low-low (1st quadrant), low-high (2nd quadrant), high-low (3rd quadrant), high-high (4th quadrant):\n\nquadrant[DV<0 & LM_I>0]<-1\nquadrant[DV>0 & LM_I<0]<-2\nquadrant[DV<0 & LM_I<0]<-3\nquadrant[DV>0 & LM_I>0]<-4\n\nWe will then place all those insignificant Moran in the quadrant 0.\n\nquadrant[localMI[,5]>signif]<-0\n\nWe combine all the above codes in the below code chunks as shown below:\n\nquadrant<-vector(mode=\"numeric\",length=nrow(localMI))\nnga_wp26391$lag_pct_nonfunctional<-lag.listw(knn_lw,nga_wp26391$`pct nonfunctional`)\nDV<-nga_wp26391$lag_pct_nonfunctional-mean(nga_wp26391$lag_pct_nonfunctional)\nLM_I<-localMI[,1]-mean(localMI[,1])\nsignif<-0.05\nquadrant[DV<0 & LM_I>0]<-1\nquadrant[DV>0 & LM_I<0]<-2\nquadrant[DV<0 & LM_I<0]<-3\nquadrant[DV>0 & LM_I>0]<-4\nquadrant[localMI[,5]>signif]<-0\n\n\n\nPlotting LISA Map\nWe can build a LISA map by using the below code chunks:\n\nnga.localMI$quadrant<-quadrant\ncolors<-c(\"#ffffff\", \"#2c7bb6\", \"#abd9e9\", \"#fdae61\", \"#d7191c\")\nclusters<-c(\"Insignificant\", \"Low-Low\", \"Low-High\", \"High-Low\", \"High-High\")\ntm_shape(nga.localMI)+\n  tm_fill(col=\"quadrant\",style=\"cat\",palette=colors[c(sort(unique(quadrant)))+1],labels=clusters[c(sort(unique(quadrant)))+1],popup.vars = c(\"\"))+\n  tm_view(set.zoom.limits = c(11,17))+tm_borders(alpha=0.5)\n\n\n\n\nFor effective interpretation, we plot both the thematic map by pct nonfunctional and the LISA map side by side.\n\npct_nonfunctional<-qtm(nga_wp26391,\"pct nonfunctional\")\nnga.localMI$quadrant<-quadrant\ncolors<-c(\"#ffffff\", \"#2c7bb6\", \"#abd9e9\", \"#fdae61\", \"#d7191c\")\nclusters<-c(\"Insignificant\", \"Low-Low\", \"Low-High\", \"High-Low\", \"High-High\")\nLISAmap<-tm_shape(nga.localMI)+\n  tm_fill(col=\"quadrant\",style=\"cat\",palette=colors[c(sort(unique(quadrant)))+1],labels=clusters[c(sort(unique(quadrant)))+1],popup.vars = c(\"\"))+\n  tm_view(set.zoom.limits = c(11,17))+tm_borders(alpha=0.5)\ntmap_arrange(pct_nonfunctional,LISAmap,asp=1,ncol=2)\n\n\n\n\nFrom the LISA cluster plots, we notice that significant classification appears in all four quadrants: Low-Low, Low-High, High-Low and High-High . However there was one big limitation that NA values have been masked as 0. For some areas, having no non-functional water points or 0% rate of non-functional water points was in fact due to having no water points at all, not because the maintenance of water points were excellent in those regions."
  },
  {
    "objectID": "Take-home_Ex1/Take-home_Ex1.html#hot-spot-and-cold-spot-analysis",
    "href": "Take-home_Ex1/Take-home_Ex1.html#hot-spot-and-cold-spot-analysis",
    "title": "Take-home Exercise 1",
    "section": "Hot Spot and Cold Spot Analysis",
    "text": "Hot Spot and Cold Spot Analysis\nBesides detecting clusters and outliers, local spatial statistics can also be used to detect hot spots and cold spots.\nSince we choose the distance based spatial weights method over the contiguity based spatial weights, we can explore the option to use Getis and Ord’s G-Statistics to detect other spatial abnormalities. This statistics looks at neighbors within a defined proximity to identify where either statistically significant high or low clusters spatially. Here, the statistically significant hot spots are recognized as areas of high proportion of non-functional water points where other areas within their neighborhood range also share high values of non-functional water point rate.\n\nGi statistics using adaptive distance\nThe below code chunks compute the GI statistics based on adaptive distance spatial weight matrix.\n\nfips<-order(nga_wp26391$shapeName)\ngi.adaptive<-localG(nga_wp26391$`pct nonfunctional`,knn_lw)\ngi.adaptive\n\n  [1]  2.374303998  2.772852644 -4.869338828  0.550375967  3.300166403\n  [6] -1.918173288 -1.162901369 -1.014522250 -0.430477172  0.171685244\n [11]  0.132585130 -0.028991233  2.665262882 -0.501305940 -2.091233562\n [16] -0.459734611 -1.413676386 -0.037722987 -0.726580453 -0.155012340\n [21]  3.748629533 -2.908993368 -1.779361638  1.747339784  0.640239850\n [26] -2.022338545  0.506028678  0.911818009 -0.905274894 -0.543447781\n [31]  3.056250463 -3.148256782 -2.757071737  1.696116531 -1.135547565\n [36]  1.395691479  2.395479078  1.087862667  0.720302212  1.146769559\n [41]  0.231244309  2.414053900 -0.829644101  0.325926693  2.016115264\n [46]  0.631731771 -2.878594146  1.504218840 -3.134925107  0.986433120\n [51] -3.012905091 -1.950482789 -0.515354445 -2.456553981  0.983092852\n [56] -1.063237779  1.142578459 -0.219806501 -0.348868121  3.473610973\n [61]  4.400951792 -2.942366219 -0.086621764  1.349787937  0.748079750\n [66]  1.728984394  0.679313176 -1.901922242  0.375562029  1.660566938\n [71]  0.690026158 -0.904642723 -1.154580270  1.243397778 -3.055785419\n [76]  0.878271333 -1.903086667 -0.568097299 -1.608134988 -0.939223207\n [81] -2.218725332 -1.817199151 -3.014709556  3.381321517 -2.736012201\n [86]  3.300706384 -1.071196382 -0.229533602 -1.189795631 -0.062807694\n [91] -4.457448712 -0.641220193 -0.323512062  3.820430793 -0.701154032\n [96] -0.289084237 -0.653643552 -1.849720546 -1.984909277  0.441496156\n[101] -1.936606706 -0.209570540  0.121301257  1.472412292 -3.050541115\n[106]  0.783188373  0.366816079 -1.211352695  0.784787931 -2.847570772\n[111] -2.457963127  1.161329664  1.885831753 -1.708214935 -2.449779569\n[116] -0.186103300 -1.865796795  0.363047479  0.105164975  1.250516395\n[121]  3.310544709 -0.521886314  1.878233733  1.081670665  0.056453948\n[126]  1.592743086 -2.585941892 -0.285938349 -1.286502198 -1.909972072\n[131]  2.082910373 -3.098578541 -0.131607929  3.790699133  0.128951275\n[136]  2.558936511  2.198319485 -0.022128197 -1.369274277 -2.977596817\n[141]  1.009645896 -2.609667406 -3.304513726 -0.967521764 -2.977784574\n[146] -4.079228176 -2.053695831  2.229576155  0.162039076 -0.354843126\n[151] -0.066582234  0.616189245 -1.864909987 -0.264985037 -1.346759909\n[156] -1.898933015 -3.196092833  3.254730359 -1.509717425 -4.457448712\n[161] -1.625606016  2.908478454  0.511836812  1.520324736 -2.265997650\n[166] -2.530440620  0.329593503 -2.308809404  2.952841665 -2.104587623\n[171]  0.266119716  0.720702398  0.268123865  0.429441930  0.843554137\n[176] -1.790173102 -0.606398393 -0.565568114 -0.501814166  2.248657559\n[181]  1.202071639 -0.440942958  2.688629520  4.269940539  1.093375793\n[186]  1.348554697  1.067495432  0.214565970 -2.911092293 -0.840343261\n[191] -1.463164615  1.201508979 -1.442678887 -1.956255568 -2.104040977\n[196] -1.349596486  3.265022499  3.992267477  2.988286930  3.152995233\n[201]  3.026889362  4.139019107  4.398566150  0.034363320  2.734132025\n[206]  2.942077338 -2.925955872  4.762687416  3.650537574  3.074065269\n[211]  2.406065852  3.015500351 -0.293824306 -1.069141557 -1.693125598\n[216]  0.489426693 -2.329145556 -1.181913119 -1.997139084  2.088217592\n[221] -0.354341526  0.819875699 -1.177514641  2.088670485 -2.295632213\n[226]  0.351003688 -2.197400947  1.499164666 -2.693659687 -1.830693952\n[231] -1.124818818 -0.229824636 -2.998389934 -1.866388898 -2.378386332\n[236]  0.195728060  0.064889669 -2.061163312  0.229740643  0.290737771\n[241] -3.814150023 -2.718394681 -1.191269543 -1.770042653  1.992004855\n[246] -1.580591473  2.361306770 -1.417494523  0.224708772 -4.030539009\n[251]  1.248989459 -2.180881958 -0.448833382  1.025320747 -3.167743426\n[256]  0.632418522  0.814310133 -2.271722882 -0.455215383 -2.017360473\n[261] -4.493319023  0.887709024  0.550506443 -2.278753189  0.975539577\n[266] -2.135537448 -2.127032908  1.126104186  2.134219418 -0.661714672\n[271] -2.374320195 -3.616015269 -1.622813821  1.102356627 -0.367830648\n[276] -0.944717212 -1.344961985 -0.631396519 -1.255376429  1.995419523\n[281] -0.822434129 -0.946147828 -1.168149570 -0.785715620  4.035391070\n[286]  3.933710425  0.101875382  3.963205261  3.137973000  2.829429594\n[291] -0.946812483 -0.153725786 -1.678895776 -2.734032543 -1.146193703\n[296]  0.911341530 -3.277268923  0.391629358  0.909565522  1.078754606\n[301]  2.447631569  0.625602983  1.676224372  1.748301150  0.876705631\n[306] -2.572378481  2.002783889  0.433425585 -3.647004540  0.099926550\n[311] -1.016127462  2.707595650 -1.924866225  0.194470936  0.524546343\n[316] -0.113350207 -0.731301412 -0.247445456  0.141188050  2.452680685\n[321]  3.783418608  3.395677578  2.485046447 -1.684136148 -0.293449827\n[326] -2.877603283  0.173403788 -0.010520554 -0.113175772 -0.639489440\n[331]  3.822612373 -2.534144510  3.995674762  3.657938412  2.773245255\n[336] -0.868036386 -0.641763655  1.576633763  1.201769830  2.603593213\n[341]  2.105340687  0.785432978  1.208957624  0.909149115  0.494807691\n[346]  0.831743281  1.132180311  0.434184960 -0.239895001 -1.519836140\n[351]  2.686140433 -0.848165861  2.986885128 -0.445386675  1.029336696\n[356]  0.546114240  0.909568623  0.374910267 -0.567841066  0.995382537\n[361] -1.196576753 -2.487057201 -1.227582810  1.884888126  0.075088768\n[366]  0.348654887  1.918900993  0.320470388  0.964145854  3.294779113\n[371]  2.387672889  0.325134020 -2.243466322 -0.914475142  3.138942075\n[376] -0.309562378 -1.497949873 -0.490457802 -2.106821771  0.508264886\n[381] -1.539258034 -4.057020142 -2.211092178 -1.420103406 -2.256215182\n[386]  1.962499228  0.102893872 -4.430640565 -0.634512732 -1.227301151\n[391] -0.563196551 -0.818686889  2.887374634 -2.515508782  1.428260281\n[396]  1.796770977  2.740244852 -2.810888621 -1.102811223 -3.490174883\n[401]  0.376090246 -0.442968571  0.413511242 -1.173364325 -1.275352437\n[406] -4.869338828  1.509526499  1.160544721 -1.546499160 -2.439321046\n[411] -1.760336518 -2.384889469 -2.350145336 -2.953240817 -2.147342177\n[416]  0.171643390  0.779908424 -0.038281824  0.167353504 -0.030088769\n[421]  1.141481808 -2.631311530  0.251557495 -1.020301235  0.647607448\n[426] -1.199874516  1.040807601  1.282710295  1.164822620  1.505002715\n[431] -1.288908467  1.518149312 -3.100053155 -2.067627071 -3.026497062\n[436]  1.051683684  1.728447218  0.124002335  1.866088975 -3.620335585\n[441]  0.018989040  1.744266709 -3.270054205 -1.402268992  0.040066193\n[446]  0.248110815 -4.869338828 -1.724371715 -2.424141222 -2.135333719\n[451] -0.818137898  0.861951027 -1.865656165  1.051772064  2.482974369\n[456]  0.470908399 -0.515070523 -0.958593264  0.819934405 -0.642854099\n[461] -3.433898103 -3.183987163 -0.181510399 -1.115625444 -0.588990252\n[466]  1.358374629 -1.117505943  0.836349358 -1.988733697  0.506718499\n[471]  2.794219191 -2.634077590  0.100104735 -2.479936719 -4.406558814\n[476]  1.752044853 -4.265596688  0.537729701 -4.079660712 -3.163722241\n[481]  0.942713303  2.301165817 -2.118372261  2.015209849 -2.784502771\n[486] -2.001775851 -0.950343113 -0.494596446 -1.960369474  1.188529583\n[491] -0.283033139 -4.869338828  0.538179112  0.887770489  0.526733204\n[496] -1.954902213 -1.050195595 -0.541332611  4.137622905  0.079462352\n[501] -3.655599878 -0.956058387 -2.296332994 -0.350440810  3.832363873\n[506]  1.192573998 -4.493319023  0.818560147 -4.457448712  1.593275288\n[511] -0.121835595 -1.181232221 -0.564223044 -2.072890640 -3.784985884\n[516]  0.735659987  1.915686125 -1.070203225 -2.253458059  2.045103408\n[521]  0.649473920  1.004118825  2.225982380  1.147623684 -4.457448712\n[526] -4.030539009  1.673793803 -0.314828044 -2.837652918 -1.902297114\n[531] -0.550320829 -2.320084334 -2.158063553 -3.106405670 -0.432544699\n[536] -2.867873074 -2.148285654  4.204882884  3.964972800  3.646809295\n[541] -1.707646162 -0.059263053 -0.213931091 -0.900945181  0.572797506\n[546]  0.634237059  0.893264285  2.979455689 -1.316334249  1.235670312\n[551]  2.740687790  0.686917827 -0.359924693  0.544713459 -0.512547077\n[556]  2.196783354  1.722068443  0.357372589  3.450283725  1.693111329\n[561]  1.727876312 -0.298845160  0.023723699 -0.920828279  1.528992264\n[566]  0.125822927 -0.593735081 -0.052316793 -0.732780740  2.948733050\n[571] -1.268997277  1.128902483 -1.463934905  0.704719034 -0.937282960\n[576] -0.932214726 -1.464676585  3.081977038 -1.548604625 -2.785725816\n[581] -1.573726968  1.489280172  2.600585195  2.747122204 -0.410373582\n[586]  2.106886164  3.886725150  2.736183244  0.845877357 -1.682549542\n[591] -0.766163235 -0.314311744  0.816040613 -0.523274930 -0.391087138\n[596]  3.293958791  1.767269183 -1.234223089  1.705025750  2.870853744\n[601] -1.499971169 -1.727938169 -2.044474252  3.960577503  2.696871915\n[606]  2.664579858 -0.646739870  2.966500089  0.087995504  0.984969176\n[611] -0.317162470  0.659232691  4.293546655 -1.003747688 -0.705280658\n[616] -0.686491366  4.196901685 -1.257657950 -0.855224177  2.493673455\n[621] -0.066795762 -2.894291821 -3.209213650  1.211865357  0.268179865\n[626]  3.059219541  2.462114954  2.762670383  3.188267505  2.139004135\n[631] -0.888321910 -0.970696056 -1.450210370  1.159031352  0.504220004\n[636] -2.290710270  0.933401226 -0.918938097 -0.869903075  1.722307508\n[641]  0.117180275 -1.398181786  2.157463084  2.079948002 -1.398315412\n[646] -0.400455924  0.223549398 -0.333512034  1.088312927 -1.484649905\n[651] -0.251886379  1.179410347 -0.270321927 -2.374241395 -2.927880920\n[656]  0.232394717 -0.610179699 -2.008805417  1.139118713 -0.606484839\n[661] -0.671676600 -1.338148516  1.524218481  0.063489069 -0.915404889\n[666] -0.897039738 -0.093550205  0.656064664  3.272500377  0.182757300\n[671] -1.676047339  1.340684429  1.084237457  0.100452059 -2.276317714\n[676] -1.849992274 -0.637685493 -1.419242681 -1.742454851  1.410643892\n[681]  0.652951399 -3.589816514  0.953768005 -0.064068078  0.875459276\n[686]  0.625473958 -1.355818375  3.669305299 -2.169382217  0.739868699\n[691] -1.572268626  2.596967723 -3.104296391  0.790688498  1.106192715\n[696] -1.860152920 -1.836972933 -2.725950653  1.152996688 -1.295430227\n[701]  1.153536439  0.900256800 -1.579935599  1.348906377 -3.448831214\n[706] -2.899388882 -2.802640976 -1.490515092  2.868669072 -0.422382664\n[711] -1.672775042 -2.479538893 -2.006522289 -0.922995722 -0.451094648\n[716] -2.779386217  2.615505120  4.150513731  3.159393826  2.964458106\n[721]  1.357251687  3.487571324  4.063876023  0.506992619  2.917101282\n[726]  0.787543486  2.012801034 -0.519401667  0.295342603  0.429894538\n[731] -2.034578441  0.808430310  3.519717313  4.102648233  0.414537868\n[736]  1.127132690  2.296172324  4.129984018 -0.157699360  0.587691689\n[741]  0.341420591  0.135043513 -1.661503158 -2.333215437  3.398757831\n[746]  3.292636403  2.957436284 -0.341960040 -0.535498504 -2.116176241\n[751]  0.355504221 -0.237386449 -0.179973754 -0.164939318  1.540058853\n[756]  2.598956749  0.384389211 -1.428189308  0.421025696 -0.331687790\n[761]  1.292637594  1.019058667 -1.767066905 -2.473825726 -1.276784066\n[766] -3.438527888 -3.113762921 -2.371984795  0.306365733  0.008139678\n[771]  1.095099814 -1.038257444 -1.585692792  0.705103526\nattr(,\"cluster\")\n  [1] High High Low  High High Low  High Low  High High Low  High High Low  High\n [16] High Low  High High High High Low  Low  High High High Low  High Low  Low \n [31] High Low  Low  High Low  High High High High High High High Low  High Low \n [46] Low  Low  High Low  Low  Low  Low  Low  Low  High Low  High Low  Low  High\n [61] High Low  Low  High High Low  Low  Low  Low  High High Low  High High Low \n [76] High Low  Low  Low  High Low  High Low  Low  Low  Low  Low  Low  High Low \n [91] Low  Low  Low  High Low  High Low  Low  High Low  Low  High Low  High Low \n[106] Low  High Low  High Low  Low  High Low  Low  Low  High Low  Low  Low  High\n[121] High Low  Low  High Low  High Low  Low  Low  Low  High Low  High High High\n[136] Low  High High Low  Low  High High Low  High Low  Low  Low  High High High\n[151] High High Low  High Low  Low  Low  High Low  Low  High High High High Low \n[166] Low  Low  Low  High Low  High Low  Low  High High High Low  Low  Low  High\n[181] High Low  High High High Low  High Low  Low  Low  Low  Low  Low  Low  Low \n[196] High High High High High High High High High High High Low  High High High\n[211] High Low  High Low  Low  Low  Low  Low  Low  Low  Low  Low  Low  High Low \n[226] Low  Low  Low  Low  Low  Low  Low  Low  Low  Low  High High Low  High High\n[241] Low  Low  Low  Low  High High High Low  High Low  High Low  High High High\n[256] Low  Low  Low  Low  High Low  High High Low  High Low  Low  High High Low \n[271] Low  High Low  Low  Low  Low  Low  Low  Low  High Low  Low  Low  Low  High\n[286] High Low  High High High Low  Low  Low  Low  Low  Low  Low  High High High\n[301] High High High High High Low  High High Low  Low  Low  High Low  High Low \n[316] High High Low  High High High Low  High Low  Low  Low  Low  High High High\n[331] High Low  High High High Low  Low  High High High High High High High High\n[346] Low  High High Low  Low  High High High Low  High High Low  High Low  Low \n[361] Low  Low  High Low  High High High Low  High High High Low  Low  Low  High\n[376] High Low  Low  Low  High High Low  Low  High Low  High High Low  Low  Low \n[391] Low  High High Low  High High Low  Low  Low  Low  High High Low  Low  Low \n[406] Low  High Low  Low  Low  Low  Low  Low  Low  High High High Low  Low  Low \n[421] Low  Low  High Low  Low  Low  High High Low  High Low  High Low  Low  Low \n[436] High High High Low  Low  Low  High Low  Low  High High Low  Low  Low  Low \n[451] Low  High Low  High High High High Low  Low  High Low  Low  Low  Low  High\n[466] Low  High Low  High High Low  Low  Low  Low  Low  High Low  High Low  Low \n[481] Low  High Low  High Low  Low  Low  High Low  High Low  Low  Low  High High\n[496] Low  Low  Low  High Low  Low  Low  Low  Low  High High Low  High Low  High\n[511] High High High Low  Low  High High Low  High High High High High High Low \n[526] Low  High Low  Low  Low  High High Low  High High Low  Low  High High High\n[541] Low  Low  High Low  High Low  High High Low  High High High High High Low \n[556] High High Low  High High High Low  High Low  High Low  High High Low  High\n[571] Low  High High High Low  Low  Low  High Low  High Low  High High High High\n[586] High High High High Low  Low  High High Low  Low  High Low  High High High\n[601] Low  Low  Low  High High High High High Low  High Low  High High Low  Low \n[616] Low  High Low  Low  High Low  High Low  High High High High High High High\n[631] Low  High Low  High High High Low  Low  Low  High High Low  High High Low \n[646] Low  Low  Low  Low  Low  High High High Low  Low  Low  High Low  High High\n[661] High Low  High High High Low  High High High High High Low  High Low  Low \n[676] High Low  Low  Low  Low  High Low  Low  High Low  Low  Low  High Low  Low \n[691] Low  High Low  High Low  Low  High Low  High High High High Low  Low  Low \n[706] Low  Low  Low  High Low  Low  Low  High High Low  Low  High High Low  High\n[721] High High High High High High High Low  Low  High Low  Low  High High High\n[736] High High High Low  Low  High High Low  Low  High High High High Low  Low \n[751] High High High High High High High Low  High Low  High High Low  High Low \n[766] Low  Low  Low  Low  Low  High Low  Low  High\nLevels: Low High\nattr(,\"gstari\")\n[1] FALSE\nattr(,\"call\")\nlocalG(x = nga_wp26391$`pct nonfunctional`, listw = knn_lw)\nattr(,\"class\")\n[1] \"localG\"\n\n\nThe output of localG() function is a vector of G or Gstar values, with attributes “gstari” set to TRUE or FALSE, “call” set to the function call, and “class” as “local G”.\nThe Gi Statistics is represented as z-score. Greater values mean greater intensity of clustering while the direction (positive or negative) indicates high or low clusters.\nNext, we will join the Gi values to their corresponding nga_wp26391 sf data frame by using the below code chunks:\n\nnga.gi<-cbind(nga_wp26391,as.matrix(gi.adaptive))%>%\n  rename(gstat_adaptive=as.matrix.gi.adaptive.)\n\nDo take note that there are 3 operations performed with the above code chunks:\n\nas.matrix() convert the output vector (from the previous code chunk) gi.adaptive into an R matrix object.\ncbind() then join the nga_wp26391 sf dataframe with the newly created gi.adaptive matrix to produce a new SpatialPolygon Data frame called nga.gi\nrename() renames the gi.adaptive field name to gstat_adaptive.\n\n\n\nMapping Gi values with adaptive distance weights\nThe code chunk below shows the function used to map the Gi values derived using the adaptive distance weight matrix.\n\nwpt_nonfunctional<-qtm(nga_wp26391,\"pct nonfunctional\")\nGimap<-tm_shape(nga.gi)+\n  tm_fill(col=\"gstat_adaptive\",\n          style=\"pretty\",\n          palette=\"-RdBu\",\n          title=\"local Gi\")+\n  tm_borders(alpha=0.5)\ntmap_arrange(wpt_nonfunctional,Gimap,asp=1,ncol=2)\n\n\n\n\nFrom the above maps, we notice that cold spots were located in the North East region of Nigeria while the hot spots were located in the South West region of Nigeria. However, in the case of Nigeria, cold spots may not be relevant as some regions have no water points at all. Instead, it is more important to focus more on the spatial distribution of non-functional water points and their corresponding proportion to the total number of water points."
  },
  {
    "objectID": "Take-home_Ex1/Take-home_Ex1.html#limitations",
    "href": "Take-home_Ex1/Take-home_Ex1.html#limitations",
    "title": "Take-home Exercise 1",
    "section": "Limitations",
    "text": "Limitations\nSome of the regions did not have water points or missing data. Therefore, as mentioned above, the non-functional water points rates were adjusted to become 0. This does not necessarily mean that the local governments governments are adept at maintaining the water points. As a result, it is important not to jump to any conclusion on those “cold spots” area.\nDue to the requirements of the exercise, we have not tried to find out the factors (such as population size) which can affect the distribution of the functional or non-functional water point rates."
  },
  {
    "objectID": "Take-home_Ex1/Take-home_Ex1.html#reference",
    "href": "Take-home_Ex1/Take-home_Ex1.html#reference",
    "title": "Take-home Exercise 1",
    "section": "Reference",
    "text": "Reference\nRunfola, D. et al. (2020) geoBoundaries: A global database of political administrative boundaries. PLoS ONE 15(4): e0231866. https://doi.org/10.1371/journal.pone.0231866\nAccess data. WPdx. (n.d.). Retrieved November 30, 2022, from https://www.waterpointdata.org/access-data/"
  },
  {
    "objectID": "Take-home_Ex2/Take-home_Ex2.html",
    "href": "Take-home_Ex2/Take-home_Ex2.html",
    "title": "Take-home Exercise 2",
    "section": "",
    "text": "In this take home exercise, we aim to regionalize Nigeria by using, but not limited to the following measures:\n\nTotal number of functional water points\nTotal number of non-functional water points\nPercentage of functional water points\nPercentage of non-functional water points\nPercentage of main water point technology (i.e. Hand Pump, Mechanized Pump)\nPercentage of usage capacity (i.e. <1000, >=1000)\nPercentage of rural water points"
  },
  {
    "objectID": "Take-home_Ex2/Take-home_Ex2.html#data-import-and-preparation",
    "href": "Take-home_Ex2/Take-home_Ex2.html#data-import-and-preparation",
    "title": "Take-home Exercise 2",
    "section": "4 Data Import and Preparation",
    "text": "4 Data Import and Preparation\n\n4.1 Importing Aspatial data into R environment\nSince geo_export data set was downloaded in csv format, read_csv() function is used to read and import the geo_export.csv file into R environment.\n\nwp_nga<-read_csv(\"data/aspatial/geo_export.csv\")\n\nThings to learn from the above code chunks:\n\nThe original file name was called Water_Point_Data_Exchange_-PlusWPdx.csv. However, it has been rename to geo_export.csv for easy encoding.\nread_csv() of readr package was used instead of read.csv() function.\n\n\n\n4.2 Converting data from tibble data frame with Well Known Text (wkt) format into sf data frame\nAfter importing the data into R environment, we examine if the data has been imported correctly by using the list() function of base R.\n\nlist(wp_nga)\n\n\nFrom the above summary, we can see that the wp_nga object is in tibble data frame format with 95008 rows and 70 columns.\nNotice that this newly created data frame has a column called New Georeferenced Column which represents spatial data in text format. This is known as Well Known Text or wkt in short.\nNext, we will need to convert this tibble data frame in wkt format into an sf data frame using sf package. We will need to start with deriving Geometry field first.\nThe below function st_as_sfc() function of sf package derives a new field called Geometry as shown in the below code chunks:\n\nwp_nga$Geometry<-st_as_sfc(wp_nga$`New Georeferenced Column`)\n\nAfter running the above code chunks, when we open the wp_nga data frame under Environment and scroll to the right, we notice that there is a new field called Geometry added onto the wp_nga data frame.\nNext, st_sf()function of sf package will be used to convert the tibble data frame into sf data frame as shown in the below code chunks:\n\nwp_sf<-st_sf(wp_nga,crs=4326)\n\nWe can check the summary of wp_sf data frame using the below code chunks with list() function:\n\nlist(wp_sf)\n\n\nNote that we now can see that wp_sf is in simple feature data frame with 95008 rows and 70 columns. The coordinates system used is in wgs84 Geographic Coordinates System which means the geometric data will be in degree decimal.\n\n\n4.3 Importing Geospatial Data\nIn the below code chunks we use st_read() function of sf package to read geospatial data file. We also specifically select just the shapeName as well as the Geometry information to be kept and call this new object “nga”.\n\nnga<-st_read(dsn=\"data/geospatial\",layer=\"geoBoundaries-NGA-ADM2\",crs=4326)%>%\n  select(shapeName)\n\nNote that nga object is in sf data frame with 774 features.\nAfter importing the nga data frame object, it is good to take a look at the data.\nWe can notice that some of shapeName are in duplicates even though the coordinates are different.\n\nTherefore, it is crucial for us to rename the location to the correct names.\nThe below code chunks show the steps to rename the duplicate locations.\nFirst, we use order() function to arrange the shapeName in ascending order.\n\nnga<-(nga[order(nga$shapeName),])\n\nNext, we find out the list of duplicate areas by using the code chunks below. duplicated() function of base R determines which elements of a vector or data frame are duplicates of elements with smaller subscripts, and return a logical vector indicating which elements (rows) are duplicates.\n\nduplicate_area<-nga$shapeName[nga$shapeName %in% nga$shapeName[duplicated(nga$shapeName)]]\nduplicate_area\n\n\nWe then use tmap package the location of each area and Google Map to retrieve the actual name of each location.\nWe now can access the individual row index of the nga data frame and change shapeName accordingly. Last, we use the length() function to ensure there are no more duplicates.\n\nnga$shapeName[c(94,95,304,305,355,356,519,546,547,693,694)] <- c(\"Bassa (Kogi)\",\"Bassa (Plateau)\",\n                                                                               \"Ifelodun (Kwara)\",\"Ifelodun (Osun)\",\n                                                                               \"Irepodun (Kwara)\",\"Irepodun (Osun)\",\n                                                                               \"Nassarawa\",\"Obi (Benue)\",\"Obi(Nasarawa)\",\n                                                                               \"Surulere (Lagos)\",\"Surulere (Oyo)\")\n\nlength((nga$shapeName[ nga$shapeName %in% nga$shapeName[duplicated(nga$shapeName)] ]))\n\nMethod Reference: Jordan, O. (2022) Geospatial Analytics for Social Good-Understanding Nigeria Water functional and non-functional water point rate. Retrieved from https://jordan-isss624-geospatial.netlify.app/posts/geo/geospatial_exercise/#data-wrangling\nAfter changing the shapeName, we can go to the Environment window on the right and double-click on the nga data frame to see the changes. We will notice that we no longer 2 LGA called Bassa. Instead, they have been renamed to Bassa (Kogi) and Bassa (Plateau)."
  },
  {
    "objectID": "Take-home_Ex2/Take-home_Ex2.html#geoprocessing-with-dplyr-and-sf",
    "href": "Take-home_Ex2/Take-home_Ex2.html#geoprocessing-with-dplyr-and-sf",
    "title": "Take-home Exercise 2",
    "section": "5 Geoprocessing with dplyr and sf",
    "text": "5 Geoprocessing with dplyr and sf\n\n5.1 Ensuring location data accuracy\nIn the below code chunks, we are going to use a geoprocessing function (or commonly known as GIS analysis) called point-in-polygon overlay to transfer the information from nga data frame into wp_sf data frame.\n\nwp_sf<-st_join(wp_sf,nga)\n\nWe try to generate another data frame just to view the contents of two columns: #clean_adm2 and shapeName.\n\nwp_sf1<-select(wp_sf,c(`#clean_adm2`,`shapeName`))\n\nBy right, #clean_adm2 should provide the LGA name of the water point located. However, we notice that there are some discrepancies between the #clean_adm2 and shapeName after running the above code chunks. For example, the Cameroon-Nigeria’s territorial dispute area of Bakassi, in which there were supposedly 6 water points, were in fact under Akbapuyo, which is part of Nigeria. We can compare how different the coordinates of Bakassi under nga data frame versus the coordinates of self-claimed Bakassi data frame under wp_sf.\nst_join() of sf package has helped us match the location and actual area names of all water points in wp_sf data frame based on provided coordinates under nga data frame to ensure location data accuracy instead of putting trust on the #clean_adm2 declared, which may not be accurate.\n\nThanks to this, in later part when we need to perform contiguity based method to find out list of neighbors for a particular area unit, we no longer face the issue of zero neighbors. More details will be mentioned in the later part.\n\n\n5.2 Deriving new variables using dplyr package\nIn this section, in order to perform our in-depth analysis on LGA level, it is important for us to compute and consolidate new attributes located in each LGA level, such as total number of water points, total number of non-functional water points, total number of functional water points, percentage of non-functional water points and many more attributes at LGA level.\n\n5.2.1 Data Cleaning\nFirst, it is important for us to do some cleaning on the data source to remove NA values and missing values.\nWe notice that under #status_clean column, there are missing values. Therefore, we will replace all these missing values with “Unknown” values by using mutate() function of dplyr package.\n\nwp_sf<-wp_sf%>%\n  mutate(`#status_clean`=replace_na(`#status_clean`,\"Unknown\"))\n\nWe can use the freq() function of funModeling package to generate a frequency table to observe the data inputs under #status_clean and their frequency in terms of percentage.\n\nfreq(data=wp_sf,input=\"#status_clean\")\n\n\nWe use the below code chunks to observe the data inputs under #water_tech_category, is_urban, usage_capacity\n\nfreq(data=wp_sf,input=\"#water_tech_category\")\n\n\nFrom the above frequency table, we notice that there are different types of technology used for water points, such as hand pump, mechanized pump, tapstand and rope and bucket.\n\nfreq(data=wp_sf,input=\"is_urban\")\n\n\nFrom the above frequency table, we notice the inputs include “TRUE” and “FALSE” values. A huge majority (79.41%) of the inputs were under “FALSE”, which means that majority of water points studied were under rural areas.\n\nfreq(data=wp_sf,input=\"usage_capacity\")\n\n\nFrom the above frequency table, we notice inputs under column usage_capacity include 50, 250, 300 and 1000.\n\n\n5.2.2 Creating a data frame for functional water points\nFrom the frequency table above, we can see there are a few different inputs which literally mean “Functional”. They are “Functional”,“Functional but needs repair”,“Functional but not in use”. We will then create a new data frame call wpt_functional to capture all the functional water points across Nigeria by using filter() function of dplyr package on the wp_sf data frame as shown in the below code chunks.\n\nwpt_functional<-wp_sf%>%\n  filter(`#status_clean` %in% c(\"Functional\",\"Functional but needs repair\",\"Functional but not in use\"))\n\n\n\n5.2.3 Creating a data frame for non-functional water points\nSimilarly, for non-functional water points, we will also create a new data frame call wpt_nonfunctional to capture all the non-functional water points by using filter() function on the wp_sf data frame as shown in the below code chunks.\n\nwpt_nonfunctional<-wp_sf%>%\n  filter(`#status_clean` %in% c(\"Non-Functional\",\"Non-Functional due to dry season\",\"Abandoned/Decommissioned\",\"Abandoned\",\"Non functional due to dry season\"))\n\n\n\n5.2.4 Creating a data frame for unknown water points\nThe below code chunk creates a new data frame called wpt_unknown by filtering “Unknown” water points from wp_sf data frame.\n\nwpt_unknown<-wp_sf%>%\n  filter(`#status_clean`==\"Unknown\")\n\n\n\n5.2.5 Creating a data frame for water points with usage capacity of less than 1000\nThe below code chunk creates a new data frame called uc_lt1000 by filtering water points with usage capacity less than 1000 from wp_sf data frame.\n\nuc_lt1000<-wp_sf%>%\n  filter(`usage_capacity`<1000)\n\n\n\n5.2.6 Creating a data frame for water points with usage capacity of equal or more than 1000\nThe below code chunk creates a new data frame called uc_mt1000 by filtering water points with usage capacity equal or more than 1000 from wp_sf data frame.\n\nuc_mt1000<-wp_sf%>%\n  filter(`usage_capacity`>=1000)\n\n\n\n5.2.7 Creating a data frame for all urban water points\nThe below code chunks filter the is_urban field from the wp_sf data frame to TRUE and create a new data frame featuring all urban water points:\n\nurban_wpt<-wp_sf%>%\n  filter(`is_urban`==\"TRUE\")\n\n\n\n5.2.8 Creating a data frame for all rural water points\nThe below code chunks filter the is_urban field from the wp_sf data frame to FALSE and create a new data frame featuring all rural water points:\n\nrural_wpt<-wp_sf%>%\n  filter(`is_urban`==\"FALSE\")\n\n\n\n5.2.9 Creating a data frame for water points with Hand pump technology\nThe below code chunks filter the #water_tech_category field from the wp_sf data frame to “Hand Pump” and create a new data frame featuring all water points with Hand Pump technology:\n\nhandpump_wpt<-wp_sf%>%\n  filter(`#water_tech_category`==\"Hand Pump\")\n\n\n\n5.2.10 Creating a data frame for water points with Mechanized Pump technology\nThe below code chunks filter the `#water_tech_category` field from the wp_sf data frame to “Mechanized Pump” and create a new data frame featuring all water points with Mechanized Pump technology:\n\nmechanized_wpt<-wp_sf%>%\n  filter(`#water_tech_category`==\"Mechanized Pump\")\n\n\n\n5.2.11 Creating a data frame for water points with Tapstand\nThe below code chunks filter the `#water_tech_category` field from the wp_sf data frame to “Tapstand” and create a new data frame featuring all water points with Tapstand technology:\n\ntapstand_wpt<-wp_sf%>%\n  filter(`#water_tech_category`==\"Tapstand\")\n\n\n\n5.2.12 Creating a data frame for water points with Rope and Bucket\nThe below code chunks filter the `#water_tech_category` field from the wp_sf data frame to “Rope and Bucket” and create a new data frame featuring all water points with Rope and Bucket technology:\n\nrandb_wpt<-wp_sf%>%\n  filter(`#water_tech_category`==\"Rope and Bucket\")\n\nWe will then use the below code chunks to update the nga_wp with new fields. We will start updating new fields reflecting number of water points in different categories.\n\nnga_wp<-nga %>%\n  mutate(`total wpt`=lengths(st_intersects(nga,wp_sf)))%>%\n  mutate(`wpt functional`=lengths(st_intersects(nga,wpt_functional)))%>%\n  mutate(`wpt nonfunctional`=lengths(st_intersects(nga,wpt_nonfunctional)))%>%\n  mutate(`wpt unknown`=lengths(st_intersects(nga,wpt_unknown)))%>%\n  mutate(`wpt with capacity <1000`=lengths(st_intersects(nga,uc_lt1000)))%>%\n  mutate(`wpt with capacity >=1000`=lengths(st_intersects(nga,uc_mt1000)))%>%\n  mutate(`wpt urban`=lengths(st_intersects(nga,urban_wpt)))%>%\n  mutate(`wpt rural`=lengths(st_intersects(nga,rural_wpt)))%>%\n  mutate(`wpt hand pump`=lengths(st_intersects(nga,handpump_wpt)))%>%\n  mutate(`wpt mechanized pump`=lengths(st_intersects(nga,mechanized_wpt)))%>%\n  mutate(`wpt tapstand`=lengths(st_intersects(nga,tapstand_wpt)))%>%\n  mutate(`wpt rope and bucket`=lengths(st_intersects(nga,randb_wpt)))\n\nIn the above code chunks, these are the below operations done:\n\nFirst, st_intersects() function of sf package helps identify the water points under these 4 categories (set in the previous part): total, functional, non-functional and unknown, respectively in each area unit.\nNext, lengths() function of Base R helps calculate the number of water points for each category: total, functional, non-function and unknown that fall into each area unit.\nLast, mutate() function helps create the new columns for the newly calculated values and name them as total wpt wpt functional wpt nonfunctional wpt unknown wpt urban wpt rural wpt with capacity <1000 wpt with capacity >=1000 wpt hand pump wpt mechanized pump and so on.\n\nThe below code chunks continue updating nga_wp with new fields on the percentage of water points in different categories.\n\nnga_wp<-nga_wp%>%\n  mutate(`pct functional`=`wpt functional`/`total wpt`)%>%\n  mutate(`pct nonfunctional`=`wpt nonfunctional`/`total wpt`)%>%\n  mutate(`pct unknown`=`wpt unknown`/`total wpt`)%>%\n  mutate(`pct capacity<1000`=`wpt with capacity <1000`/`total wpt`)%>%\n  mutate(`pct capacity>=1000`=`wpt with capacity >=1000`/`total wpt`)%>%\n  mutate(`pct urban`=`wpt urban`/`total wpt`)%>%\n  mutate(`pct rural`=`wpt rural`/`total wpt`)%>%\n  mutate(`pct hand pump`=`wpt hand pump`/`total wpt`)%>%\n  mutate(`pct mechanized pump`=`wpt mechanized pump`/`total wpt`)%>%\n  mutate(`pct tapstand`=`wpt tapstand`/`total wpt`)%>%\n  mutate(`pct rope and bucket`=`wpt rope and bucket`/`total wpt`)\n\n\n\n\n5.3 Filtering out regions without any water points.\nIn regions without any water points, percentage of different attributes to the total number of water points becomes NaN due to division by 0. These regions are of little value to us as the objective of this study is to focus on areas with water points.\nThe below code chunks filter regions WITH water points by using filter() function on the total number of water points to be different from 0.\n\nnga_wp<-nga_wp%>%\n  filter(`total wpt`!=0)\n\nAfter running the above code, we will notice the number of observation has been dropped from 774 observations to 761 observations. We have filter out 13 LGA that had no water points, including the Bakassi region mentioned previously. With this, we will no longer have any issue with neighbors without link in the later part as Bakassi is considered part of Cameroon’s territories. We also need to take note that our choropleth maps in subsequent sections will have some missing polygons under those LGA that did not have water points.\nNext, we can safely save this output data frame in rds format for future processing instead of having to rerun the huge geo_export.csv file and previous code chunks by using write_rds()function of readr package.\n\nwrite_rds(nga_wp,\"data/aspatial/nga_wp.rds\")\n\nThe newly created nga_wp.rds is only 2.1MB, which makes it easier for us to push through GitHub later."
  },
  {
    "objectID": "Take-home_Ex2/Take-home_Ex2.html#exploratory-data-analysis-eda",
    "href": "Take-home_Ex2/Take-home_Ex2.html#exploratory-data-analysis-eda",
    "title": "Take-home Exercise 2",
    "section": "6 Exploratory Data Analysis (EDA)",
    "text": "6 Exploratory Data Analysis (EDA)\nIn the below code chunks, we read and import the nga_wp.rds file into R environment by using read_rds() function of readr package.\n\nnga_wp<-read_rds(\"data/aspatial/nga_wp.rds\")\n\n\n6.1 EDA using statistics graphics\nFirst, we can explore the distribution of individual variable (in this example, percentage of non-functional water points) by using ggplot() function combined with geom_histogram() of ggplot2 package in the below code chunks:\n\nggplot(data=nga_wp,aes(x=`pct nonfunctional`))+\n  geom_histogram(bins=20,color=\"black\",fill=\"light blue\")\n\n\n\n\nWe can also use box plot to plot the distribution of percentage of non-functional water points by using the below code chunks. The code chunks are quite similar with the previous one except that we change from geom_histogram() to geom_boxplot().\n\nggplot(data=nga_wp,aes(x=`pct nonfunctional`))+\n  geom_boxplot(color=\"black\",fill=\"light blue\")\n\n\n\n\nFrom the above histogram and box plot, we notice that the distribution of percentage of non-functional water points resembles a right-skewed distribution. There was an outlier with 1, which literally meant that for this LGA 100% of its water points were non-functional. This is quite a worrying sight.\nInstead of plotting individual graphs for individual variable, we can plot multiple individual histograms and then group these histograms. In the below code chunks, we plot multiple individual histograms first.\n\npct_functional<-ggplot(data=nga_wp,aes(x=`pct functional`))+\n  geom_histogram(bins=20,color=\"black\",fill=\"light blue\")\n\npct_nonfunctional<-ggplot(data=nga_wp,aes(x=`pct nonfunctional`))+\n  geom_histogram(bins=20,color=\"black\",fill=\"light blue\")\n\npct_caplt1000<-ggplot(data=nga_wp,aes(x=`pct capacity<1000`))+\n  geom_histogram(bins=20,color=\"black\",fill=\"light blue\")\n\npct_capmt1000<-ggplot(data=nga_wp,aes(x=`pct capacity>=1000`))+\n  geom_histogram(bins=20,color=\"black\",fill=\"light blue\")\n\npct_rural<-ggplot(data=nga_wp,aes(x=`pct rural`))+\n  geom_histogram(bins=20,color=\"black\",fill=\"light blue\")\n\npct_urban<-ggplot(data=nga_wp,aes(x=`pct urban`))+\n  geom_histogram(bins=20,color=\"black\",fill=\"light blue\")\n\npct_handpump<-ggplot(data=nga_wp,aes(x=`pct hand pump`))+\n  geom_histogram(bins=20,color=\"black\",fill=\"light blue\")\n\npct_mechanized<-ggplot(data=nga_wp,aes(x=`pct mechanized pump`))+\n  geom_histogram(bins=20,color=\"black\",fill=\"light blue\")\n\nWe then use ggarrange()function of ggpubr package to group these histograms together. In this example, we can consider splitting the histogram arrangement into 2 columns with 4 rows by specifying “ncol” argument to 2 and “nrow” to 4.\n\nggarrange(pct_functional,pct_nonfunctional,pct_caplt1000,pct_capmt1000,pct_rural,pct_urban,pct_handpump,pct_mechanized,ncol=2,nrow=4)\n\n\n\n\nThere are a few observations that we can notice from the above histograms:\n\nDistribution of percentage of functional water points resembled a normal distribution. However, statistical test needs to be conducted to prove normality.\nDistribution of percentage of non-functional water points follows a right-skewed distribution.\nThere were more LGA with lower percentage of water points with capacity of equal or more than 1000 than LGA with higher percentage of water points with capacity of equal or more than 1000.\nThe number of LGA with more than 50% of water points developed with mechanized pump technology were lower than the number of LGA with less than 50% of water points developed with mechanized pump technology.\nMost of the water points in Nigeria were located in rural areas. The distribution of percentage of rural water points were extremely left skewed with more LGA having more than 75% water points located under rural areas.\n\n\n\n6.2 Preparing choropleth maps\nWe can explore the distribution of different variables such as number of non-functional water points, percentage of non-functional water points in Nigeria at LGA level, and other attributes by plotting choropleth maps.\nThe below code chunk is used to prepare the choropleth maps by using qtm() function of tmap package. We can plot choropleth maps based on distribution of percentage of non-functional water points and number of non-functional water points.\n\nqtm(nga_wp,\"wpt nonfunctional\")\n\n\n\n\n\nqtm(nga_wp,\"pct nonfunctional\")\n\n\n\n\nIn order to reveal how the distribution of number of non-functional water points are biased to the underlying total number of water points, we can plot these two choropleth maps side by side. We can also add in the distribution of the percentage of non-functional water points for comparison as well.\n\ntotal_wpt.map <- tm_shape(nga_wp) + \n  tm_fill(col = \"total wpt\",\n          n = 5,\n          style = \"jenks\", \n          title = \"Total water points\") + \n  tm_borders(alpha = 0.5) \n\nwpt_nonfunctional.map <- tm_shape(nga_wp) + \n  tm_fill(col = \"wpt nonfunctional\",\n          n = 5,\n          style = \"jenks\",\n          title = \"Number of Nonfunctional water points \") + \n  tm_borders(alpha = 0.5) \n\npct_nonfunctional.map <- tm_shape(nga_wp) + \n  tm_fill(col = \"pct nonfunctional\",\n          n = 5,\n          style = \"jenks\",\n          title = \"Percentage of Nonfunctional water points \") + \n  tm_borders(alpha = 0.5) +\n  tm_view(set.zoom.limits = c(11,14))\n\ntmap_arrange(total_wpt.map, wpt_nonfunctional.map, pct_nonfunctional.map,\n             asp=NA, ncol=2,sync=TRUE)\n\n\n\n\nNotice how LGA with less number of total water points are also showing less number of non-functional water points. Therefore, in our further analysis, we will be dropping these attributes such as total number of non-functional water points, total number of functional water points, total number of water points with hand pumps, total number of rural water points, etc. as they are not meaningful for our analysis due to bias towards underlying total number of water points.\nWe also notice that for many regions (such as LGA under the south-west Nigeria), even though the number of non-functional water points were relatively low, their respective percentage of non-functional water points can be very high. Water resources were scarce in these regions but at the same time, they were not functional.\nIn the below code chunks, we will plot the choropleth maps showing the distribution of total number of water points, percentage of non-functional water points, percentage of rural water points and percentage of water points with hand pumps. The reason why these 3 variables were chosen will be revealed in later part.\n\ntm_shape(nga_wp)+\n  tm_polygons(c(\"total wpt\",\"pct nonfunctional\",\"pct rural\",\"pct hand pump\"),style=\"jenks\")+\n  tm_facets(sync=TRUE,ncol=2)+\n  tm_legend(legend.position=c(\"right\",\"bottom\"))+\n  tm_layout(outer.margins = 0,asp=0)\n\n\n\n\nOverall, majority of Nigeria LGA have very high percentage of rural water points. In the south-west and south-south region (Niger Delta region) of Nigeria, we notice a worrying trend that although these LGA had less number of water points, the percentage of non-functional water points tend to be higher."
  },
  {
    "objectID": "Take-home_Ex2/Take-home_Ex2.html#correlation-analysis",
    "href": "Take-home_Ex2/Take-home_Ex2.html#correlation-analysis",
    "title": "Take-home Exercise 2",
    "section": "7 Correlation Analysis",
    "text": "7 Correlation Analysis\nIn the below code chunks, we use corrplot.mixed() function of corrplot package to visualize and analyze the correlation of the input variables.\n\nnga_wp1<-nga_wp%>%\n  st_set_geometry(NULL)\ncluster_vars.cor<-cor(nga_wp1[,14:24])\ncorrplot.mixed(cluster_vars.cor,lower=\"ellipse\",upper=\"number\",tl.pos=\"lt\",diag=\"l\",tl.col=\"black\",number.cex=1.3,tl.cex=1.3,cl.cex=1.3)\n\n\n\n\nIn order to have a neater and tidier correlation plot matrix, we can add in such arguments as “number.cex” to adjust the font size of the correlation on the upper right corner, “tl.cex” to adjust the font size of the text labels (i.e . variable names) and “cl.cex” to adjust the font size of the color-legend.\nFrom the above scatterplot matrix, we can notice the perfect negative correlation between percentage of water points in rural area and percentage of water points in urban area (which fits our understanding that an area can only be categorized as either urban or rural, but cannot be both), percentage of water points with usage capacity <1000 and percentage of water points with usage capacity >=1000, percentage of water points with usage capacity <1000 and percentage of mechanized pump. In other words, modern mechanized pumps have higher usage capacity of at least 1000, while traditional hand pump can only provide usage capacity of up to 300 in the case of Nigeria.\nAt the same time, we also observe high correlation between percentage of functional and non-functional water point. This also fits our understanding that a water point should only be classified as function, non-functional or unknown.\nTherefore, we can drop attribute such as pct urban (percentage of water points in urban area), pct mechanized (percentage of water points with mechanized pumps), pct capacity <1000 (percentage of water points with usage of less than 1000), pct capacity >=1000 (percentage of water points with usage capacity of at least 1000) as well as pct functional (percentage of functional water points). In fact, those attributes that we keep for our cluster analysis are in line with the objective of our study and research. We would like to solve problems related to non-functional water points, water points with outdated technology, water points in rural area where the population may have difficulties accessing quality source of water. This is the objective of what we would like to achieve through conducting this study and analysis."
  },
  {
    "objectID": "Take-home_Ex2/Take-home_Ex2.html#hierarchy-cluster-analysis",
    "href": "Take-home_Ex2/Take-home_Ex2.html#hierarchy-cluster-analysis",
    "title": "Take-home Exercise 2",
    "section": "8 Hierarchy Cluster Analysis",
    "text": "8 Hierarchy Cluster Analysis\n\n8.1 Extracting clustering variables\nThe code chunks below are used to extract the clustering variables from the nga_wp simple feature object into data frame.\n\ncluster_vars<-nga_wp%>%\n  st_set_geometry(NULL)%>%\n  select(\"shapeName\",\"pct nonfunctional\",\"pct rural\",\"pct hand pump\")\nhead(cluster_vars,10)\n\n        shapeName pct nonfunctional  pct rural pct hand pump\n1       Aba North         0.5294118 0.00000000    0.11764706\n2       Aba South         0.4929577 0.05633803    0.09859155\n3           Abaji         0.5964912 0.84210526    0.40350877\n4            Abak         0.5208333 0.83333333    0.08333333\n5       Abakaliki         0.1802575 0.87553648    0.43776824\n6  Abeokuta North         0.4411765 0.20588235    0.14705882\n7  Abeokuta South         0.2773109 0.00000000    0.16806723\n8             Abi         0.4078947 0.95394737    0.59868421\n9     Aboh-Mbaise         0.3939394 0.72727273    0.01515152\n10     Abua/Odual         0.3333333 0.53846154    0.30769231\n\n\nNotice that the final clustering variables list exclude those variables that we have removed in the previous section: pct functional, pct urban, pct mechanized pump, pct capacity <1000, pct capacity >=1000. We will only keep these below clustering variables:\n\nshapeName\npct nonfunctional\npct rural\npct hand pump\n\nNext, we need to change the rows by Shape Name (shapeName) instead of by row number to ensure that each individual row will be individual object with individual name.\n\nrow.names(cluster_vars)<-cluster_vars$shapeName\nhead(cluster_vars,10)\n\n                    shapeName pct nonfunctional  pct rural pct hand pump\nAba North           Aba North         0.5294118 0.00000000    0.11764706\nAba South           Aba South         0.4929577 0.05633803    0.09859155\nAbaji                   Abaji         0.5964912 0.84210526    0.40350877\nAbak                     Abak         0.5208333 0.83333333    0.08333333\nAbakaliki           Abakaliki         0.1802575 0.87553648    0.43776824\nAbeokuta North Abeokuta North         0.4411765 0.20588235    0.14705882\nAbeokuta South Abeokuta South         0.2773109 0.00000000    0.16806723\nAbi                       Abi         0.4078947 0.95394737    0.59868421\nAboh-Mbaise       Aboh-Mbaise         0.3939394 0.72727273    0.01515152\nAbua/Odual         Abua/Odual         0.3333333 0.53846154    0.30769231\n\n\nNow the row numbers have been changed to Shape Name.\nHowever, we need to delete the Shape Name field using the code chunks below:\n\nnga_att<- select(cluster_vars, c(2:4))\nhead(nga_att, 10)\n\n               pct nonfunctional  pct rural pct hand pump\nAba North              0.5294118 0.00000000    0.11764706\nAba South              0.4929577 0.05633803    0.09859155\nAbaji                  0.5964912 0.84210526    0.40350877\nAbak                   0.5208333 0.83333333    0.08333333\nAbakaliki              0.1802575 0.87553648    0.43776824\nAbeokuta North         0.4411765 0.20588235    0.14705882\nAbeokuta South         0.2773109 0.00000000    0.16806723\nAbi                    0.4078947 0.95394737    0.59868421\nAboh-Mbaise            0.3939394 0.72727273    0.01515152\nAbua/Odual             0.3333333 0.53846154    0.30769231\n\n\n\n\n8.2 Computing proximity matrix\nThe code chunk below is used to compute the proximity matrix using Euclidean method specified in the “method” argument.\n\nproxmat<-dist(nga_att,method=\"euclidean\")\n\nWe then can use the below code chunk to list the content of proxmat for visual inspection. However, do note that the matrix is extremely long as we have 761 observations.\n\nproxmat\n\n\n\n8.3 Computing hierarchical clustering\nThe below code chunk uses hclust()function of stats package to perform hierarchical cluster analysis using ward.D method and proximity matrix. Note that the hierarchical cluster will be stored in an object of class hclust which describes the tree produced by the clustering process.\n\nhclust_ward<-hclust(proxmat, method=\"ward.D\")\n\nWe will then use plot() function of R graphics to plot the tree as shown in the below code chunk.\n\nplot(hclust_ward,cex=0.1,hang=-1)\n\n\n\n\nWard’s minimum variance is one of the most common types of methods. It minimizes the total within-cluster variance. At each step the pair of clusters with minimum between-cluster distance are merged.\n\n\n8.4 Selecting the optimal clustering algorithm\nIn this section, we will use agnes() function of cluster package to identify stronger clustering structure. agnes() function functions like hclust(), however, it can compute the agglomerative coefficient, which measures the amount of clustering structure found (values closer to 1 suggest strong clustering structure.)\nThe below code chunks are used to compute the agglomerative coefficients of all hierarchical clustering algorithms.\n\nm<-c(\"average\",\"single\",\"complete\",\"ward\")\nnames(m)<-c(\"average\",\"single\",\"complete\",\"ward\")\nac<-function(x){agnes(nga_att,method=x)$ac}\nmap_dbl(m,ac)\n\n  average    single  complete      ward \n0.9371130 0.8674494 0.9670278 0.9950800 \n\n\nIn the above code chunks, we notice there are a few operations:\n\nnames() function is used to set the name of the objects; in this case, the names of the 4 methods are used to name the object.\nfunction() is used to declare a function. It works like a loop in the case as agnes() function computes the agglomorative coefficients of the four methods sequentially.\nmap_dbl()function of purr package is used to return double vectors. In this case the four methods and their respective agglomerative coefficients.\n\nRegarding the above output, we can see that Ward’s method provides the strongest clustering structure among the four methods assessed based on the calculated agglomerative coefficient of 0.99508 which is the closest to 1 among four methods. Therefore, in the subsequent analysis, only Ward’s method will be used.\n\n\n8.5 Determining Optimal Clusters\nIn this section, we will use Gap Statistics covered in class to the determine the optimal clusters.\n\n8.5.1 Gap statistics method\nThe below code chunks use clusGap()function of cluster package to compute the gap statistics. Note that “firstmax” method gives the location of the first local maximum.\n\nset.seed(12345)\ngap_stat<-clusGap(nga_att,FUN=hcut,nstart=25,K.max=10,B=50)\nprint(gap_stat,method=\"firstmax\")\n\nClustering Gap statistic [\"clusGap\"] from call:\nclusGap(x = nga_att, FUNcluster = hcut, K.max = 10, B = 50, nstart = 25)\nB=50 simulated reference sets, k = 1..10; spaceH0=\"scaledPCA\"\n --> Number of clusters (method 'firstmax'): 4\n          logW   E.logW       gap     SE.sim\n [1,] 4.793881 5.181868 0.3879874 0.01022743\n [2,] 4.548543 5.003795 0.4552520 0.01753952\n [3,] 4.382802 4.890738 0.5079360 0.01604334\n [4,] 4.262997 4.792929 0.5299313 0.01966354\n [5,] 4.205561 4.717804 0.5122433 0.01952836\n [6,] 4.143917 4.651981 0.5080638 0.01875618\n [7,] 4.082583 4.592873 0.5102901 0.01822159\n [8,] 4.025371 4.540953 0.5155820 0.01655913\n [9,] 3.987533 4.495500 0.5079672 0.01536691\n[10,] 3.957832 4.454777 0.4969448 0.01483307\n\n\nNext, we can visualize the plot by using fviz_gap_stat() of factoextra package.\n\nfviz_gap_stat(gap_stat)\n\n\n\n\nWith reference to the gap statistics graph above, the recommended number of clusters is 4 as it has the largest gap statistics of 0.5299313. This means that with number of clusters of 4, the clustering structure is furthest away from the random uniform distribution of points.\n\n\n\n8.6 Re-plotting the dendrograms with borders around the selected clusters\nIn the below code chunks, we use rect.hclust() function of R stats to draw a dendrogram with borders around the selected clusters. The argument border is used to specify the border colors for the rectangles.\n\nplot(hclust_ward,cex=0.1)\nrect.hclust(hclust_ward,k=4,border=2:5)\n\n\n\n\n\n\n8.7 Visually-driven hierarchical clustering analysis\n\n8.7.1 Transforming the data frame into a matrix\nThe data was loaded into a data frame but it has to be converted into a matrix in order to make a heatmap.\nThe below code chunks use data.matrix() function of base R to transform nga_att data frame into a data matrix.\n\nnga_att_mat<-data.matrix(nga_att)\n\n\n\n8.7.2 Plotting interactive cluster heatmap using heatmaply()\nIn the code chunks below, heatmaply() function of heatmaply package is used to build an interactive cluster heatmap.\n\nheatmaply(normalize(nga_att_mat),Colv=NA,dist_method = \"euclidean\",hclust_method = \"ward.D\",seriate=\"OLO\",colors=Blues,k_row=4,margins=c(NA,200,60,NA),fontsize_row = 2,fontsize_col = 8,main=\"Geographic Segmentation of Nigeria by Water points breakdown\",xlab=\"Water points\",ylab=\"Shape Name\")\n\n\n\n\n\nFrom the above graph, we can see some characteristics of individual clusters. For example, purple cluster had very high percentage of rural water points and high percentage of water points with hand pumps. The cluster in gold/yellow color, on the other hand, had very high percentage of rural water points while the percentage of water points with hand pumps were very low. Teal/green cluster had relatively high percentage of water points with hand pumps and moderately high percentage of non-functional water points. Cluster in pink had relatively low percentage of water points across all three attributes: percentage of rural water points, percentage of non-functional and percentage of water points with hand pumps.\n\n\n\n8.8 Mapping the clusters formed\nAfter closed examination of the dendrogram above, we can stick to the number of clusters of 4.\nThe below code chunk used cutree() function of R stats to derive a 4-cluster model and as.factor() function to convert the passed objects into a factor.\n\ngroups<-as.factor(cutree(hclust_ward,k=4))\n\nThe output is called groups. It is a list object.\nIn order to visualize the clusters, the groups object needs to be appended onto nga_wp simple feature object.\n\nnga_wp_cluster<-cbind(nga_wp,as.matrix(groups))%>%\n  rename(`CLUSTER`=`as.matrix.groups.`)\n\nThe code chunks above perform 3 operations to form the join:\n\nas.matrix() function converts the groups list object into a matrix; and\ncbind() function of base R appends groups matrix after conversion onto the nga_wp object by columns to produce a simple feature object called nga_wp_cluster; and\nrename() function of dplyr package renames as.matrix.groups. field to CLUSTER.\n\nNext, we can use qtm() function of tmap package to plot the choropleth map of the non-spatially constrained hierarchical clusters formed.\n\nqtm(nga_wp_cluster,\"CLUSTER\")\n\n\n\n\nHowever, the choropleth map above reveals the clusters are very fragmented. This is one of major limitation when non-spatial clustering algorithm is used."
  },
  {
    "objectID": "Take-home_Ex2/Take-home_Ex2.html#spatially-constrained-clustering-skater-approach",
    "href": "Take-home_Ex2/Take-home_Ex2.html#spatially-constrained-clustering-skater-approach",
    "title": "Take-home Exercise 2",
    "section": "9 Spatially Constrained Clustering: SKATER approach",
    "text": "9 Spatially Constrained Clustering: SKATER approach\n\n9.1 Converting SimpleFeature(sf) data frame into SpatialPolygonsDataFrame\nNote that if we would like to use SKATER approach to find spatially constrained clusters, it is important to convert the existing sf data frame into SpatialPolygonsDataFrame as skater() function of spdep package only supports sp objects such as SpatialPolygonsDataFrame.\nThe code chunk below uses as_Spatial() function of sf package to convert nga_wp into a SpatialPolygonsDataFrame called nga_wp.\n\nnga_wp_sp<-as_Spatial(nga_wp)\n\n\n\n9.2 Computing Neighbor List\nIn the below code chunks, we will use poly2nb() function of spdep package to derive the neighbor list from polygon list.\n\nnga.nb<-poly2nb(nga_wp_sp)\nsummary(nga.nb)\n\nNeighbour list object:\nNumber of regions: 761 \nNumber of nonzero links: 4348 \nPercentage nonzero weights: 0.750793 \nAverage number of links: 5.713535 \nLink number distribution:\n\n  1   2   3   4   5   6   7   8   9  10  11  12  14 \n  4  16  57 122 177 137 121  71  39  11   4   1   1 \n4 least connected regions:\n136 497 513 547 with 1 link\n1 most connected region:\n496 with 14 links\n\n\nFrom the above table summary, notice that the average number of links for each LGA is 5.713535. The least connected regions have at least 1 neighbor and the most connected region with ID 496 has 14 neighbors.\nWe can plot the neighbor list on nga_wp_sp by using the code chunks below. We will have to plot the LGA boundaries first. It is then followed by the plot of the neighbor list object, with coordinates applied to the original SpatialPolygonDataFrame to extract the centroids of the polygons. These are used as the nodes for the graph representation. We also set the link color to blue and specify add=TRUE to plot the network on top of the boundaries.\n\nplot(nga_wp_sp,border=grey(.5))\nplot(nga.nb,coordinates(nga_wp_sp),col=\"blue\",add=TRUE)\n\n\n\n\nNote that we should map the boundaries first and follow by the network as some of the areas may be clipped if we swap the order of plotting.\n\n\n9.3 Computing minimum spanning tree\n\n9.3.1 Calculating edge costs\nIn the below code chunks, nbcosts() function of spdep package is used to compute the cost of each edge, which is in fact the distance between its nodes. This function computes the distance using a data frame with observation vector in each node.\n\nlcosts<-nbcosts(nga.nb,nga_att)\n\nNext, we will incorporate these costs into a list weights object (the same way as we did in the calculation of inverse distance weights) by specifying the newly derived lcosts as the weights. In order to do this, we will use nb2listw() function of spdep package shown in the below code chunk. Note how we specify the “style” argument as Binary to make sure the cost values are not row-standardized.\n\nnga.w<-nb2listw(nga.nb,lcosts,style=\"B\")\nsummary(nga.w)\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 761 \nNumber of nonzero links: 4348 \nPercentage nonzero weights: 0.750793 \nAverage number of links: 5.713535 \nLink number distribution:\n\n  1   2   3   4   5   6   7   8   9  10  11  12  14 \n  4  16  57 122 177 137 121  71  39  11   4   1   1 \n4 least connected regions:\n136 497 513 547 with 1 link\n1 most connected region:\n496 with 14 links\n\nWeights style: B \nWeights constants summary:\n    n     nn       S0       S1       S2\nB 761 579121 1649.386 1773.197 17984.41\n\n\n\n\n9.3.2 Computing minimum spanning tree\nWe find the minimum spanning tree by using mstree() function of spdep package as shown in the below code chunk:\n\nnga.mst<-mstree(nga.w)\n\nThe value of nga.mst will be a matrix with n-1 rows and three columns with 2 nodes and the cost, i.e. the edge and its cost.\nAfter computing the the MST, we can use class() function of base R to check the class and dim() to check the dimensions of the newly created object nga.mst.\n\nclass(nga.mst)\n\n[1] \"mst\"    \"matrix\"\n\n\n\ndim(nga.mst)\n\n[1] 760   3\n\n\nNote that the dimension is 760 and not 761. This is because the minimum spanning tree consists on n-1 edges (links) in order to traverse all the nodes.\nWe can display the content of nga.mst by using head() as shown in the code chunk below.\n\nhead(nga.mst)\n\n     [,1] [,2]       [,3]\n[1,]  358  515 0.22393951\n[2,]  358  359 0.23253881\n[3,]  359  332 0.14706995\n[4,]  332  101 0.15328068\n[5,]  101   65 0.04027682\n[6,]  101  362 0.18619412\n\n\nSimilar to the previous section, we will also plot the LGA boundaries first before plotting the MST. We can see how the initial neighbor list has been simplified to just one edge connecting each of the nodes, while parsing though all the nodes.\n\nplot(nga_wp_sp,border=grey(.5))\nplot.mst(nga.mst,coordinates(nga_wp_sp),col=\"blue\",cex.lab=0.2,cex.circles=0.06,add=TRUE)\n\n\n\n\n\n\n\n9.4 Computing spatially constrained clusters using SKATER method\nThe below code chunks compute the spatially constrained cluster using skater() function of spdep package.\n\nclust4<-skater(edges=nga.mst[,1:2],data=nga_att,method=\"euclidean\",ncuts=3)\n\nNote that there are three mandatory arguments of this skater() function:\n\nedges: The first two columns of the MST matrix, i.e. the 2 nodes, not the cost.\ndata: The data frame with data observed over nodes (to update the costs as units are being grouped).\nncuts: The number of cuts, which is set to be number of clusters -1.\n\nThe result of skater() is an object of class skater. We can examine its contents by using the below code chunk.\n\nstr(clust4)\n\nList of 8\n $ groups      : num [1:761] 1 1 1 1 1 3 3 1 1 1 ...\n $ edges.groups:List of 4\n  ..$ :List of 3\n  .. ..$ node: num [1:300] 194 359 559 334 605 715 362 566 573 101 ...\n  .. ..$ edge: num [1:299, 1:3] 359 359 715 362 538 332 101 605 201 566 ...\n  .. ..$ ssw : num 121\n  ..$ :List of 3\n  .. ..$ node: num [1:311] 237 411 123 667 636 480 479 760 112 651 ...\n  .. ..$ edge: num [1:310, 1:3] 406 635 86 58 253 482 130 439 718 112 ...\n  .. ..$ ssw : num 109\n  ..$ :List of 3\n  .. ..$ node: num [1:130] 496 627 298 172 631 118 544 681 537 70 ...\n  .. ..$ edge: num [1:129, 1:3] 294 295 70 176 270 537 289 451 28 542 ...\n  .. ..$ ssw : num 49.2\n  ..$ :List of 3\n  .. ..$ node: num [1:20] 326 300 320 610 503 21 48 453 680 61 ...\n  .. ..$ edge: num [1:19, 1:3] 300 326 680 300 326 320 21 453 503 50 ...\n  .. ..$ ssw : num 4.22\n $ not.prune   : NULL\n $ candidates  : int [1:4] 1 2 3 4\n $ ssto        : num 350\n $ ssw         : num [1:4] 350 316 295 283\n $ crit        : num [1:2] 1 Inf\n $ vec.crit    : num [1:761] 1 1 1 1 1 1 1 1 1 1 ...\n - attr(*, \"class\")= chr \"skater\"\n\n\nThe above list structure shows us the group vector containing the labels of the cluster to which each LGA belong to. We notice that based on the order shown above, the first cluster has 311 LGA, second 300, third 130 and last 20, which sum up to be 761 LGA that we are studying on. Sum of squares measures are given as ssto for the total and ssw to show the effects of each cuts to the overall criterion.\nWe can check the cluster assignment by using the below code chunks.\n\nccs4 <- clust4$groups\nccs4\n\n  [1] 1 1 1 1 1 3 3 1 1 1 1 3 1 3 3 3 1 1 3 1 4 1 2 1 1 1 3 3 3 1 4 2 1 3 2 1 3\n [38] 3 1 3 1 1 3 3 1 2 2 4 2 4 1 1 1 1 1 1 1 2 1 1 4 2 2 2 1 3 1 2 3 3 3 2 2 2\n [75] 1 1 1 1 1 2 3 2 2 2 2 2 2 2 2 1 2 1 1 2 2 2 2 2 2 1 1 1 2 3 2 2 2 2 2 2 2\n[112] 2 2 2 2 1 1 3 1 1 2 3 2 1 2 2 2 2 2 2 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 2 2 2\n[149] 2 2 2 2 2 2 1 1 2 2 2 1 2 2 1 2 2 2 1 1 3 3 3 3 3 3 4 3 3 1 1 3 1 1 3 3 3\n[186] 3 1 1 1 3 1 1 1 1 1 1 1 1 1 1 1 1 1 1 4 1 1 1 1 1 1 3 1 1 1 1 2 2 2 2 2 2\n[223] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 1 2 2 2 2 1 2 2 2 2 2 1 2 2 1 2 2 2 2 1 2 2\n[260] 2 2 1 1 2 2 2 2 2 3 3 3 3 3 1 3 3 3 1 1 1 2 1 1 3 1 1 1 1 3 3 4 3 3 3 3 3\n[297] 3 3 3 4 2 1 1 1 1 1 1 1 1 3 3 3 3 3 1 1 1 2 1 4 3 3 3 1 1 4 1 1 1 1 1 1 3\n[334] 1 3 3 3 3 2 3 3 3 3 2 1 3 1 3 3 3 3 3 2 3 3 1 1 1 1 1 3 1 3 1 1 1 2 3 1 1\n[371] 2 3 1 2 2 2 2 2 2 2 2 2 2 1 1 1 3 2 2 2 2 2 2 2 2 2 3 2 2 2 1 2 1 2 2 2 2\n[408] 2 1 2 2 2 2 2 2 2 2 2 1 2 1 1 2 2 2 2 2 1 2 1 1 2 1 2 4 2 2 1 2 2 2 2 2 2\n[445] 1 2 1 2 2 1 3 4 4 2 1 1 3 2 3 2 2 3 2 2 2 2 2 2 2 2 2 2 2 1 2 2 1 2 2 2 2\n[482] 2 2 2 2 2 1 1 2 2 1 2 2 1 3 3 2 3 3 2 2 2 4 2 2 2 2 1 1 1 1 1 2 2 1 2 2 1\n[519] 1 1 1 1 1 1 1 1 1 1 2 1 3 1 1 1 1 1 3 1 1 1 1 3 1 3 1 1 3 1 1 1 1 1 3 3 3\n[556] 1 1 1 1 1 1 1 1 1 1 1 4 1 3 3 3 1 1 1 1 1 1 3 1 3 3 3 1 1 3 3 3 1 1 1 1 1\n[593] 1 3 1 3 3 1 3 1 1 1 1 1 1 1 1 1 1 4 1 3 1 1 1 1 1 1 1 1 3 3 1 1 3 3 3 2 1\n[630] 1 3 1 2 1 2 2 2 3 2 2 2 2 1 2 2 2 2 2 2 1 2 2 2 2 2 1 2 4 2 2 2 2 2 1 2 2\n[667] 2 2 4 2 2 2 2 2 1 2 1 2 2 4 3 1 2 1 2 2 2 2 2 2 1 2 2 2 2 1 2 2 2 2 2 1 1\n[704] 1 1 1 1 1 1 1 2 1 1 1 1 1 1 2 1 1 1 1 2 1 1 1 1 2 1 2 2 1 1 1 2 1 2 2 2 2\n[741] 2 3 3 1 1 2 2 2 1 2 2 2 2 2 2 2 2 2 2 2 2\n\n\nWe also can find out how many LGA are in each cluster by means of the table command as shown in the below code chunks.\n\ntable(ccs4)\n\nccs4\n  1   2   3   4 \n300 311 130  20 \n\n\nNotice the number of LGA for each cluster matched our observation stated above.\nLastly, we will plot the pruned tree that shows the four clusters on top of the boundaries map.\n\nplot(nga_wp_sp,border=gray(.5))\nplot(clust4,coordinates(nga_wp_sp),cex.lab=.2,groups.colors=c(\"red\",\"green\",\"blue\",\"hot pink\"),cex.circles=0.06,add=TRUE)\n\n\n\n\n\n\n9.5 Visualizing the clusters in choropleth map\nThe code chunks below are used to plot the newly derived clusters by using SKATER method.\n\ngroups_mat<-as.matrix(clust4$groups)\nnga_sf_spatialcluster<-cbind(nga_wp_cluster,as.factor(groups_mat))%>%\n  rename(`SP_CLUSTER`=`as.factor.groups_mat.`)\nqtm(nga_sf_spatialcluster,\"SP_CLUSTER\")\n\n\n\n\nFor easy comparison, it will be better to place both the hierarchical clustering and spatially constrained hierarchical clustering maps by Skater method next to each other. In the below code chunks, we will be plotting an interactive map. Note that tmap_mode() will need to be set to “view” option.\n\ntmap_mode(\"view\")\nhclust.map<-qtm(nga_wp_cluster,\"CLUSTER\")+\n  tm_borders(alpha=0.5)+\n  tm_view(set.zoom.limits = c(5,10))\nshclust.map<-qtm(nga_sf_spatialcluster,\"SP_CLUSTER\")+\n  tm_borders(alpha=0.5)+\n  tm_view(set.zoom.limits = c(5,10))\ntmap_arrange(hclust.map,shclust.map,asp=NA,ncol=2,sync=TRUE)\n\n\n\n\n\n\n\n\n\n\n\n\n\nWe then need to set the option of tmap_mode() back to “plot”.\n\ntmap_mode(\"plot\")\n\nWe notice that compared to those of the non-spatially constrained clustering method, LGA that had similar attributes and were spatially autocorrelated have been grouped together and no longer fragmented under the application of spatially constrained clustering method. Spatially constrained clustering method considers homogeneity in terms of both attributes and spatial autocorrelation while non-spatially constrained clustering only considers homogeneity in terms of attributes.\n\n\n9.6 Visualizing individual clustering variable\n\n9.6.1 Multivariate Visualization\nIn the code chunks below, we use ggparcoord() function GGally package to plot parallel coordinate plot to reveal clustering variables by cluster. Do note that the data used is nga_wp_cluster, which contains data on non-spatially constrained hierarchical clustering using skater approach.\n\nggparcoord(data = nga_wp_cluster, \n           columns = c(15,20,21), \n           scale = \"globalminmax\",\n           alphaLines = 0.1,\n           boxplot = TRUE, \n           title = \"Multiple Parallel Coordinates Plots of Pct of Water points Variables by Non-Spatially Constrained Cluster\") +\n  facet_grid(~ CLUSTER) + \n  theme(axis.text.x = element_text(angle = 90))\n\n\n\n\nFrom the above plot, we observe the following points:\n\nCluster 3 had the lowest percentage of water points with hand pumps while having very high percentage of rural water points.\nCluster 4 tends to have the highest percentage of rural water points (except for some outliers hovering at around 0.5 mark) and highest percentage of water points with hand pumps while having the lowest percentage of non-functional water points.\nCluster 1’s observations tend to have the lowest percentage of rural water points while having relatively low median percentage of non-functional water points and water points with hand pumps. However, we also notice that the range of percentage of non-functional water points and percentage of water points with hand pumps are very wide, ranging from 0 to 1.\n\nWe also use similar code chunks to plot parallel coordinate plot to reveal clustering variables by spatially constrained clusters derived using skater method. Do note that the data used is nga_sf_spatialcluster with SP_CLUSTER as facet_grid argument.\n\nggparcoord(data = nga_sf_spatialcluster, \n           columns = c(15,20,21), \n           scale = \"globalminmax\",\n           alphaLines = 0.1,\n           boxplot = TRUE, \n           title = \"Multiple Parallel Coordinates Plots of Pct of Water points Variables by Spatially Constrained Cluster\") +\n  facet_grid(~ SP_CLUSTER) + \n  theme(axis.text.x = element_text(angle = 90))\n\n\n\n\nBelow are some of the observations:\n\nNotice that due to the spatial constraints fitted into the model, the ranges of attributes have become wider as the model needs to compromise some homogeneity in attribute space.\nWe also notice more outliers across all four clusters, compared to outliers found in 2 out of four clusters in the plot of non-spatially constrained hierarchical clustering method.\nCluster 4 tends to have lowest percentages across all three attributes: percentage of non-functional water points, percentage of rural water points, percentage of water points with hand pumps.\nCluster 1 tends to have high percentage of rural water point and water points with hand pumps while having moderately low percentage of non-functional water points."
  },
  {
    "objectID": "Take-home_Ex2/Take-home_Ex2.html#spatially-constrained-clustering-clustgeo-method",
    "href": "Take-home_Ex2/Take-home_Ex2.html#spatially-constrained-clustering-clustgeo-method",
    "title": "Take-home Exercise 2",
    "section": "10 Spatially Constrained Clustering: ClustGeo Method",
    "text": "10 Spatially Constrained Clustering: ClustGeo Method\nIn this section, we will also perform spatially constrained hierarchical cluster analysis using ClustGeo Method.\n\n10.1 Ward-like hierarchical clustering: ClustGeo\nClustGeo package provides function called hclustgeo() to perform a typical Ward-like hierarchical clustering just like hclust() used in the previous section.\nIn the below code chunk, we will provide the hclustgeo() function dissimilarity matrix in the attribute space proxmat (which has been derived previously) in order to perform non-spatially constrained hierarchical clustering as shown in the code chunk below. Note that the dissimilarity matrix must be object of class dist, i.e. an object obtained with the function dist().\n\nnongeo_cluster <- hclustgeo(proxmat)\nplot(nongeo_cluster, cex = 0.1\n    ,hang=-1)\nrect.hclust(nongeo_cluster, \n            k = 4, \n            border = 2:5)\n\n\n\n\n\n\n10.2 Mapping the clusters formed\nWe can plot the clusters on a categorical area shaded map by using the below code chunks:\n\ngroups <- as.factor(cutree(nongeo_cluster, k=4))\n\n\nnga_sf_ngeo_cluster <- cbind(nga_wp, as.matrix(groups)) %>%\n  rename(`CLUSTER` = `as.matrix.groups.`)\n\n\nqtm(nga_sf_ngeo_cluster,\"CLUSTER\")\n\n\n\n\nThe code chunks above perform 3 operations to form the join:\n\nas.matrix() function converts the groups list object into a matrix; and\ncbind() function of base R appends groups matrix after conversion onto the nga_wp object by columns to produce a simple feature object called nga_wp_ngeo_cluster; and\nrename() function of dplyr package renames as.matrix.groups. field to CLUSTER.\n\nAs this is a non-spatially constrained hierarchical clustering method, we notice that the plotted choropleth map still shows very fragmented clusters. We will then move on to perform spatially constrained hierarchical clustering.\n\n\n10.3 Spatially Constrained Hierarchical Clustering\nBefore performing spatially constrained hierarchical clustering, we will need to derive a spatial distance matrix by using st_distance() function of sf package. st_distance() will return a dense numeric matrix of dimensions length(x) by length(y). as.dist() is used to convert the data frame into matrix.\n\ndist <- st_distance(nga_wp, nga_wp)\ndistmat <- as.dist(dist)\n\nNext, choicealpha() will be used to determine a suitable value for the mixing parameter alpha as shown in the code chunk below.\n\ncr <- choicealpha(proxmat, distmat, range.alpha = seq(0, 1, 0.1), K=4, graph = TRUE)\n\n\n\n\n\n\n\nWith reference to the two graphs above, we pick alpha as 0.4. At 0.4, spatial contiguity increased to 70% while the homogeneity in attribute space was compromised by around 20%.\n\nclustG <- hclustgeo(proxmat, distmat, alpha = 0.4)\n\nNext, cutree() function is used to derive the cluster object.\n\ngroups <- as.factor(cutree(clustG, k=4))\n\nWe will then join back the group list with the nga_wp polygon feature data frame by using the below code chunks. Similar to the previous section, we rename as.matrix.groups to CLUSTER.\n\nnga_sf_Gcluster <- cbind(nga_wp, as.matrix(groups)) %>%\n  rename(`CLUSTER` = `as.matrix.groups.`)\n\nWe now can plot the map of the newly delineated spatially constrained clusters.\n\nqtm(nga_sf_Gcluster,\"CLUSTER\")\n\n\n\n\nWe notice how the choropleth map has been less fragmented with visible clusters.\nFor easy comparison, it will be better to place both the hierarchical clustering and spatially constrained hierarchical clustering maps by ClustGeo method next to each other. In the below code chunks, we will be plotting an interactive map. Note that tmap_mode() will need to be set to “view” option.\n\ntmap_mode(\"view\")\nhclustgeo.map<-qtm(nga_sf_ngeo_cluster,\"CLUSTER\")+\n  tm_borders(alpha=0.5)+\n  tm_view(set.zoom.limits = c(5,10))\nshclustgeo.map<-qtm(nga_sf_Gcluster,\"CLUSTER\")+\n  tm_borders(alpha=0.5)+\n  tm_view(set.zoom.limits = c(5,10))\ntmap_arrange(hclustgeo.map,shclustgeo.map,asp=NA,ncol=2,sync=TRUE)\n\n\n\n\n\n\n\n\n\n\n\n\n\nWe then need to set the option to tmap_mode() back to “plot”.\n\ntmap_mode(\"plot\")\n\nWe notice that compared to those of the non-spatially constrained clustering method under ClustGeo method, the spatially constrained clustering method provided more homogeneity in terms of contiguity space. Notice that the choropleth map has been more spatially homogeneous with some pockets of fragments as the alpha derived above balances the homogeneity between attribute space and spatial space.\n\n\n10.4 Visual Interpretation of Clusters\n\n10.4.1 Multivariate Visualization\nIn the code chunks below, we use ggparcoord() function GGally package to plot parallel coordinate plot to reveal clustering variables by cluster. Do note that the data used is nga_sf_ngeo_cluster, which contains data on non-spatially constrained hierarchical clustering using ClustGeo approach.\n\nggparcoord(data = nga_sf_ngeo_cluster, \n           columns = c(15,20,21), \n           scale = \"globalminmax\",\n           alphaLines = 0.1,\n           boxplot = TRUE, \n           title = \"Multiple Parallel Coordinates Plots of Pct of Water points Variables by Non-Spatially Constrained Cluster\") +\n  facet_grid(~ CLUSTER) + \n  theme(axis.text.x = element_text(angle = 90))\n\n\n\n\nFrom the above plot, we observe the following points:\n\nCluster 3 had the lowest percentage of water points with hand pumps while having very high percentage of rural water points.\nCluster 4 tends to have the highest percentage of rural water points (except for some outliers hovering at around 0.5 mark) and highest percentage of water points with hand pumps while having the lowest percentage of non-functional water points.\nCluster 1’s observations tend to the lowest percentage of rural water points while having relatively low median percentage of non-functional water points and water points with hand pumps. However, we also notice that the range of percentage of non-functional water points and percentage of water points with hand pumps are very wide, ranging from 0 to 1.\nLGA under Cluster 2 tend to have high percentage of rural water points while having moderately high percentage of water points with hand pumps.\n\nWe also plot another parallel coordinate plot to reveal clustering variables by spatially constrained hierarchical clusters using ClustGeo approach.\n\nggparcoord(data = nga_sf_Gcluster, \n           columns = c(15,20,21), \n           scale = \"globalminmax\",\n           alphaLines = 0.1,\n           boxplot = TRUE, \n           title = \"Multiple Parallel Coordinates Plots of Pct of Water points Variables by Spatially Constrained Cluster\") +\n  facet_grid(~ CLUSTER) + \n  theme(axis.text.x = element_text(angle = 90))\n\n\n\n\nWe notice that across all 4 clusters, range of values for the three attributes under spatially constrained hierarchical clustering method has become wider compared to those of non-spatially constrained hierarchical clusters. Observations under Cluster 1 tend to have moderately low percentage of non-functional water points, percentage of rural water points and percentage of water points with hand pumps. Cluster 3’s LGA tend to have high percentage of rural water points and water points with hand pumps while having moderately low percentage of non-functional water points (which is pretty similar to the characteristics of cluster 4 under non-spatially constrained clustering above). On the other hand, cluster 2 observations tend to have higher percentage of rural water points while having moderately low percentage of hand pumps."
  },
  {
    "objectID": "Take-home_Ex2/Take-home_Ex2.html#data-set",
    "href": "Take-home_Ex2/Take-home_Ex2.html#data-set",
    "title": "Take-home Exercise 2",
    "section": "2 Data Set",
    "text": "2 Data Set\n\n2.1 Aspatial Data\nWPdx+ dataset of Nigeria in csv format was downloaded WPdx (Water Point Data Exchange) Global Data Repositories. The dataset contains water points related data from rural areas at the water point or small water scheme level. The dataset will be re-named as geo_export.csv saved under data/aspatial folder.\n\n\n2.2 Geospatial data\nNigeria Level-2 Administrative Boundary (also known as Local Government Area) polygon features GIS data was downloaded from geoBoundaries portal. The file names were “geoBoundaries-NGA-ADM2” with different file formats and saved under data/geospatial folder."
  },
  {
    "objectID": "Take-home_Ex2/Take-home_Ex2.html#getting-started",
    "href": "Take-home_Ex2/Take-home_Ex2.html#getting-started",
    "title": "Take-home Exercise 2",
    "section": "3 Getting Started",
    "text": "3 Getting Started\nThe code chunks below install and launch these R packages in R environment:\n\npacman::p_load(rgdal,spdep,tmap,sf,ggpubr,cluster,factoextra,NbClust,heatmaply,corrplot,psych,tidyverse,funModeling,ClustGeo,GGally)\n\nBelow is the explanation for packages used in this Take-home exercise:\n\nSpatial data handling\n\nsf, rgdal and spdep\n\nAttribute data handling\n\ntidyverse, especially readr, ggplot2 and dplyr\n\nChoropleth mapping\n\ntmap\n\nMultivariate data visualisation and analysis\n\ncoorplot, ggpubr, factoextra, GGally and heatmaply\n\nCluster analysis\n\ncluster\nClustGeo implements a Ward-like hierarchical clustering algorithm including spatial/geographical constraints.\nNbClust determines the optimal number of clusters in a data set and offer the best clustering scheme from different result to the user."
  },
  {
    "objectID": "Take-home_Ex2/Take-home_Ex2.html#limitations",
    "href": "Take-home_Ex2/Take-home_Ex2.html#limitations",
    "title": "Take-home Exercise 2",
    "section": "11 Limitations",
    "text": "11 Limitations\nAs mentioned during the data wrangling process, regions without water points have been excluded from this exercise. Some may argue that these regions (except Bakassi as it belongs to Cameroon) can be grouped into another cluster on its own in order to complete the whole Nigeria map."
  },
  {
    "objectID": "Take-home_Ex2/Take-home_Ex2.html#reference",
    "href": "Take-home_Ex2/Take-home_Ex2.html#reference",
    "title": "Take-home Exercise 2",
    "section": "12 Reference",
    "text": "12 Reference\nRunfola, D. et al. (2020) geoBoundaries: A global database of political administrative boundaries. PLoS ONE 15(4): e0231866. https://doi.org/10.1371/journal.pone.0231866\nAccess data. WPdx. (n.d.). Retrieved November 30, 2022, from https://www.waterpointdata.org/access-data/\nJordan, O. (2022) Geospatial Analytics for Social Good-Understanding Nigeria Water functional and non-functional water point rate. Retrieved from https://jordan-isss624-geospatial.netlify.app/posts/geo/geospatial_exercise/#data-wrangling"
  },
  {
    "objectID": "In-class_Ex5/In-class_Ex5.html",
    "href": "In-class_Ex5/In-class_Ex5.html",
    "title": "In-class Exercise 5",
    "section": "",
    "text": "In the below code chunks, we install and import relevant packages for this exercise:\n\npacman::p_load(sf,tidyverse,funModeling,blorr,corrplot,ggpubr,spdep,GWmodel,tmap,skimr,caret)\n\nBelow is the explanation for packages used in this Take-home exercise:\n\nSpatial data handling\n\nsf and spdep\n\nAttribute data handling\n\ntidyverse, especially readr, ggplot2 and dplyr\n\nExploratory data analysis\n\nfunModeling, skimr\n\nChoropleth mapping\n\ntmap\n\nCalibrating Geographically Weighted Model\n\nGWmodel\n\nBuilding and validating binary logistics regression\n\nblorr and caret (more for applied machine learning but we can use it for this exercise for comparison purpose)"
  },
  {
    "objectID": "In-class_Ex5/In-class_Ex5.html#importing-the-analytical-data",
    "href": "In-class_Ex5/In-class_Ex5.html#importing-the-analytical-data",
    "title": "In-class Exercise 5",
    "section": "2 Importing the Analytical Data",
    "text": "2 Importing the Analytical Data\nIn the below code chunks we import the data on the analytical data\n\nOsun<-read_rds(\"rds/Osun.rds\")\nOsun_wp_sf<-read_rds(\"rds/Osun_wp_sf.rds\")"
  },
  {
    "objectID": "In-class_Ex5/In-class_Ex5.html#exploratory-data-analysis-eda",
    "href": "In-class_Ex5/In-class_Ex5.html#exploratory-data-analysis-eda",
    "title": "In-class Exercise 5",
    "section": "3 Exploratory Data Analysis (EDA)",
    "text": "3 Exploratory Data Analysis (EDA)\n\n3.1 Frequency Table of inputs under Status\nIn the below code chunks, we would like to look at frequency table of inputs under Status column.\n\nOsun_wp_sf%>%\n  freq(input=\"status\")\n\n\n\n\n  status frequency percentage cumulative_perc\n1   TRUE      2642       55.5            55.5\n2  FALSE      2118       44.5           100.0\n\n\n\n\n3.2 Summary statistics with skimr package\nIn the below code chunk, we explore using skim() function of skimr package to come up with summary statistics.\n\nOsun_wp_sf%>%\n  skim()\n\n\nData summary\n\n\nName\nPiped data\n\n\nNumber of rows\n4760\n\n\nNumber of columns\n75\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n47\n\n\nlogical\n5\n\n\nnumeric\n23\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nsource\n0\n1.00\n5\n44\n0\n2\n0\n\n\nreport_date\n0\n1.00\n22\n22\n0\n42\n0\n\n\nstatus_id\n0\n1.00\n2\n7\n0\n3\n0\n\n\nwater_source_clean\n0\n1.00\n8\n22\n0\n3\n0\n\n\nwater_source_category\n0\n1.00\n4\n6\n0\n2\n0\n\n\nwater_tech_clean\n24\n0.99\n9\n23\n0\n3\n0\n\n\nwater_tech_category\n24\n0.99\n9\n15\n0\n2\n0\n\n\nfacility_type\n0\n1.00\n8\n8\n0\n1\n0\n\n\nclean_country_name\n0\n1.00\n7\n7\n0\n1\n0\n\n\nclean_adm1\n0\n1.00\n3\n5\n0\n5\n0\n\n\nclean_adm2\n0\n1.00\n3\n14\n0\n35\n0\n\n\nclean_adm3\n4760\n0.00\nNA\nNA\n0\n0\n0\n\n\nclean_adm4\n4760\n0.00\nNA\nNA\n0\n0\n0\n\n\ninstaller\n4760\n0.00\nNA\nNA\n0\n0\n0\n\n\nmanagement_clean\n1573\n0.67\n5\n37\n0\n7\n0\n\n\nstatus_clean\n0\n1.00\n9\n32\n0\n7\n0\n\n\npay\n0\n1.00\n2\n39\n0\n7\n0\n\n\nfecal_coliform_presence\n4760\n0.00\nNA\nNA\n0\n0\n0\n\n\nsubjective_quality\n0\n1.00\n18\n20\n0\n4\n0\n\n\nactivity_id\n4757\n0.00\n36\n36\n0\n3\n0\n\n\nscheme_id\n4760\n0.00\nNA\nNA\n0\n0\n0\n\n\nwpdx_id\n0\n1.00\n12\n12\n0\n4760\n0\n\n\nnotes\n0\n1.00\n2\n96\n0\n3502\n0\n\n\norig_lnk\n4757\n0.00\n84\n84\n0\n1\n0\n\n\nphoto_lnk\n41\n0.99\n84\n84\n0\n4719\n0\n\n\ncountry_id\n0\n1.00\n2\n2\n0\n1\n0\n\n\ndata_lnk\n0\n1.00\n79\n96\n0\n2\n0\n\n\nwater_point_history\n0\n1.00\n142\n834\n0\n4750\n0\n\n\nclean_country_id\n0\n1.00\n3\n3\n0\n1\n0\n\n\ncountry_name\n0\n1.00\n7\n7\n0\n1\n0\n\n\nwater_source\n0\n1.00\n8\n30\n0\n4\n0\n\n\nwater_tech\n0\n1.00\n5\n37\n0\n20\n0\n\n\nadm2\n0\n1.00\n3\n14\n0\n33\n0\n\n\nadm3\n4760\n0.00\nNA\nNA\n0\n0\n0\n\n\nmanagement\n1573\n0.67\n5\n47\n0\n7\n0\n\n\nadm1\n0\n1.00\n4\n5\n0\n4\n0\n\n\nNew Georeferenced Column\n0\n1.00\n16\n35\n0\n4760\n0\n\n\nlat_lon_deg\n0\n1.00\n13\n32\n0\n4760\n0\n\n\npublic_data_source\n0\n1.00\n84\n102\n0\n2\n0\n\n\nconverted\n0\n1.00\n53\n53\n0\n1\n0\n\n\ncreated_timestamp\n0\n1.00\n22\n22\n0\n2\n0\n\n\nupdated_timestamp\n0\n1.00\n22\n22\n0\n2\n0\n\n\nGeometry\n0\n1.00\n33\n37\n0\n4760\n0\n\n\nADM2_EN\n0\n1.00\n3\n14\n0\n30\n0\n\n\nADM2_PCODE\n0\n1.00\n8\n8\n0\n30\n0\n\n\nADM1_EN\n0\n1.00\n4\n4\n0\n1\n0\n\n\nADM1_PCODE\n0\n1.00\n5\n5\n0\n1\n0\n\n\n\nVariable type: logical\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\ncount\n\n\n\n\nrehab_year\n4760\n0\nNaN\n:\n\n\nrehabilitator\n4760\n0\nNaN\n:\n\n\nis_urban\n0\n1\n0.39\nFAL: 2884, TRU: 1876\n\n\nlatest_record\n0\n1\n1.00\nTRU: 4760\n\n\nstatus\n0\n1\n0.56\nTRU: 2642, FAL: 2118\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nrow_id\n0\n1.00\n68550.48\n10216.94\n49601.00\n66874.75\n68244.50\n69562.25\n471319.00\n▇▁▁▁▁\n\n\nlat_deg\n0\n1.00\n7.68\n0.22\n7.06\n7.51\n7.71\n7.88\n8.06\n▁▂▇▇▇\n\n\nlon_deg\n0\n1.00\n4.54\n0.21\n4.08\n4.36\n4.56\n4.71\n5.06\n▃▆▇▇▂\n\n\ninstall_year\n1144\n0.76\n2008.63\n6.04\n1917.00\n2006.00\n2010.00\n2013.00\n2015.00\n▁▁▁▁▇\n\n\nfecal_coliform_value\n4760\n0.00\nNaN\nNA\nNA\nNA\nNA\nNA\nNA\n\n\n\ndistance_to_primary_road\n0\n1.00\n5021.53\n5648.34\n0.01\n719.36\n2972.78\n7314.73\n26909.86\n▇▂▁▁▁\n\n\ndistance_to_secondary_road\n0\n1.00\n3750.47\n3938.63\n0.15\n460.90\n2554.25\n5791.94\n19559.48\n▇▃▁▁▁\n\n\ndistance_to_tertiary_road\n0\n1.00\n1259.28\n1680.04\n0.02\n121.25\n521.77\n1834.42\n10966.27\n▇▂▁▁▁\n\n\ndistance_to_city\n0\n1.00\n16663.99\n10960.82\n53.05\n7930.75\n15030.41\n24255.75\n47934.34\n▇▇▆▃▁\n\n\ndistance_to_town\n0\n1.00\n16726.59\n12452.65\n30.00\n6876.92\n12204.53\n27739.46\n44020.64\n▇▅▃▃▂\n\n\nrehab_priority\n2654\n0.44\n489.33\n1658.81\n0.00\n7.00\n91.50\n376.25\n29697.00\n▇▁▁▁▁\n\n\nwater_point_population\n4\n1.00\n513.58\n1458.92\n0.00\n14.00\n119.00\n433.25\n29697.00\n▇▁▁▁▁\n\n\nlocal_population_1km\n4\n1.00\n2727.16\n4189.46\n0.00\n176.00\n1032.00\n3717.00\n36118.00\n▇▁▁▁▁\n\n\ncrucialness_score\n798\n0.83\n0.26\n0.28\n0.00\n0.07\n0.15\n0.35\n1.00\n▇▃▁▁▁\n\n\npressure_score\n798\n0.83\n1.46\n4.16\n0.00\n0.12\n0.41\n1.24\n93.69\n▇▁▁▁▁\n\n\nusage_capacity\n0\n1.00\n560.74\n338.46\n300.00\n300.00\n300.00\n1000.00\n1000.00\n▇▁▁▁▅\n\n\ndays_since_report\n0\n1.00\n2692.69\n41.92\n1483.00\n2688.00\n2693.00\n2700.00\n4645.00\n▁▇▁▁▁\n\n\nstaleness_score\n0\n1.00\n42.80\n0.58\n23.13\n42.70\n42.79\n42.86\n62.66\n▁▁▇▁▁\n\n\nlocation_id\n0\n1.00\n235865.49\n6657.60\n23741.00\n230638.75\n236199.50\n240061.25\n267454.00\n▁▁▁▁▇\n\n\ncluster_size\n0\n1.00\n1.05\n0.25\n1.00\n1.00\n1.00\n1.00\n4.00\n▇▁▁▁▁\n\n\nlat_deg_original\n4760\n0.00\nNaN\nNA\nNA\nNA\nNA\nNA\nNA\n\n\n\nlon_deg_original\n4760\n0.00\nNaN\nNA\nNA\nNA\nNA\nNA\nNA\n\n\n\ncount\n0\n1.00\n1.00\n0.00\n1.00\n1.00\n1.00\n1.00\n1.00\n▁▁▇▁▁\n\n\n\n\n\nNotice that with this function skim() summary statistics is nicely arranged in tabular form, which is easier for us to read.\nIn this table, it is important to look at n_missing field where it displays the number of missing records. We notice that for some fields such as rehab_priority and install_year have very large number of missing records (2654 and 1144 respectively) while the total number of observations were 4760, which meant that around 55.77% and 24.03% (more than 20%) of the records will be missing. Therefore, it may not be ideal to choose these variables as explanatory variables for our analysis. On the other hand, we notice that variables such as water_point_population and local_population_1km have 4 missing records. Since the number of records is considerably small for the size of the data set, we can use these 2 variables for our analysis.\nFrom the summary table above, the independent variables that we will be using for the analysis will be:\n\ndistance_to_primary_road\ndistance_to_secondary_road\ndistance_to_tertiary_road\ndistance_to_city\ndistance_to_town\nwater_point_population\nlocal_population_1km\nusage_capacity\nis_urban\nwater_source_clean\n\n\n\n3.3 Data Wrangling with dplyr package\nIn the next code chunks, we will come up with a new data frame called Osun_wp_sf_clean where we have filtered out all the missing values in those independent variables that we have selected above.\n\nOsun_wp_sf_clean<-Osun_wp_sf%>%\n  filter_at(vars(status,\n                  distance_to_primary_road,distance_to_tertiary_road,distance_to_city,distance_to_town,water_point_population,local_population_1km,usage_capacity,is_urban,water_source_clean),all_vars(!is.na(.)))%>%\n  mutate(usage_capacity=as.factor(usage_capacity))\n\nAt the same time, we also convert usage capacity to factor using as.factor() function instead of keeping the original numeric values. Else, the calibration will be different when we build the model."
  },
  {
    "objectID": "In-class_Ex5/In-class_Ex5.html#correlation-analysis",
    "href": "In-class_Ex5/In-class_Ex5.html#correlation-analysis",
    "title": "In-class Exercise 5",
    "section": "4 Correlation Analysis",
    "text": "4 Correlation Analysis\nIn the below code chunks, we come up with a new data frame called Osun_wp by selecting all the column number of the independent variables selected above. At the same time, we also use st_set_geometry() function of sf package to drop the Geometry column.\n\nOsun_wp<-Osun_wp_sf_clean%>%\n  select(c(7,35:39,42:43,46:47,57))%>%\n  st_set_geometry(NULL)\n\nDo note that for simple feature data frame, we need to drop the geometry column to derive the correlation matrix. Else there will be error.\n\ncluster_vars.cor=cor(Osun_wp[,2:7])\ncorrplot.mixed(cluster_vars.cor,lower=\"ellipse\",upper=\"number\",tl.pos=\"lt\",diag=\"l\",tl.col=\"black\")\n\n\n\n\nFrom the above matrix, if we use 0.8 (both negative and positive signs), we can see that there is no sign of multi-collinearity between the independent variables. Also note that we should only look at the independent variables and not dependent variable."
  },
  {
    "objectID": "In-class_Ex5/In-class_Ex5.html#building-a-logistics-regression-model",
    "href": "In-class_Ex5/In-class_Ex5.html#building-a-logistics-regression-model",
    "title": "In-class Exercise 5",
    "section": "5 Building a logistics regression model",
    "text": "5 Building a logistics regression model\nIn the below code chunk, we use glm() of Rstats to build a list object called model.\n\nmodel<-glm(status~distance_to_primary_road+distance_to_secondary_road+distance_to_tertiary_road+distance_to_city+distance_to_town+is_urban+usage_capacity+water_source_clean+water_point_population+local_population_1km,data=Osun_wp_sf_clean,family=binomial(link=\"logit\"))\n\nNote that the result will be a list object with list of data tables.\nIn the below code chunk, we use blr_regress() function of blorr package to convert the modeling results into a report.\n\nblr_regress(model)\n\n                             Model Overview                              \n------------------------------------------------------------------------\nData Set    Resp Var    Obs.    Df. Model    Df. Residual    Convergence \n------------------------------------------------------------------------\n  data       status     4756      4755           4744           TRUE     \n------------------------------------------------------------------------\n\n                    Response Summary                     \n--------------------------------------------------------\nOutcome        Frequency        Outcome        Frequency \n--------------------------------------------------------\n   0             2114              1             2642    \n--------------------------------------------------------\n\n                                 Maximum Likelihood Estimates                                   \n-----------------------------------------------------------------------------------------------\n               Parameter                    DF    Estimate    Std. Error    z value     Pr(>|z|) \n-----------------------------------------------------------------------------------------------\n              (Intercept)                   1      0.3887        0.1124      3.4588       5e-04 \n        distance_to_primary_road            1      0.0000        0.0000     -0.7153      0.4744 \n       distance_to_secondary_road           1      0.0000        0.0000     -0.5530      0.5802 \n       distance_to_tertiary_road            1      1e-04         0.0000      4.6708      0.0000 \n            distance_to_city                1      0.0000        0.0000     -4.7574      0.0000 \n            distance_to_town                1      0.0000        0.0000     -4.9170      0.0000 \n              is_urbanTRUE                  1     -0.2971        0.0819     -3.6294       3e-04 \n           usage_capacity1000               1     -0.6230        0.0697     -8.9366      0.0000 \nwater_source_cleanProtected Shallow Well    1      0.5040        0.0857      5.8783      0.0000 \n   water_source_cleanProtected Spring       1      1.2882        0.4388      2.9359      0.0033 \n         water_point_population             1      -5e-04        0.0000    -11.3686      0.0000 \n          local_population_1km              1      3e-04         0.0000     19.2953      0.0000 \n-----------------------------------------------------------------------------------------------\n\n Association of Predicted Probabilities and Observed Responses  \n---------------------------------------------------------------\n% Concordant          0.7347          Somers' D        0.4693   \n% Discordant          0.2653          Gamma            0.4693   \n% Tied                0.0000          Tau-a            0.2318   \nPairs                5585188          c                0.7347   \n---------------------------------------------------------------\n\n\nFrom the above table summary, we notice that these 2 independent variables: distance_to_primary_road and distance_to_secondary_road have p-values at 0.4744 and 0.5802 respectively. They are more than the alpha (significance level) of 0.05. Therefore, these two variables are not statistically significant. However, for the purpose of understanding the accuracy and other parameter of the models in this exercise, we will still keep these 2 variables for now.\n\n5.1 Deriving a confusion matrix under global/generalized linear regression model\nIn the below code chunk, we use blr_confusion_matrix() of blorr package to derive a confusion matrix. We also set the cutoff as 0.5.\n\nblr_confusion_matrix(model,cutoff = 0.5)\n\nConfusion Matrix and Statistics \n\n          Reference\nPrediction FALSE TRUE\n         0  1301  738\n         1   813 1904\n\n                Accuracy : 0.6739 \n     No Information Rate : 0.4445 \n\n                   Kappa : 0.3373 \n\nMcNemars's Test P-Value  : 0.0602 \n\n             Sensitivity : 0.7207 \n             Specificity : 0.6154 \n          Pos Pred Value : 0.7008 \n          Neg Pred Value : 0.6381 \n              Prevalence : 0.5555 \n          Detection Rate : 0.4003 \n    Detection Prevalence : 0.5713 \n       Balanced Accuracy : 0.6680 \n               Precision : 0.7008 \n                  Recall : 0.7207 \n\n        'Positive' Class : 1\n\n\nFrom the above summary, we know that overall the accuracy is 0.6739.\nSensitivity value of 0.7207 and specificity of 0.6154 mean that the model can flag out true positive (roughly 72%) better than true negative (roughly 61%)."
  },
  {
    "objectID": "In-class_Ex5/In-class_Ex5.html#building-geographically-weighted-logistics-regression-model",
    "href": "In-class_Ex5/In-class_Ex5.html#building-geographically-weighted-logistics-regression-model",
    "title": "In-class Exercise 5",
    "section": "6 Building Geographically Weighted Logistics Regression Model",
    "text": "6 Building Geographically Weighted Logistics Regression Model\n\n6.1 Change data from sf to sp\nIn the below code chunks, we will need to convert sf data frame to sp data frame.\n\nOsun_wp_sp<-Osun_wp_sf_clean%>%\n  select(c(status,distance_to_primary_road,distance_to_secondary_road,distance_to_tertiary_road,distance_to_city,distance_to_town,is_urban,usage_capacity,water_source_clean,water_point_population,local_population_1km))%>%\n  as_Spatial()\nOsun_wp_sp\n\nclass       : SpatialPointsDataFrame \nfeatures    : 4756 \nextent      : 182502.4, 290751, 340054.1, 450905.3  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=4 +lon_0=8.5 +k=0.99975 +x_0=670553.98 +y_0=0 +a=6378249.145 +rf=293.465 +towgs84=-92,-93,122,0,0,0,0 +units=m +no_defs \nvariables   : 11\nnames       : status, distance_to_primary_road, distance_to_secondary_road, distance_to_tertiary_road, distance_to_city, distance_to_town, is_urban, usage_capacity, water_source_clean, water_point_population, local_population_1km \nmin values  :      0,        0.014461356813335,          0.152195902540837,         0.017815121653488, 53.0461399623541, 30.0019777713073,        0,           1000,           Borehole,                      0,                    0 \nmax values  :      1,         26909.8616132094,           19559.4793799085,          10966.2705628969,  47934.343603562, 44020.6393368124,        1,            300,   Protected Spring,                  29697,                36118 \n\n\nNotice that the class has been changed to SpatialPolygonsDataFrame. We use the Osun_wp_sf_clean data set (instead of Osun_wp_sf) where we have already excluded the 4 missing values under the water_point_population and local_population_1km variables.\n\n\n6.2 Building Fixed Bandwidth GW model\n\n6.2.1 Computing fixed bandwidth\nNext, in the below code chunks, we will calculate the fixed bandwidth for the generalized geographically weighted regression by using bw.ggwr() function of GWmodel\n\n#|eval: false\n#|echo: false\nbw.fixed<-bw.ggwr(status~distance_to_primary_road+distance_to_secondary_road+distance_to_tertiary_road+distance_to_city+distance_to_town+is_urban+usage_capacity+water_source_clean+water_point_population+local_population_1km,data=Osun_wp_sp,family=\"binomial\",approach=\"AIC\",kernel=\"gaussian\",adaptive=FALSE,longlat=FALSE)\n\nTake a cup of tea and have a break, it will take a few minutes.\n          -----A kind suggestion from GWmodel development group\n Iteration    Log-Likelihood:(With bandwidth:  95768.67 )\n=========================\n       0        -2889 \n       1        -2836 \n       2        -2830 \n       3        -2829 \n       4        -2829 \n       5        -2829 \nFixed bandwidth: 95768.67 AICc value: 5684.357 \n Iteration    Log-Likelihood:(With bandwidth:  59200.13 )\n=========================\n       0        -2875 \n       1        -2818 \n       2        -2810 \n       3        -2808 \n       4        -2808 \n       5        -2808 \nFixed bandwidth: 59200.13 AICc value: 5646.785 \n Iteration    Log-Likelihood:(With bandwidth:  36599.53 )\n=========================\n       0        -2847 \n       1        -2781 \n       2        -2768 \n       3        -2765 \n       4        -2765 \n       5        -2765 \n       6        -2765 \nFixed bandwidth: 36599.53 AICc value: 5575.148 \n Iteration    Log-Likelihood:(With bandwidth:  22631.59 )\n=========================\n       0        -2798 \n       1        -2719 \n       2        -2698 \n       3        -2693 \n       4        -2693 \n       5        -2693 \n       6        -2693 \nFixed bandwidth: 22631.59 AICc value: 5466.883 \n Iteration    Log-Likelihood:(With bandwidth:  13998.93 )\n=========================\n       0        -2720 \n       1        -2622 \n       2        -2590 \n       3        -2581 \n       4        -2580 \n       5        -2580 \n       6        -2580 \n       7        -2580 \nFixed bandwidth: 13998.93 AICc value: 5324.578 \n Iteration    Log-Likelihood:(With bandwidth:  8663.649 )\n=========================\n       0        -2601 \n       1        -2476 \n       2        -2431 \n       3        -2419 \n       4        -2417 \n       5        -2417 \n       6        -2417 \n       7        -2417 \nFixed bandwidth: 8663.649 AICc value: 5163.61 \n Iteration    Log-Likelihood:(With bandwidth:  5366.266 )\n=========================\n       0        -2436 \n       1        -2268 \n       2        -2194 \n       3        -2167 \n       4        -2161 \n       5        -2161 \n       6        -2161 \n       7        -2161 \n       8        -2161 \n       9        -2161 \nFixed bandwidth: 5366.266 AICc value: 4990.587 \n Iteration    Log-Likelihood:(With bandwidth:  3328.371 )\n=========================\n       0        -2157 \n       1        -1922 \n       2        -1802 \n       3        -1739 \n       4        -1713 \n       5        -1713 \nFixed bandwidth: 3328.371 AICc value: 4798.288 \n Iteration    Log-Likelihood:(With bandwidth:  2068.882 )\n=========================\n       0        -1751 \n       1        -1421 \n       2        -1238 \n       3        -1133 \n       4        -1084 \n       5        -1084 \nFixed bandwidth: 2068.882 AICc value: 4837.017 \n Iteration    Log-Likelihood:(With bandwidth:  4106.777 )\n=========================\n       0        -2297 \n       1        -2095 \n       2        -1997 \n       3        -1951 \n       4        -1938 \n       5        -1936 \n       6        -1936 \n       7        -1936 \n       8        -1936 \nFixed bandwidth: 4106.777 AICc value: 4873.161 \n Iteration    Log-Likelihood:(With bandwidth:  2847.289 )\n=========================\n       0        -2036 \n       1        -1771 \n       2        -1633 \n       3        -1558 \n       4        -1525 \n       5        -1525 \nFixed bandwidth: 2847.289 AICc value: 4768.192 \n Iteration    Log-Likelihood:(With bandwidth:  2549.964 )\n=========================\n       0        -1941 \n       1        -1655 \n       2        -1503 \n       3        -1417 \n       4        -1378 \n       5        -1378 \nFixed bandwidth: 2549.964 AICc value: 4762.212 \n Iteration    Log-Likelihood:(With bandwidth:  2366.207 )\n=========================\n       0        -1874 \n       1        -1573 \n       2        -1410 \n       3        -1316 \n       4        -1274 \n       5        -1274 \nFixed bandwidth: 2366.207 AICc value: 4773.081 \n Iteration    Log-Likelihood:(With bandwidth:  2663.532 )\n=========================\n       0        -1979 \n       1        -1702 \n       2        -1555 \n       3        -1474 \n       4        -1438 \n       5        -1438 \nFixed bandwidth: 2663.532 AICc value: 4762.568 \n Iteration    Log-Likelihood:(With bandwidth:  2479.775 )\n=========================\n       0        -1917 \n       1        -1625 \n       2        -1468 \n       3        -1380 \n       4        -1339 \n       5        -1339 \nFixed bandwidth: 2479.775 AICc value: 4764.294 \n Iteration    Log-Likelihood:(With bandwidth:  2593.343 )\n=========================\n       0        -1956 \n       1        -1674 \n       2        -1523 \n       3        -1439 \n       4        -1401 \n       5        -1401 \nFixed bandwidth: 2593.343 AICc value: 4761.813 \n Iteration    Log-Likelihood:(With bandwidth:  2620.153 )\n=========================\n       0        -1965 \n       1        -1685 \n       2        -1536 \n       3        -1453 \n       4        -1415 \n       5        -1415 \nFixed bandwidth: 2620.153 AICc value: 4761.89 \n Iteration    Log-Likelihood:(With bandwidth:  2576.774 )\n=========================\n       0        -1950 \n       1        -1667 \n       2        -1515 \n       3        -1431 \n       4        -1393 \n       5        -1393 \nFixed bandwidth: 2576.774 AICc value: 4761.889 \n Iteration    Log-Likelihood:(With bandwidth:  2603.584 )\n=========================\n       0        -1960 \n       1        -1678 \n       2        -1528 \n       3        -1445 \n       4        -1407 \n       5        -1407 \nFixed bandwidth: 2603.584 AICc value: 4761.813 \n Iteration    Log-Likelihood:(With bandwidth:  2609.913 )\n=========================\n       0        -1962 \n       1        -1680 \n       2        -1531 \n       3        -1448 \n       4        -1410 \n       5        -1410 \nFixed bandwidth: 2609.913 AICc value: 4761.831 \n Iteration    Log-Likelihood:(With bandwidth:  2599.672 )\n=========================\n       0        -1958 \n       1        -1676 \n       2        -1526 \n       3        -1443 \n       4        -1405 \n       5        -1405 \nFixed bandwidth: 2599.672 AICc value: 4761.809 \n Iteration    Log-Likelihood:(With bandwidth:  2597.255 )\n=========================\n       0        -1957 \n       1        -1675 \n       2        -1525 \n       3        -1441 \n       4        -1403 \n       5        -1403 \nFixed bandwidth: 2597.255 AICc value: 4761.809 \n\n\nWe use the code chunk below to show the value of the fixed bandwidth.\n\nbw.fixed\n\n[1] 2599.672\n\n\nIn the below code chunks, we will use ggwr.basic() function of GWmodel package to implement generalized GWR.\n\ngwlr.fixed<-ggwr.basic(status~distance_to_primary_road+distance_to_secondary_road+distance_to_tertiary_road+distance_to_city+distance_to_town+is_urban+usage_capacity+water_source_clean+water_point_population+local_population_1km,data=Osun_wp_sp,bw=bw.fixed,family=\"binomial\",kernel=\"gaussian\",adaptive=FALSE,longlat=FALSE)\n\n Iteration    Log-Likelihood\n=========================\n       0        -1958 \n       1        -1676 \n       2        -1526 \n       3        -1443 \n       4        -1405 \n       5        -1405 \n\n\n\ngwlr.fixed\n\n   ***********************************************************************\n   *                       Package   GWmodel                             *\n   ***********************************************************************\n   Program starts at: 2022-12-17 23:38:47 \n   Call:\n   ggwr.basic(formula = status ~ distance_to_primary_road + distance_to_secondary_road + \n    distance_to_tertiary_road + distance_to_city + distance_to_town + \n    is_urban + usage_capacity + water_source_clean + water_point_population + \n    local_population_1km, data = Osun_wp_sp, bw = bw.fixed, family = \"binomial\", \n    kernel = \"gaussian\", adaptive = FALSE, longlat = FALSE)\n\n   Dependent (y) variable:  status\n   Independent variables:  distance_to_primary_road distance_to_secondary_road distance_to_tertiary_road distance_to_city distance_to_town is_urban usage_capacity water_source_clean water_point_population local_population_1km\n   Number of data points: 4756\n   Used family: binomial\n   ***********************************************************************\n   *              Results of Generalized linear Regression               *\n   ***********************************************************************\n\nCall:\nNULL\n\nDeviance Residuals: \n     Min        1Q    Median        3Q       Max  \n-124.555    -1.755     1.072     1.742    34.333  \n\nCoefficients:\n                                           Estimate Std. Error z value Pr(>|z|)\nIntercept                                 3.887e-01  1.124e-01   3.459 0.000543\ndistance_to_primary_road                 -4.642e-06  6.490e-06  -0.715 0.474422\ndistance_to_secondary_road               -5.143e-06  9.299e-06  -0.553 0.580230\ndistance_to_tertiary_road                 9.683e-05  2.073e-05   4.671 3.00e-06\ndistance_to_city                         -1.686e-05  3.544e-06  -4.757 1.96e-06\ndistance_to_town                         -1.480e-05  3.009e-06  -4.917 8.79e-07\nis_urbanTRUE                             -2.971e-01  8.185e-02  -3.629 0.000284\nusage_capacity1000                       -6.230e-01  6.972e-02  -8.937  < 2e-16\nwater_source_cleanProtected Shallow Well  5.040e-01  8.574e-02   5.878 4.14e-09\nwater_source_cleanProtected Spring        1.288e+00  4.388e-01   2.936 0.003325\nwater_point_population                   -5.097e-04  4.484e-05 -11.369  < 2e-16\nlocal_population_1km                      3.451e-04  1.788e-05  19.295  < 2e-16\n                                            \nIntercept                                ***\ndistance_to_primary_road                    \ndistance_to_secondary_road                  \ndistance_to_tertiary_road                ***\ndistance_to_city                         ***\ndistance_to_town                         ***\nis_urbanTRUE                             ***\nusage_capacity1000                       ***\nwater_source_cleanProtected Shallow Well ***\nwater_source_cleanProtected Spring       ** \nwater_point_population                   ***\nlocal_population_1km                     ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n(Dispersion parameter for binomial family taken to be 1)\n\n    Null deviance: 6534.5  on 4755  degrees of freedom\nResidual deviance: 5688.0  on 4744  degrees of freedom\nAIC: 5712\n\nNumber of Fisher Scoring iterations: 5\n\n\n AICc:  5712.099\n Pseudo R-square value:  0.1295351\n   ***********************************************************************\n   *          Results of Geographically Weighted Regression              *\n   ***********************************************************************\n\n   *********************Model calibration information*********************\n   Kernel function: gaussian \n   Fixed bandwidth: 2599.672 \n   Regression points: the same locations as observations are used.\n   Distance metric: A distance matrix is specified for this model calibration.\n\n   ************Summary of Generalized GWR coefficient estimates:**********\n                                                   Min.     1st Qu.      Median\n   Intercept                                -8.7228e+02 -4.9955e+00  1.7600e+00\n   distance_to_primary_road                 -1.9389e-02 -4.8031e-04  2.9618e-05\n   distance_to_secondary_road               -1.5921e-02 -3.7551e-04  1.2317e-04\n   distance_to_tertiary_road                -1.5618e-02 -4.2368e-04  7.6179e-05\n   distance_to_city                         -1.8416e-02 -5.6217e-04 -1.2726e-04\n   distance_to_town                         -2.2411e-02 -5.7283e-04 -1.5155e-04\n   is_urbanTRUE                             -1.9790e+02 -4.2908e+00 -1.6864e+00\n   usage_capacity1000                       -2.0772e+01 -9.7231e-01 -4.1592e-01\n   water_source_cleanProtected.Shallow.Well -2.0789e+01 -4.5190e-01  5.3340e-01\n   water_source_cleanProtected.Spring       -5.2235e+02 -5.5977e+00  2.5441e+00\n   water_point_population                   -5.2208e-02 -2.2767e-03 -9.8875e-04\n   local_population_1km                     -1.2698e-01  4.9952e-04  1.0638e-03\n                                                3rd Qu.      Max.\n   Intercept                                 1.2763e+01 1073.2154\n   distance_to_primary_road                  4.8443e-04    0.0142\n   distance_to_secondary_road                6.0692e-04    0.0258\n   distance_to_tertiary_road                 6.6814e-04    0.0128\n   distance_to_city                          2.3718e-04    0.0150\n   distance_to_town                          1.9271e-04    0.0224\n   is_urbanTRUE                              1.2841e+00  744.3097\n   usage_capacity1000                        3.0322e-01    5.9281\n   water_source_cleanProtected.Shallow.Well  1.7849e+00   67.6343\n   water_source_cleanProtected.Spring        6.7663e+00  317.4123\n   water_point_population                    5.0102e-04    0.1309\n   local_population_1km                      1.8157e-03    0.0392\n   ************************Diagnostic information*************************\n   Number of data points: 4756 \n   GW Deviance: 2795.084 \n   AIC : 4414.606 \n   AICc : 4747.423 \n   Pseudo R-square value:  0.5722559 \n\n   ***********************************************************************\n   Program stops at: 2022-12-17 23:40:27 \n\n\nBy comparing the AIC under Global Model and GWLR Model, we notice that AIC dropped from 5712.099 to 4414.606. Notice that GWLR model has no AICc value, therefore, we can only compare AIC value. We can conclude that GWLR model improves the explanatory capabilities compared to generalized linear regression model."
  },
  {
    "objectID": "In-class_Ex5/In-class_Ex5.html#model-assessment",
    "href": "In-class_Ex5/In-class_Ex5.html#model-assessment",
    "title": "In-class Exercise 5",
    "section": "7 Model Assessment",
    "text": "7 Model Assessment\n\n7.1 Converting SDF into sf data.frame\nTo assess the performance of the gwLR, we will convert the SDF object in as data frame by using the code chunk below:\n\ngwr.fixed<-as.data.frame(gwlr.fixed$SDF)\n\nNext, we will label yhat values greater or equal to 0.5 into 1 and else 0. The result of the logic comparison operation will be saved into a field called most.\n\ngwr.fixed<-gwr.fixed%>%\n  mutate(most=ifelse(gwr.fixed$yhat>=0.5,T,F))\n\nPut both as factor and make the confusion Matrix that the one we have just now.\n\ngwr.fixed$y<-as.factor(gwr.fixed$y)\ngwr.fixed$most<-as.factor(gwr.fixed$most)\nCM<-confusionMatrix(data=gwr.fixed$most,reference=gwr.fixed$y)\nCM\n\nConfusion Matrix and Statistics\n\n          Reference\nPrediction FALSE TRUE\n     FALSE  1824  263\n     TRUE    290 2379\n                                          \n               Accuracy : 0.8837          \n                 95% CI : (0.8743, 0.8927)\n    No Information Rate : 0.5555          \n    P-Value [Acc > NIR] : <2e-16          \n                                          \n                  Kappa : 0.7642          \n                                          \n Mcnemar's Test P-Value : 0.2689          \n                                          \n            Sensitivity : 0.8628          \n            Specificity : 0.9005          \n         Pos Pred Value : 0.8740          \n         Neg Pred Value : 0.8913          \n             Prevalence : 0.4445          \n         Detection Rate : 0.3835          \n   Detection Prevalence : 0.4388          \n      Balanced Accuracy : 0.8816          \n                                          \n       'Positive' Class : FALSE           \n                                          \n\n\nThe accuracy of the model has increased from 0.67 to 0.8837. We did not change any variables from global linear regression to GWLR. Only the approach changed. We also notice the increase in sensitivity and specificity respectively, which means that GWLR can flag the true positive and true negative better than the global linear regression approach.\nTake note that yhat looks at functional water points. If we set cut-off at 0.5, values which are less than 0.5 can be equivalent to high probability of non-functional water points. By using GWR, we can explain the non-functional water points better. This means that in order to improve the water point functionality in regions, we should apply localized strategy instead of a more countrywide strategy."
  },
  {
    "objectID": "In-class_Ex5/In-class_Ex5.html#visualizing-gwlr",
    "href": "In-class_Ex5/In-class_Ex5.html#visualizing-gwlr",
    "title": "In-class Exercise 5",
    "section": "8 Visualizing gwLR",
    "text": "8 Visualizing gwLR\n\nOsun_wp_sf_selected<-Osun_wp_sf_clean%>%\n  select(c(ADM2_EN,ADM2_PCODE,ADM1_EN,ADM1_PCODE,status))\n\n\ngwr_sf.fixed<-cbind(Osun_wp_sf_selected,gwr.fixed)\n\n\n8.1 Visualizing coefficient estimates\nThe code chunks below is used to create an interactive point symbol map.\n\ntmap_mode(\"view\")\nprob_T<-tm_shape(Osun)+\n  tm_polygons(alpha=0.1)+\ntm_shape(gwr_sf.fixed)+\n  tm_dots(col=\"yhat\",border.col=\"gray60\",border.lwd=1)+\n  tm_view(set.zoom.limits = c(8,14))\nprob_T\n\n\n\n\n\n\n\ntmap_mode(\"plot\")"
  },
  {
    "objectID": "In-class_Ex5/In-class_Ex5.html#building-geographically-weighted-logistics-regression-by-removing-two-non-statistically-significant-independent-variables",
    "href": "In-class_Ex5/In-class_Ex5.html#building-geographically-weighted-logistics-regression-by-removing-two-non-statistically-significant-independent-variables",
    "title": "In-class Exercise 5",
    "section": "9 Building Geographically Weighted Logistics Regression by removing two non statistically significant independent variables",
    "text": "9 Building Geographically Weighted Logistics Regression by removing two non statistically significant independent variables\nIn the below code chunks, we calculate the fixed bandwidth for a new model which we have removed two variables which are not statistically significant: water_point_population and local_population_1km\n\nbw.fixed_rm<-bw.ggwr(status~distance_to_tertiary_road+distance_to_city+distance_to_town+is_urban+usage_capacity+water_source_clean+water_point_population+local_population_1km,data=Osun_wp_sp,family=\"binomial\",approach=\"AIC\",kernel=\"gaussian\",adaptive=FALSE,longlat=FALSE)\n\nTake a cup of tea and have a break, it will take a few minutes.\n          -----A kind suggestion from GWmodel development group\n Iteration    Log-Likelihood:(With bandwidth:  95768.67 )\n=========================\n       0        -2890 \n       1        -2837 \n       2        -2830 \n       3        -2829 \n       4        -2829 \n       5        -2829 \nFixed bandwidth: 95768.67 AICc value: 5681.18 \n Iteration    Log-Likelihood:(With bandwidth:  59200.13 )\n=========================\n       0        -2878 \n       1        -2820 \n       2        -2812 \n       3        -2810 \n       4        -2810 \n       5        -2810 \nFixed bandwidth: 59200.13 AICc value: 5645.901 \n Iteration    Log-Likelihood:(With bandwidth:  36599.53 )\n=========================\n       0        -2854 \n       1        -2790 \n       2        -2777 \n       3        -2774 \n       4        -2774 \n       5        -2774 \n       6        -2774 \nFixed bandwidth: 36599.53 AICc value: 5585.354 \n Iteration    Log-Likelihood:(With bandwidth:  22631.59 )\n=========================\n       0        -2810 \n       1        -2732 \n       2        -2711 \n       3        -2707 \n       4        -2707 \n       5        -2707 \n       6        -2707 \nFixed bandwidth: 22631.59 AICc value: 5481.877 \n Iteration    Log-Likelihood:(With bandwidth:  13998.93 )\n=========================\n       0        -2732 \n       1        -2635 \n       2        -2604 \n       3        -2597 \n       4        -2596 \n       5        -2596 \n       6        -2596 \nFixed bandwidth: 13998.93 AICc value: 5333.718 \n Iteration    Log-Likelihood:(With bandwidth:  8663.649 )\n=========================\n       0        -2624 \n       1        -2502 \n       2        -2459 \n       3        -2447 \n       4        -2446 \n       5        -2446 \n       6        -2446 \n       7        -2446 \nFixed bandwidth: 8663.649 AICc value: 5178.493 \n Iteration    Log-Likelihood:(With bandwidth:  5366.266 )\n=========================\n       0        -2478 \n       1        -2319 \n       2        -2250 \n       3        -2225 \n       4        -2219 \n       5        -2219 \n       6        -2220 \n       7        -2220 \n       8        -2220 \n       9        -2220 \nFixed bandwidth: 5366.266 AICc value: 5022.016 \n Iteration    Log-Likelihood:(With bandwidth:  3328.371 )\n=========================\n       0        -2222 \n       1        -2002 \n       2        -1894 \n       3        -1838 \n       4        -1818 \n       5        -1814 \n       6        -1814 \nFixed bandwidth: 3328.371 AICc value: 4827.587 \n Iteration    Log-Likelihood:(With bandwidth:  2068.882 )\n=========================\n       0        -1837 \n       1        -1528 \n       2        -1357 \n       3        -1261 \n       4        -1222 \n       5        -1222 \nFixed bandwidth: 2068.882 AICc value: 4772.046 \n Iteration    Log-Likelihood:(With bandwidth:  1290.476 )\n=========================\n       0        -1403 \n       1        -1016 \n       2       -807.3 \n       3       -680.2 \n       4       -680.2 \nFixed bandwidth: 1290.476 AICc value: 5809.719 \n Iteration    Log-Likelihood:(With bandwidth:  2549.964 )\n=========================\n       0        -2019 \n       1        -1753 \n       2        -1614 \n       3        -1538 \n       4        -1506 \n       5        -1506 \nFixed bandwidth: 2549.964 AICc value: 4764.056 \n Iteration    Log-Likelihood:(With bandwidth:  2847.289 )\n=========================\n       0        -2108 \n       1        -1862 \n       2        -1736 \n       3        -1670 \n       4        -1644 \n       5        -1644 \nFixed bandwidth: 2847.289 AICc value: 4791.834 \n Iteration    Log-Likelihood:(With bandwidth:  2366.207 )\n=========================\n       0        -1955 \n       1        -1675 \n       2        -1525 \n       3        -1441 \n       4        -1407 \n       5        -1407 \nFixed bandwidth: 2366.207 AICc value: 4755.524 \n Iteration    Log-Likelihood:(With bandwidth:  2252.639 )\n=========================\n       0        -1913 \n       1        -1623 \n       2        -1465 \n       3        -1376 \n       4        -1341 \n       5        -1341 \nFixed bandwidth: 2252.639 AICc value: 4759.188 \n Iteration    Log-Likelihood:(With bandwidth:  2436.396 )\n=========================\n       0        -1980 \n       1        -1706 \n       2        -1560 \n       3        -1479 \n       4        -1446 \n       5        -1446 \nFixed bandwidth: 2436.396 AICc value: 4756.675 \n Iteration    Log-Likelihood:(With bandwidth:  2322.828 )\n=========================\n       0        -1940 \n       1        -1656 \n       2        -1503 \n       3        -1417 \n       4        -1382 \n       5        -1382 \nFixed bandwidth: 2322.828 AICc value: 4756.471 \n Iteration    Log-Likelihood:(With bandwidth:  2393.017 )\n=========================\n       0        -1965 \n       1        -1687 \n       2        -1539 \n       3        -1456 \n       4        -1422 \n       5        -1422 \nFixed bandwidth: 2393.017 AICc value: 4755.57 \n Iteration    Log-Likelihood:(With bandwidth:  2349.638 )\n=========================\n       0        -1949 \n       1        -1668 \n       2        -1517 \n       3        -1432 \n       4        -1398 \n       5        -1398 \nFixed bandwidth: 2349.638 AICc value: 4755.753 \n Iteration    Log-Likelihood:(With bandwidth:  2376.448 )\n=========================\n       0        -1959 \n       1        -1680 \n       2        -1530 \n       3        -1447 \n       4        -1413 \n       5        -1413 \nFixed bandwidth: 2376.448 AICc value: 4755.48 \n Iteration    Log-Likelihood:(With bandwidth:  2382.777 )\n=========================\n       0        -1961 \n       1        -1683 \n       2        -1534 \n       3        -1450 \n       4        -1416 \n       5        -1416 \nFixed bandwidth: 2382.777 AICc value: 4755.491 \n Iteration    Log-Likelihood:(With bandwidth:  2372.536 )\n=========================\n       0        -1958 \n       1        -1678 \n       2        -1528 \n       3        -1445 \n       4        -1411 \n       5        -1411 \nFixed bandwidth: 2372.536 AICc value: 4755.488 \n Iteration    Log-Likelihood:(With bandwidth:  2378.865 )\n=========================\n       0        -1960 \n       1        -1681 \n       2        -1532 \n       3        -1448 \n       4        -1414 \n       5        -1414 \nFixed bandwidth: 2378.865 AICc value: 4755.481 \n Iteration    Log-Likelihood:(With bandwidth:  2374.954 )\n=========================\n       0        -1959 \n       1        -1679 \n       2        -1530 \n       3        -1446 \n       4        -1412 \n       5        -1412 \nFixed bandwidth: 2374.954 AICc value: 4755.482 \n Iteration    Log-Likelihood:(With bandwidth:  2377.371 )\n=========================\n       0        -1959 \n       1        -1680 \n       2        -1531 \n       3        -1447 \n       4        -1413 \n       5        -1413 \nFixed bandwidth: 2377.371 AICc value: 4755.48 \n Iteration    Log-Likelihood:(With bandwidth:  2377.942 )\n=========================\n       0        -1960 \n       1        -1680 \n       2        -1531 \n       3        -1448 \n       4        -1414 \n       5        -1414 \nFixed bandwidth: 2377.942 AICc value: 4755.48 \n Iteration    Log-Likelihood:(With bandwidth:  2377.018 )\n=========================\n       0        -1959 \n       1        -1680 \n       2        -1531 \n       3        -1447 \n       4        -1413 \n       5        -1413 \nFixed bandwidth: 2377.018 AICc value: 4755.48 \n\n\nBelow code chunk shows the new fixed bandwidth value.\n\nbw.fixed_rm\n\n[1] 2377.371\n\n\n\ngwlr.fixed_rm<-ggwr.basic(status~distance_to_tertiary_road+distance_to_city+distance_to_town+is_urban+usage_capacity+water_source_clean+water_point_population+local_population_1km,data=Osun_wp_sp,bw=bw.fixed_rm,family=\"binomial\",kernel=\"gaussian\",adaptive=FALSE,longlat=FALSE)\n\n Iteration    Log-Likelihood\n=========================\n       0        -1959 \n       1        -1680 \n       2        -1531 \n       3        -1447 \n       4        -1413 \n       5        -1413 \n\n\n\ngwlr.fixed_rm\n\n   ***********************************************************************\n   *                       Package   GWmodel                             *\n   ***********************************************************************\n   Program starts at: 2022-12-17 23:59:12 \n   Call:\n   ggwr.basic(formula = status ~ distance_to_tertiary_road + distance_to_city + \n    distance_to_town + is_urban + usage_capacity + water_source_clean + \n    water_point_population + local_population_1km, data = Osun_wp_sp, \n    bw = bw.fixed_rm, family = \"binomial\", kernel = \"gaussian\", \n    adaptive = FALSE, longlat = FALSE)\n\n   Dependent (y) variable:  status\n   Independent variables:  distance_to_tertiary_road distance_to_city distance_to_town is_urban usage_capacity water_source_clean water_point_population local_population_1km\n   Number of data points: 4756\n   Used family: binomial\n   ***********************************************************************\n   *              Results of Generalized linear Regression               *\n   ***********************************************************************\n\nCall:\nNULL\n\nDeviance Residuals: \n     Min        1Q    Median        3Q       Max  \n-129.368    -1.750     1.074     1.742    34.126  \n\nCoefficients:\n                                           Estimate Std. Error z value Pr(>|z|)\nIntercept                                 3.540e-01  1.055e-01   3.354 0.000796\ndistance_to_tertiary_road                 1.001e-04  2.040e-05   4.910 9.13e-07\ndistance_to_city                         -1.764e-05  3.391e-06  -5.202 1.97e-07\ndistance_to_town                         -1.544e-05  2.825e-06  -5.466 4.60e-08\nis_urbanTRUE                             -2.667e-01  7.474e-02  -3.569 0.000358\nusage_capacity1000                       -6.206e-01  6.966e-02  -8.908  < 2e-16\nwater_source_cleanProtected Shallow Well  4.947e-01  8.496e-02   5.823 5.79e-09\nwater_source_cleanProtected Spring        1.279e+00  4.384e-01   2.917 0.003530\nwater_point_population                   -5.098e-04  4.476e-05 -11.390  < 2e-16\nlocal_population_1km                      3.452e-04  1.779e-05  19.407  < 2e-16\n                                            \nIntercept                                ***\ndistance_to_tertiary_road                ***\ndistance_to_city                         ***\ndistance_to_town                         ***\nis_urbanTRUE                             ***\nusage_capacity1000                       ***\nwater_source_cleanProtected Shallow Well ***\nwater_source_cleanProtected Spring       ** \nwater_point_population                   ***\nlocal_population_1km                     ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n(Dispersion parameter for binomial family taken to be 1)\n\n    Null deviance: 6534.5  on 4755  degrees of freedom\nResidual deviance: 5688.9  on 4746  degrees of freedom\nAIC: 5708.9\n\nNumber of Fisher Scoring iterations: 5\n\n\n AICc:  5708.923\n Pseudo R-square value:  0.129406\n   ***********************************************************************\n   *          Results of Geographically Weighted Regression              *\n   ***********************************************************************\n\n   *********************Model calibration information*********************\n   Kernel function: gaussian \n   Fixed bandwidth: 2377.371 \n   Regression points: the same locations as observations are used.\n   Distance metric: A distance matrix is specified for this model calibration.\n\n   ************Summary of Generalized GWR coefficient estimates:**********\n                                                   Min.     1st Qu.      Median\n   Intercept                                -3.7021e+02 -4.3797e+00  3.5590e+00\n   distance_to_tertiary_road                -3.1622e-02 -4.5462e-04  9.1291e-05\n   distance_to_city                         -5.4555e-02 -6.5623e-04 -1.3507e-04\n   distance_to_town                         -8.6549e-03 -5.2754e-04 -1.6785e-04\n   is_urbanTRUE                             -7.3554e+02 -3.4675e+00 -1.6596e+00\n   usage_capacity1000                       -5.5889e+01 -1.0347e+00 -4.1960e-01\n   water_source_cleanProtected.Shallow.Well -1.8842e+02 -4.7295e-01  6.2378e-01\n   water_source_cleanProtected.Spring       -1.3630e+03 -5.3436e+00  2.7714e+00\n   water_point_population                   -2.9696e-02 -2.2705e-03 -1.2277e-03\n   local_population_1km                     -7.7730e-02  4.4281e-04  1.0548e-03\n                                                3rd Qu.      Max.\n   Intercept                                 1.3755e+01 2171.6373\n   distance_to_tertiary_road                 6.3011e-04    0.0237\n   distance_to_city                          1.5921e-04    0.0162\n   distance_to_town                          2.4490e-04    0.0179\n   is_urbanTRUE                              1.0554e+00  995.1840\n   usage_capacity1000                        3.9113e-01    9.2449\n   water_source_cleanProtected.Shallow.Well  1.9564e+00   66.8914\n   water_source_cleanProtected.Spring        7.0805e+00  208.3749\n   water_point_population                    4.5879e-04    0.0765\n   local_population_1km                      1.8479e-03    0.0333\n   ************************Diagnostic information*************************\n   Number of data points: 4756 \n   GW Deviance: 2815.659 \n   AIC : 4418.776 \n   AICc : 4744.213 \n   Pseudo R-square value:  0.5691072 \n\n   ***********************************************************************\n   Program stops at: 2022-12-17 23:59:47 \n\n\nBy comparing the AIC under Global Model and GWLR Model, we notice that AIC dropped from 5708.9 to 4418.776. Notice that GWLR model has no AICc value, therefore, we can only compare AIC value. We can conclude that GWLR model improves the explanatory capabilities compared to generalized linear regression model.\nTo assess the performance of the gwLR, we will convert the SDF object in as data frame by using the code chunk below:\n\ngwr.fixed_rm<-as.data.frame(gwlr.fixed_rm$SDF)\n\nNext, we will label yhat values greater or equal to 0.5 into 1 and else 0. The result of the logic comparison operation will be saved into a field called most.\n\ngwr.fixed_rm<-gwr.fixed_rm%>%\n  mutate(most=ifelse(gwr.fixed_rm$yhat>=0.5,T,F))\n\nNext we will use the confusionMatrix() function of caret package to derive the confusion matrix for GWLR model.\n\ngwr.fixed_rm$y<-as.factor(gwr.fixed_rm$y)\ngwr.fixed_rm$most<-as.factor(gwr.fixed_rm$most)\nCM<-confusionMatrix(data=gwr.fixed_rm$most,reference=gwr.fixed_rm$y)\nCM\n\nConfusion Matrix and Statistics\n\n          Reference\nPrediction FALSE TRUE\n     FALSE  1833  268\n     TRUE    281 2374\n                                          \n               Accuracy : 0.8846          \n                 95% CI : (0.8751, 0.8935)\n    No Information Rate : 0.5555          \n    P-Value [Acc > NIR] : <2e-16          \n                                          \n                  Kappa : 0.7661          \n                                          \n Mcnemar's Test P-Value : 0.6085          \n                                          \n            Sensitivity : 0.8671          \n            Specificity : 0.8986          \n         Pos Pred Value : 0.8724          \n         Neg Pred Value : 0.8942          \n             Prevalence : 0.4445          \n         Detection Rate : 0.3854          \n   Detection Prevalence : 0.4418          \n      Balanced Accuracy : 0.8828          \n                                          \n       'Positive' Class : FALSE           \n                                          \n\n\nIn fact, if we compare the performance (accuracy, sensitivity and specificity) between the GWLR model where we keep the 2 statistically insignificant variables and the GWLR model where we remove the 2 statistically insignificant variable, the accuracy value does not change significantly. This was due to the fact that when statistically insignificant variables (rather than statistically significant variables) were removed from the model, they do not impact much on the performance of the model."
  }
]